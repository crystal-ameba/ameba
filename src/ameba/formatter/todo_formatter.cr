module Ameba::Formatter
  # A formatter that creates a todo config.
  # Basically, it takes all errors reported and disables corresponding rules
  # or excludes failed sources from these rules.
  class TODOFormatter < DotFormatter
    @io : IO::FileDescriptor | IO::Memory

    def initialize(@output = STDOUT, @io = File.new(Config::PATH, mode: "w"))
    end

    def finished(sources)
      super
      errors = sources.map(&.errors).flatten
      generate_todo_config errors if errors.any?
      if (io = @io).is_a?(File)
        @output << "Created #{io.path}\n"
      end
    end

    private def generate_todo_config(errors)
      @io << header
      rule_errors_map(errors).each do |rule, rule_errors|
        @io << "\n# Problems found: #{rule_errors.size}"
        @io << rule_todo(rule, rule_errors).gsub("---", "")
      end
    ensure
      @io.flush
    end

    private def rule_errors_map(errors)
      Hash(Rule::Base, Array(Source::Error)).new.tap do |h|
        errors.each do |error|
          h[error.rule] ||= Array(Source::Error).new
          h[error.rule] << error
        end
      end
    end

    private def header
      <<-HEADER
        # This configuration file was generated by `ameba --gen-config`
        # on #{Time.now} using Ameba version #{VERSION}.
        # The point is for the user to remove these configuration records
        # one by one as the reported problems are removed from the code base.

        HEADER
    end

    private def rule_todo(rule, errors)
      rule.enabled = false
      YAML.build do |yaml|
        yaml.mapping do
          rule.name.to_yaml(yaml)
          rule.to_yaml(yaml)
        end
      end
    end
  end
end
