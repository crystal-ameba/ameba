module Ameba::Formatter
  # A formatter that creates a todo config.
  # Basically, it takes all issues reported and disables corresponding rules
  # or excludes failed sources from these rules.
  class TODOFormatter < DotFormatter
    @io : IO::FileDescriptor | IO::Memory

    def initialize(@output = STDOUT, @io = File.new(Config::PATH, mode: "w"))
    end

    def finished(sources)
      super
      issues = sources.map(&.issues).flatten
      generate_todo_config issues if issues.any?
      if (io = @io).is_a?(File)
        @output << "Created #{io.path}\n"
      end
    end

    private def generate_todo_config(issues)
      @io << header
      rule_issues_map(issues).each do |rule, rule_issues|
        @io << "\n# Problems found: #{rule_issues.size}"
        @io << "\n# Run `ameba --only #{rule.name}` for details"
        @io << rule_todo(rule, rule_issues).gsub("---", "")
      end
    ensure
      @io.flush
    end

    private def rule_issues_map(issues)
      Hash(Rule::Base, Array(Issue)).new.tap do |h|
        issues.each do |issue|
          next if issue.disabled? || issue.rule.is_a? Rule::Syntax
          h[issue.rule] ||= Array(Issue).new
          h[issue.rule] << issue
        end
      end
    end

    private def header
      <<-HEADER
        # This configuration file was generated by `ameba --gen-config`
        # on #{Time.now} using Ameba version #{VERSION}.
        # The point is for the user to remove these configuration records
        # one by one as the reported problems are removed from the code base.

        HEADER
    end

    private def rule_todo(rule, issues)
      rule.excluded =
        issues.map(&.location.try &.filename.try &.to_s)
              .compact
              .uniq!

      {rule.name => rule}.to_yaml
    end
  end
end
