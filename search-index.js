crystal_doc_search_index_callback({"repository_name":"ameba","body":"[![SWUbanner](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg)](https://github.com/vshymanskyy/StandWithUkraine/blob/main/docs/README.md)\n\n\n  \n  \n  \n  \n    \n      \n    \n  \n  \n    \n    \n    \n  \n  \n\n\n- [About](#about)\n- [Usage](#usage)\n  * [Watch a tutorial](#watch-a-tutorial)\n  * [Run in parallel](#run-in-parallel)\n- [Installation](#installation)\n  * [As a project dependency:](#as-a-project-dependency)\n  * [OS X](#os-x)\n  * [Docker](#docker)\n  * [From sources](#from-sources)\n- [Configuration](#configuration)\n  * [Sources](#sources)\n  * [Rules](#rules)\n  * [Explain issues](#explain-issues)\n  * [Inline disabling](#inline-disabling)\n- [Editors & integrations](#editors--integrations)\n- [Credits & inspirations](#credits--inspirations)\n- [Contributors](#contributors)\n\n## About\n\nAmeba is a static code analysis tool for the Crystal language.\nIt enforces a consistent [Crystal code style](https://crystal-lang.org/reference/conventions/coding_style.html),\nalso catches code smells and wrong code constructions.\n\nSee also [Roadmap](https://github.com/crystal-ameba/ameba/wiki).\n\n## Usage\n\nRun `ameba` binary within your project directory to catch code issues:\n\n```sh\n$ ameba\nInspecting 107 files\n\n...............F.....................F....................................................................\n\nsrc/ameba/formatter/flycheck_formatter.cr:4:33\n[W] Lint/UnusedArgument: Unused argument `location`\n> source.issues.each do |e, location|\n                            ^\n\nsrc/ameba/formatter/base_formatter.cr:12:7\n[W] Lint/UselessAssign: Useless assignment to variable `s`\n> return s += issues.size\n         ^\n\nFinished in 542.64 milliseconds\n129 inspected, 2 failures\n```\n\n### Watch a tutorial\n\n\n\n[ðŸŽ¬ Watch the LuckyCast showing how to use Ameba](https://luckycasts.com/videos/ameba)\n\n### Run in parallel\n\nStarting from 0.31.0 Crystal [supports parallelism](https://crystal-lang.org/2019/09/06/parallelism-in-crystal.html).\nIt allows to run linting in parallel too.\nIn order to take advantage of this feature you need to build ameba with preview_mt support:\n\n```sh\n$ crystal build src/cli.cr -Dpreview_mt -o bin/ameba\n$ make install\n```\n\nSome quick benchmark results measured while running Ameba on Crystal repo:\n\n```sh\n$ CRYSTAL_WORKERS=1 ameba #=> 29.11 seconds\n$ CRYSTAL_WORKERS=2 ameba #=> 19.49 seconds\n$ CRYSTAL_WORKERS=4 ameba #=> 13.48 seconds\n$ CRYSTAL_WORKERS=8 ameba #=> 10.14 seconds\n```\n\n## Installation\n\n### As a project dependency:\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndevelopment_dependencies:\n  ameba:\n    github: crystal-ameba/ameba\n    version: ~> 1.0.0\n```\n\nBuild `bin/ameba` binary within your project directory while running `shards install`.\n\nYou may also want to use it on [Travis](travis-ci.org):\n\n```yaml\n# .travis.yml\nlanguage: crystal\ninstall:\n  - shards install\nscript:\n  - crystal spec\n  - crystal bin/ameba.cr\n```\n\nUsing this config Ameba will inspect files just after the specs run. Travis will also fail\nthe build if some problems detected.\n\n### OS X\n\n```sh\n$ brew tap veelenga/tap\n$ brew install ameba\n```\n\n### Docker\n\nBuild the image:\n\n```sh\n$ docker build -t crystal-ameba/ameba .\n```\n\nTo use the resulting image on a local source folder, mount the current (or target) directory into `/src`:\n\n```sh\n$ docker run -v $(pwd):/src crystal-ameba/ameba\n```\n\nAlso available on DockerHub: https://hub.docker.com/r/veelenga/ameba\n\n### From sources\n\n```sh\n$ git clone https://github.com/crystal-ameba/ameba && cd ameba\n$ make install\n```\n\n## Configuration\n\nDefault configuration file is `.ameba.yml`.\nIt allows to configure rule properties, disable specific rules and exclude sources from the rules.\n\nGenerate new file by running `ameba --gen-config`.\n\n### Sources\n\n**List of sources to run Ameba on can be configured globally via:**\n\n- `Globs` section - an array of wildcards (or paths) to include to the\n  inspection. Defaults to `%w(**/*.cr !lib)`, meaning it includes all project\n  files with `*.cr` extension except those which exist in `lib` folder.\n- `Excluded` section - an array of wildcards (or paths) to exclude from the\n  source list defined by `Globs`. Defaults to an empty array.\n\nIn this example we define default globs and exclude `src/compiler` folder:\n\n``` yaml\nGlobs:\n  - **/*.cr\n  - !lib\n\nExcluded:\n  - src/compiler\n```\n\n**Specific sources can be excluded at rule level**:\n\n``` yaml\nStyle/RedundantBegin:\n  Excluded:\n  - src/server/processor.cr\n  - src/server/api.cr\n```\n\n### Rules\n\nOne or more rules, or a one or more group of rules can be included or excluded\nvia command line arguments:\n\n```sh\n$ ameba --only   Lint/Syntax # runs only Lint/Syntax rule\n$ ameba --only   Style,Lint  # runs only rules from Style and Lint groups\n$ ameba --except Lint/Syntax # runs all rules except Lint/Syntax\n$ ameba --except Style,Lint  # runs all rules except rules in Style and Lint groups\n```\n\nOr through the configuration file:\n\n``` yaml\nStyle/RedundantBegin:\n  Enabled: false\n```\n\n### Explain issues\n\nAmeba allows you to dig deeper into an issue, by showing you details about the issue\nand the reasoning by it being reported.\n\nTo be convenient, you can just copy-paste the `PATH:line:column` string from the\nreport and paste behind the `ameba` command to check it out.\n\n```sh\n$ ameba crystal/command/format.cr:26:83           # show explanation for the issue\n$ ameba --explain crystal/command/format.cr:26:83 # same thing\n```\n\n### Inline disabling\n\nOne or more rules or one or more group of rules can be disabled using inline directives:\n\n```crystal\n# ameba:disable Style/LargeNumbers\ntime = Time.epoch(1483859302)\n\ntime = Time.epoch(1483859302) # ameba:disable Style/LargeNumbers, Lint/UselessAssign\n\ntime = Time.epoch(1483859302) # ameba:disable Style, Lint\n```\n\n## Editors & integrations\n\n * Vim: [vim-crystal](https://github.com/rhysd/vim-crystal), [Ale](https://github.com/w0rp/ale)\n * Emacs: [ameba.el](https://github.com/crystal-ameba/ameba.el)\n * Sublime Text: [Sublime Linter Ameba](https://github.com/epergo/SublimeLinter-contrib-ameba)\n * VSCode: [vscode-crystal-ameba](https://github.com/crystal-ameba/vscode-crystal-ameba)\n * Codacy: [codacy-ameba](https://github.com/codacy/codacy-ameba)\n * GitHub Actions: [github-action](https://github.com/crystal-ameba/github-action)\n\n## Credits & inspirations\n\n- [Crystal Language](https://crystal-lang.org)\n- [Rubocop](https://rubocop.readthedocs.io/en/latest/)\n- [Credo](http://credo-ci.org/)\n- [Dogma](https://github.com/lpil/dogma)\n\n## Contributors\n\n- [veelenga](https://github.com/veelenga) Vitalii Elenhaupt - creator, maintainer\n","program":{"html_id":"ameba/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"ancestors":[{"html_id":"ameba/Ameba/Spec/ExpectIssue","kind":"module","full_name":"Ameba::Spec::ExpectIssue","name":"ExpectIssue"},{"html_id":"ameba/Ameba/Spec/Util","kind":"module","full_name":"Ameba::Spec::Util","name":"Util"},{"html_id":"ameba/Ameba/Spec/BeValid","kind":"module","full_name":"Ameba::Spec::BeValid","name":"BeValid"}],"locations":[],"repository_name":"ameba","program":true,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/Spec/BeValid","kind":"module","full_name":"Ameba::Spec::BeValid","name":"BeValid"},{"html_id":"ameba/Ameba/Spec/ExpectIssue","kind":"module","full_name":"Ameba::Spec::ExpectIssue","name":"ExpectIssue"}],"extended_modules":[{"html_id":"ameba/Ameba/Spec/BeValid","kind":"module","full_name":"Ameba::Spec::BeValid","name":"BeValid"},{"html_id":"ameba/Ameba/Spec/ExpectIssue","kind":"module","full_name":"Ameba::Spec::ExpectIssue","name":"ExpectIssue"}],"class_methods":[{"html_id":"trailing_whitespace-class-method","name":"trailing_whitespace","abstract":false,"location":{"filename":"src/ameba/spec/support.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/support.cr#L17"},"def":{"name":"trailing_whitespace","visibility":"Public","body":"' '"}}],"types":[{"html_id":"ameba/Ameba","path":"Ameba.html","kind":"module","full_name":"Ameba","name":"Ameba","abstract":false,"locations":[{"filename":"src/ameba.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba.cr#L25"},{"filename":"src/ameba/glob_utils.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/glob_utils.cr#L1"},{"filename":"src/ameba/inline_comments.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L1"},{"filename":"src/ameba/issue.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L1"},{"filename":"src/ameba/reportable.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L1"},{"filename":"src/ameba/runner.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L1"},{"filename":"src/ameba/severity.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L1"},{"filename":"src/ameba/source.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L1"},{"filename":"src/ameba/spec/support.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/support.cr#L7"},{"filename":"src/ameba/tokenizer.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/tokenizer.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/home/runner/work/ameba/ameba/src\\\"`).chomp.stringify }}"}],"extended_modules":[{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"}],"doc":"Ameba's entry module.\n\nTo run the linter with default parameters:\n\n```\nAmeba.run\n```\n\nTo configure and run it:\n\n```\nconfig = Ameba::Config.load\nconfig.formatter = formatter\nconfig.files = file_paths\n\nAmeba.run config\n```","summary":"<p>Ameba's entry module.</p>","instance_methods":[{"html_id":"run(config=Config.load)-instance-method","name":"run","doc":"Initializes `Ameba::Runner` and runs it.\nCan be configured via `config` parameter.\n\nExamples:\n\n```\nAmeba.run\nAmeba.run config\n```","summary":"<p>Initializes <code><a href=\"Ameba/Runner.html\">Ameba::Runner</a></code> and runs it.</p>","abstract":false,"args":[{"name":"config","default_value":"Config.load","external_name":"config","restriction":""}],"args_string":"(config = Config.load)","args_html":"(config = <span class=\"t\">Config</span>.load)","location":{"filename":"src/ameba.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba.cr#L39"},"def":{"name":"run","args":[{"name":"config","default_value":"Config.load","external_name":"config","restriction":""}],"visibility":"Public","body":"(Runner.new(config)).run"}}],"types":[{"html_id":"ameba/Ameba/AST","path":"Ameba/AST.html","kind":"module","full_name":"Ameba::AST","name":"AST","abstract":false,"locations":[{"filename":"src/ameba/ast/branch.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L1"},{"filename":"src/ameba/ast/branchable.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L3"},{"filename":"src/ameba/ast/flow_expression.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L3"},{"filename":"src/ameba/ast/scope.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L3"},{"filename":"src/ameba/ast/variabling/argument.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L1"},{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L4"},{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L1"},{"filename":"src/ameba/ast/variabling/reference.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/reference.cr#L3"},{"filename":"src/ameba/ast/variabling/variable.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L1"},{"filename":"src/ameba/ast/visitors/base_visitor.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/base_visitor.cr#L4"},{"filename":"src/ameba/ast/visitors/counting_visitor.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/counting_visitor.cr#L1"},{"filename":"src/ameba/ast/visitors/flow_expression_visitor.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/flow_expression_visitor.cr#L4"},{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L3"},{"filename":"src/ameba/ast/visitors/redundant_control_expression_visitor.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/redundant_control_expression_visitor.cr#L1"},{"filename":"src/ameba/ast/visitors/scope_visitor.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/scope_visitor.cr#L3"},{"filename":"src/ameba/ast/visitors/top_level_nodes_visitor.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/top_level_nodes_visitor.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"NODES","name":"NODES","value":"[Alias, IsA, Assign, Call, Block, Case, ClassDef, ClassVar, Def, EnumDef, ExceptionHandler, Expressions, HashLiteral, If, InstanceVar, LibDef, ModuleDef, NilLiteral, StringInterpolation, Unless, Var, When, While, Until]","doc":"List of nodes to be visited by Ameba's rules.","summary":"<p>List of nodes to be visited by Ameba's rules.</p>"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"A module that helps to traverse Crystal AST using `Crystal::Visitor`.","summary":"<p>A module that helps to traverse Crystal AST using <code>Crystal::Visitor</code>.</p>","types":[{"html_id":"ameba/Ameba/AST/Argument","path":"Ameba/AST/Argument.html","kind":"class","full_name":"Ameba::AST::Argument","name":"Argument","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/variabling/argument.cr","line_number":15,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L15"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Represents the argument of some node.\nHolds the reference to the variable, thus to scope.\n\nFor example, all these vars are arguments:\n\n```\ndef method(a, b, c = 10, &block)\n  3.times do |i|\n  end\n\n  ->(x : Int32) {}\nend\n```","summary":"<p>Represents the argument of some node.</p>","constructors":[{"html_id":"new(node:Crystal::ASTNode,variable:Ameba::AST::Variable)-class-method","name":"new","doc":"Creates a new argument.\n\n```\nArgument.new(node, variable)\n```","summary":"<p>Creates a new argument.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"variable","external_name":"variable","restriction":"::Ameba::AST::Variable"}],"args_string":"(node : Crystal::ASTNode, variable : Ameba::AST::Variable)","args_html":"(node : Crystal::ASTNode, variable : <a href=\"../../Ameba/AST/Variable.html\">Ameba::AST::Variable</a>)","location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":31,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L31"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"variable","external_name":"variable","restriction":"::Ameba::AST::Variable"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node, variable)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L23"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L23"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"ignored?-instance-method","name":"ignored?","doc":"Returns true if the name starts with '_', false if not.","summary":"<p>Returns true if the name starts with '_', false if not.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L35"},"def":{"name":"ignored?","visibility":"Public","body":"name.starts_with?('_')"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L22"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L22"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"name-instance-method","name":"name","doc":"Name of the argument.","summary":"<p>Name of the argument.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L40"},"def":{"name":"name","visibility":"Public","body":"case current_node = node\nwhen Crystal::Var, Crystal::Arg\n  current_node.name\nelse\n  raise(ArgumentError.new(\"Invalid node\"))\nend"}},{"html_id":"node:Crystal::Var|Crystal::Arg-instance-method","name":"node","doc":"The actual node.","summary":"<p>The actual node.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L17"},"def":{"name":"node","return_type":"Crystal::Var | Crystal::Arg","visibility":"Public","body":"@node"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L24"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L24"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"variable:Variable-instance-method","name":"variable","doc":"Variable of this argument (may be the same node)","summary":"<p>Variable of this argument (may be the same node)</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/argument.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/argument.cr#L20"},"def":{"name":"variable","return_type":"Variable","visibility":"Public","body":"@variable"}}]},{"html_id":"ameba/Ameba/AST/Assignment","path":"Ameba/AST/Assignment.html","kind":"class","full_name":"Ameba::AST::Assignment","name":"Assignment","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L7"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Represents the assignment to the variable.\nHolds the assign node and the variable.","summary":"<p>Represents the assignment to the variable.</p>","constructors":[{"html_id":"new(node:Crystal::ASTNode,variable:Ameba::AST::Variable,scope:Ameba::AST::Scope)-class-method","name":"new","doc":"Creates a new assignment.\n\n```\nAssignment.new(node, variable, scope)\n```","summary":"<p>Creates a new assignment.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"variable","external_name":"variable","restriction":"::Ameba::AST::Variable"},{"name":"scope","external_name":"scope","restriction":"::Ameba::AST::Scope"}],"args_string":"(node : Crystal::ASTNode, variable : Ameba::AST::Variable, scope : Ameba::AST::Scope)","args_html":"(node : Crystal::ASTNode, variable : <a href=\"../../Ameba/AST/Variable.html\">Ameba::AST::Variable</a>, scope : <a href=\"../../Ameba/AST/Scope.html\">Ameba::AST::Scope</a>)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":31,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L31"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"variable","external_name":"variable","restriction":"::Ameba::AST::Variable"},{"name":"scope","external_name":"scope","restriction":"::Ameba::AST::Scope"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node, variable, scope)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"branch:Branch?-instance-method","name":"branch","doc":"Branch of this assignment.","summary":"<p>Branch of this assignment.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L17"},"def":{"name":"branch","return_type":"Branch | ::Nil","visibility":"Public","body":"@branch"}},{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L24"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L24"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"in_branch?-instance-method","name":"in_branch?","doc":"Returns true if this assignment is in a branch, false if not.\nFor example, this assignment is in a branch:\n\n```\na = 1 if a.nil?\n```","summary":"<p>Returns true if this assignment is in a branch, false if not.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":59,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L59"},"def":{"name":"in_branch?","visibility":"Public","body":"!branch.nil?"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L23"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L23"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"node:Crystal::ASTNode-instance-method","name":"node","doc":"The actual assignment node.","summary":"<p>The actual assignment node.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L11"},"def":{"name":"node","return_type":"Crystal::ASTNode","visibility":"Public","body":"@node"}},{"html_id":"op_assign?-instance-method","name":"op_assign?","doc":"Returns true if this assignment is an op assign, false if not.\nFor example, this is an op assign:\n\n```\na ||= 1\n```","summary":"<p>Returns true if this assignment is an op assign, false if not.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":49,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L49"},"def":{"name":"op_assign?","visibility":"Public","body":"node.is_a?(Crystal::OpAssign)"}},{"html_id":"referenced=(referenced:Bool)-instance-method","name":"referenced=","abstract":false,"args":[{"name":"referenced","external_name":"referenced","restriction":"::Bool"}],"args_string":"(referenced : Bool)","args_html":"(referenced : Bool)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L8"},"def":{"name":"referenced=","args":[{"name":"referenced","external_name":"referenced","restriction":"::Bool"}],"visibility":"Public","body":"@referenced = referenced"}},{"html_id":"referenced?:Bool-instance-method","name":"referenced?","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L8"},"def":{"name":"referenced?","visibility":"Public","body":"@referenced"}},{"html_id":"referenced_in_loop?-instance-method","name":"referenced_in_loop?","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L39"},"def":{"name":"referenced_in_loop?","visibility":"Public","body":"@variable.referenced? && @branch.try(&.in_loop?)"}},{"html_id":"scope:Scope-instance-method","name":"scope","doc":"A scope assignment belongs to","summary":"<p>A scope assignment belongs to</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L20"},"def":{"name":"scope","return_type":"Scope","visibility":"Public","body":"@scope"}},{"html_id":"target_node-instance-method","name":"target_node","doc":"Returns the target node of the variable in this assignment.","summary":"<p>Returns the target node of the variable in this assignment.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":64,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L64"},"def":{"name":"target_node","visibility":"Public","body":"case assign = node\nwhen Crystal::Assign\n  assign.target\nwhen Crystal::OpAssign\n  assign.target\nwhen Crystal::UninitializedVar\n  assign.var\nwhen Crystal::MultiAssign\n  assign.targets.find(node) do |target|\n    target.is_a?(Crystal::Var) && (target.name == variable.name)\n  end\nelse\n  node\nend"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L22"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L22"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"transformed?-instance-method","name":"transformed?","doc":"Indicates whether the node is a transformed assignment by the compiler.\ni.e.\n\n```\ncollection.each do |(a, b)|\n  puts b\nend\n```\n\nis transformed to:\n\n```\ncollection.each do |__arg0|\n  a = __arg0[0]\n  b = __arg0[1]\n  puts(b)\nend\n```","summary":"<p>Indicates whether the node is a transformed assignment by the compiler.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":96,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L96"},"def":{"name":"transformed?","visibility":"Public","body":"if (assign = node).is_a?(Crystal::Assign)\nelse\n  return false\nend\nif (value = assign.value).is_a?(Crystal::Call)\nelse\n  return false\nend\nif (obj = value.obj).is_a?(Crystal::Var)\nelse\n  return false\nend\nobj.name.starts_with?(\"__arg\")\n"}},{"html_id":"variable:Variable-instance-method","name":"variable","doc":"Variable of this assignment.","summary":"<p>Variable of this assignment.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/assignment.cr","line_number":14,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/assignment.cr#L14"},"def":{"name":"variable","return_type":"Variable","visibility":"Public","body":"@variable"}}]},{"html_id":"ameba/Ameba/AST/BaseVisitor","path":"Ameba/AST/BaseVisitor.html","kind":"class","full_name":"Ameba::AST::BaseVisitor","name":"BaseVisitor","abstract":true,"superclass":{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},"ancestors":[{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/visitors/base_visitor.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/base_visitor.cr#L6"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"ameba/Ameba/AST/FlowExpressionVisitor","kind":"class","full_name":"Ameba::AST::FlowExpressionVisitor","name":"FlowExpressionVisitor"},{"html_id":"ameba/Ameba/AST/NodeVisitor","kind":"class","full_name":"Ameba::AST::NodeVisitor","name":"NodeVisitor"},{"html_id":"ameba/Ameba/AST/ScopeVisitor","kind":"class","full_name":"Ameba::AST::ScopeVisitor","name":"ScopeVisitor"}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"An abstract base visitor that utilizes general logic for all visitors.","summary":"<p>An abstract base visitor that utilizes general logic for all visitors.</p>","constructors":[{"html_id":"new(rule:Ameba::Rule::Base,source:Ameba::Source)-class-method","name":"new","doc":"Creates instance of this visitor.\n\n```\nvisitor = Ameba::AST::NodeVisitor.new(rule, source)\n```","summary":"<p>Creates instance of this visitor.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"::Ameba::Rule::Base"},{"name":"source","external_name":"source","restriction":"::Ameba::Source"}],"args_string":"(rule : Ameba::Rule::Base, source : Ameba::Source)","args_html":"(rule : <a href=\"../../Ameba/Rule/Base.html\">Ameba::Rule::Base</a>, source : <a href=\"../../Ameba/Source.html\">Ameba::Source</a>)","location":{"filename":"src/ameba/ast/visitors/base_visitor.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/base_visitor.cr#L18"},"def":{"name":"new","args":[{"name":"rule","external_name":"rule","restriction":"::Ameba::Rule::Base"},{"name":"source","external_name":"source","restriction":"::Ameba::Source"}],"visibility":"Public","body":"_ = allocate\n_.initialize(rule, source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"visit(node:Crystal::ASTNode)-instance-method","name":"visit","doc":"A main visit method that accepts `Crystal::ASTNode`.\nReturns true meaning all child nodes will be traversed.","summary":"<p>A main visit method that accepts <code>Crystal::ASTNode</code>.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"}],"args_string":"(node : Crystal::ASTNode)","args_html":"(node : Crystal::ASTNode)","location":{"filename":"src/ameba/ast/visitors/base_visitor.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/base_visitor.cr#L24"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"}],"visibility":"Public","body":"true"}}]},{"html_id":"ameba/Ameba/AST/Branch","path":"Ameba/AST/Branch.html","kind":"class","full_name":"Ameba::AST::Branch","name":"Branch","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/branch.cr","line_number":15,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L15"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Represents the branch in Crystal code.\nBranch is a part of a branchable statement.\nFor example, the branchable if statement contains 3 branches:\n\n```\nif a = something # --> Branch A\n  a = 1          # --> Branch B\n  put a if out   # --> Branch C\nelse\n  do_something a # --> Branch D\nend\n```\n","summary":"<p>Represents the branch in Crystal code.</p>","class_methods":[{"html_id":"of(node:Crystal::ASTNode,parent_node:Crystal::ASTNode)-class-method","name":"of","doc":"Constructs a new branch based on the node some parent scope.\n\n```\nBranch.of(assign_node, def_node)\n```","summary":"<p>Constructs a new branch based on the node some parent scope.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"parent_node","external_name":"parent_node","restriction":"Crystal::ASTNode"}],"args_string":"(node : Crystal::ASTNode, parent_node : Crystal::ASTNode)","args_html":"(node : Crystal::ASTNode, parent_node : Crystal::ASTNode)","location":{"filename":"src/ameba/ast/branch.cr","line_number":65,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L65"},"def":{"name":"of","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"parent_node","external_name":"parent_node","restriction":"Crystal::ASTNode"}],"visibility":"Public","body":"(BranchVisitor.new(node)).tap(&.accept(parent_node)).branch"}},{"html_id":"of(node:Crystal::ASTNode,scope:Scope)-class-method","name":"of","doc":"Constructs a new branch based on the node in scope.\n\n```\nBranch.of(assign_node, scope)\n```","summary":"<p>Constructs a new branch based on the node in scope.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"scope","external_name":"scope","restriction":"Scope"}],"args_string":"(node : Crystal::ASTNode, scope : Scope)","args_html":"(node : Crystal::ASTNode, scope : <a href=\"../../Ameba/AST/Scope.html\">Scope</a>)","location":{"filename":"src/ameba/ast/branch.cr","line_number":56,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L56"},"def":{"name":"of","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"scope","external_name":"scope","restriction":"Scope"}],"visibility":"Public","body":"of(node, scope.node)"}}],"constructors":[{"html_id":"new(node:Crystal::ASTNode,parent:Ameba::AST::Branchable)-class-method","name":"new","doc":"Creates a new branch.\n\n```\nBranch.new(if_node)\n```","summary":"<p>Creates a new branch.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"parent","external_name":"parent","restriction":"::Ameba::AST::Branchable"}],"args_string":"(node : Crystal::ASTNode, parent : Ameba::AST::Branchable)","args_html":"(node : Crystal::ASTNode, parent : <a href=\"../../Ameba/AST/Branchable.html\">Ameba::AST::Branchable</a>)","location":{"filename":"src/ameba/ast/branch.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L33"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"parent","external_name":"parent","restriction":"::Ameba::AST::Branchable"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node, parent)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif node == other.node\nelse\n  return false\nend\nif location == other.location\nelse\n  return false\nend\ntrue\n"}},{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/branch.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L24"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/branch.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L24"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = node.hash(hasher)\nhasher = location.hash(hasher)\nhasher\n"}},{"html_id":"in_loop?-instance-method","name":"in_loop?","doc":"Returns true if current branch is in a loop, false - otherwise.\nFor example, this branch is in a loop:\n\n```\nwhile true\n  handle_input # this branch is in a loop\n  if wrong_input\n    show_message # this branch is also in a loop.\n  end\nend\n```","summary":"<p>Returns true if current branch is in a loop, false - otherwise.</p>","abstract":false,"location":{"filename":"src/ameba/ast/branch.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L47"},"def":{"name":"in_loop?","visibility":"Public","body":"@parent.loop?"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/branch.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L23"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/branch.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L23"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"node:Crystal::ASTNode-instance-method","name":"node","doc":"The actual branch node.","summary":"<p>The actual branch node.</p>","abstract":false,"location":{"filename":"src/ameba/ast/branch.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L17"},"def":{"name":"node","return_type":"Crystal::ASTNode","visibility":"Public","body":"@node"}},{"html_id":"parent:Branchable-instance-method","name":"parent","doc":"The parent branchable.","summary":"<p>The parent branchable.</p>","abstract":false,"location":{"filename":"src/ameba/ast/branch.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L20"},"def":{"name":"parent","return_type":"Branchable","visibility":"Public","body":"@parent"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/branch.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L22"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/branch.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branch.cr#L22"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"ameba/Ameba/AST/Branchable","path":"Ameba/AST/Branchable.html","kind":"class","full_name":"Ameba::AST::Branchable","name":"Branchable","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/branchable.cr","line_number":15,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L15"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"A generic entity to represent a branchable Crystal node.\nFor example, `Crystal::If`, `Crystal::Unless`, `Crystal::While`\nare branchables.\n\n```\nwhite a > 100 # Branchable A\n  if b > 2    # Branchable B\n    a += 1\n  end\nend\n```","summary":"<p>A generic entity to represent a branchable Crystal node.</p>","constructors":[{"html_id":"new(node:Crystal::ASTNode,parent:Ameba::AST::Branchable?=nil)-class-method","name":"new","doc":"Creates a new branchable\n\n```\nBranchable.new(node, parent_branchable)\n```","summary":"<p>Creates a new branchable</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"parent","default_value":"nil","external_name":"parent","restriction":"::Nil | ::Ameba::AST::Branchable"}],"args_string":"(node : Crystal::ASTNode, parent : Ameba::AST::Branchable? = nil)","args_html":"(node : Crystal::ASTNode, parent : <a href=\"../../Ameba/AST/Branchable.html\">Ameba::AST::Branchable</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/ast/branchable.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L35"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"parent","default_value":"nil","external_name":"parent","restriction":"::Nil | ::Ameba::AST::Branchable"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node, parent)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"branches:Array(Crystal::ASTNode)-instance-method","name":"branches","abstract":false,"location":{"filename":"src/ameba/ast/branchable.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L18"},"def":{"name":"branches","visibility":"Public","body":"@branches"}},{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/branchable.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L28"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/branchable.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L28"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/branchable.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L27"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/branchable.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L27"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"loop?-instance-method","name":"loop?","doc":"Returns true if this node or one of the parent branchables is a loop, false otherwise.","summary":"<p>Returns true if this node or one of the parent branchables is a loop, false otherwise.</p>","abstract":false,"location":{"filename":"src/ameba/ast/branchable.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L39"},"def":{"name":"loop?","visibility":"Public","body":"((loop?(node)) || parent.try(&.loop?)) || false"}},{"html_id":"node:Crystal::ASTNode-instance-method","name":"node","doc":"The actual Crystal node.","summary":"<p>The actual Crystal node.</p>","abstract":false,"location":{"filename":"src/ameba/ast/branchable.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L21"},"def":{"name":"node","return_type":"Crystal::ASTNode","visibility":"Public","body":"@node"}},{"html_id":"parent:Branchable?-instance-method","name":"parent","doc":"Parent branchable (if any)","summary":"<p>Parent branchable (if any)</p>","abstract":false,"location":{"filename":"src/ameba/ast/branchable.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L24"},"def":{"name":"parent","return_type":"Branchable | ::Nil","visibility":"Public","body":"@parent"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/branchable.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L26"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/branchable.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/branchable.cr#L26"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"ameba/Ameba/AST/CountingVisitor","path":"Ameba/AST/CountingVisitor.html","kind":"class","full_name":"Ameba::AST::CountingVisitor","name":"CountingVisitor","abstract":false,"superclass":{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},"ancestors":[{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/visitors/counting_visitor.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/counting_visitor.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEFAULT_COMPLEXITY","name":"DEFAULT_COMPLEXITY","value":"1"}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"AST Visitor that counts occurrences of certain keywords","summary":"<p>AST Visitor that counts occurrences of certain keywords</p>","constructors":[{"html_id":"new(scope:Crystal::ASTNode)-class-method","name":"new","doc":"Creates a new counting visitor","summary":"<p>Creates a new counting visitor</p>","abstract":false,"args":[{"name":"scope","external_name":"scope","restriction":"Crystal::ASTNode"}],"args_string":"(scope : Crystal::ASTNode)","args_html":"(scope : Crystal::ASTNode)","location":{"filename":"src/ameba/ast/visitors/counting_visitor.cr","line_number":9,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/counting_visitor.cr#L9"},"def":{"name":"new","args":[{"name":"scope","external_name":"scope","restriction":"Crystal::ASTNode"}],"visibility":"Public","body":"_ = allocate\n_.initialize(scope)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"count-instance-method","name":"count","doc":"Returns the number of keywords that were found in the node","summary":"<p>Returns the number of keywords that were found in the node</p>","abstract":false,"location":{"filename":"src/ameba/ast/visitors/counting_visitor.cr","line_number":19,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/counting_visitor.cr#L19"},"def":{"name":"count","visibility":"Public","body":"@scope.accept(self)\n@complexity\n"}},{"html_id":"macro_condition:Bool-instance-method","name":"macro_condition","abstract":false,"location":{"filename":"src/ameba/ast/visitors/counting_visitor.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/counting_visitor.cr#L6"},"def":{"name":"macro_condition","visibility":"Public","body":"@macro_condition"}},{"html_id":"visit(node:Crystal::MacroIf|Crystal::MacroFor)-instance-method","name":"visit","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::MacroIf | Crystal::MacroFor"}],"args_string":"(node : Crystal::MacroIf | Crystal::MacroFor)","args_html":"(node : Crystal::MacroIf | Crystal::MacroFor)","location":{"filename":"src/ameba/ast/visitors/counting_visitor.cr","line_number":45,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/counting_visitor.cr#L45"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::MacroIf | Crystal::MacroFor"}],"visibility":"Public","body":"@macro_condition = true\n@complexity = DEFAULT_COMPLEXITY\nfalse\n"}}]},{"html_id":"ameba/Ameba/AST/FlowExpression","path":"Ameba/AST/FlowExpression.html","kind":"class","full_name":"Ameba::AST::FlowExpression","name":"FlowExpression","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/flow_expression.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L18"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Represents a flow expression in Crystal code.\nFor example,\n\n```\ndef foobar\n  a = 3\n  return 42 # => flow expression\n  a + 1\nend\n```\n\nFlow expression contains an actual node of a control expression and\na parent node, which allows easily search through the related statement\n(i.e. find unreachable code)","summary":"<p>Represents a flow expression in Crystal code.</p>","constructors":[{"html_id":"new(node:Crystal::ASTNode,in_loop:Bool)-class-method","name":"new","doc":"Creates a new flow expression.\n\n```\nFlowExpression.new(node, parent_node)\n```","summary":"<p>Creates a new flow expression.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"in_loop","external_name":"in_loop","restriction":"::Bool"}],"args_string":"(node : Crystal::ASTNode, in_loop : Bool)","args_html":"(node : Crystal::ASTNode, in_loop : Bool)","location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":36,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L36"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"in_loop","external_name":"in_loop","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node, in_loop)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L29"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L29"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"in_loop?:Bool-instance-method","name":"in_loop?","doc":"Is true only if some of the nodes parents is a loop.","summary":"<p>Is true only if some of the nodes parents is a loop.</p>","abstract":false,"location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L22"},"def":{"name":"in_loop?","return_type":"Bool","visibility":"Public","body":"@in_loop"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L28"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L28"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"node:Crystal::ASTNode-instance-method","name":"node","doc":"The actual node of the flow expression.","summary":"<p>The actual node of the flow expression.</p>","abstract":false,"location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L25"},"def":{"name":"node","return_type":"Crystal::ASTNode","visibility":"Public","body":"@node"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L27"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L27"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"unreachable_nodes-instance-method","name":"unreachable_nodes","doc":"Returns nodes which can't be reached because of a flow command inside.\nFor example:\n\n```\ndef foobar\n  a = 1\n  return 42\n\n  a + 2 # => unreachable assign node\nend\n```","summary":"<p>Returns nodes which can't be reached because of a flow command inside.</p>","abstract":false,"location":{"filename":"src/ameba/ast/flow_expression.cr","line_number":50,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/flow_expression.cr#L50"},"def":{"name":"unreachable_nodes","visibility":"Public","body":"unreachable_nodes = [] of Crystal::ASTNode\ncase current_node = node\nwhen Crystal::Expressions\n  control_flow_found = false\n  current_node.expressions.each do |exp|\n    if control_flow_found\n      unreachable_nodes << exp\n    end\n    control_flow_found || (control_flow_found = (!(loop?(exp))) && (flow_expression?(exp, in_loop?)))\n  end\nwhen Crystal::BinaryOp\n  if flow_expression?(current_node.left, in_loop?)\n    unreachable_nodes << current_node.right\n  end\nend\nunreachable_nodes\n"}}]},{"html_id":"ameba/Ameba/AST/FlowExpressionVisitor","path":"Ameba/AST/FlowExpressionVisitor.html","kind":"class","full_name":"Ameba::AST::FlowExpressionVisitor","name":"FlowExpressionVisitor","abstract":false,"superclass":{"html_id":"ameba/Ameba/AST/BaseVisitor","kind":"class","full_name":"Ameba::AST::BaseVisitor","name":"BaseVisitor"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/Ameba/AST/BaseVisitor","kind":"class","full_name":"Ameba::AST::BaseVisitor","name":"BaseVisitor"},{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/visitors/flow_expression_visitor.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/flow_expression_visitor.cr#L6"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"AST Visitor that traverses all the flow expressions.","summary":"<p>AST Visitor that traverses all the flow expressions.</p>","constructors":[{"html_id":"new(rule,source)-class-method","name":"new","doc":"Creates a new flow expression visitor.","summary":"<p>Creates a new flow expression visitor.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"source","external_name":"source","restriction":""}],"args_string":"(rule, source)","args_html":"(rule, source)","location":{"filename":"src/ameba/ast/visitors/flow_expression_visitor.cr","line_number":12,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/flow_expression_visitor.cr#L12"},"def":{"name":"new","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(rule, source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"ameba/Ameba/AST/InstanceVariable","path":"Ameba/AST/InstanceVariable.html","kind":"class","full_name":"Ameba::AST::InstanceVariable","name":"InstanceVariable","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"constructors":[{"html_id":"new(node:Crystal::InstanceVar)-class-method","name":"new","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::InstanceVar"}],"args_string":"(node : Crystal::InstanceVar)","args_html":"(node : Crystal::InstanceVar)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L10"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::InstanceVar"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L6"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L6"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L5"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L5"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"name(*args,**options)-instance-method","name":"name","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L7"},"def":{"name":"name","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.name(*args, **options)"}},{"html_id":"name(*args,**options,&)-instance-method","name":"name","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L7"},"def":{"name":"name","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.name(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"node:Crystal::InstanceVar-instance-method","name":"node","abstract":false,"location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L3"},"def":{"name":"node","return_type":"Crystal::InstanceVar","visibility":"Public","body":"@node"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L8"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/ivariable.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/ivariable.cr#L8"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"ameba/Ameba/AST/NodeVisitor","path":"Ameba/AST/NodeVisitor.html","kind":"class","full_name":"Ameba::AST::NodeVisitor","name":"NodeVisitor","abstract":false,"superclass":{"html_id":"ameba/Ameba/AST/BaseVisitor","kind":"class","full_name":"Ameba::AST::BaseVisitor","name":"BaseVisitor"},"ancestors":[{"html_id":"ameba/Ameba/AST/BaseVisitor","kind":"class","full_name":"Ameba::AST::BaseVisitor","name":"BaseVisitor"},{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L39"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"An AST Visitor that traverses the source and allows all nodes\nto be inspected by rules.\n\n```\nvisitor = Ameba::AST::NodeVisitor.new(rule, source)\n```\n","summary":"<p>An AST Visitor that traverses the source and allows all nodes to be inspected by rules.</p>","constructors":[{"html_id":"new(rule,source,skip=nil)-class-method","name":"new","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"source","external_name":"source","restriction":""},{"name":"skip","default_value":"nil","external_name":"skip","restriction":""}],"args_string":"(rule, source, skip = nil)","args_html":"(rule, source, skip = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":42,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L42"},"def":{"name":"new","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"source","external_name":"source","restriction":""},{"name":"skip","default_value":"nil","external_name":"skip","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(rule, source, skip)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"visit(node:Crystal::Alias)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Alias` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Alias</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Alias"}],"args_string":"(node : Crystal::Alias)","args_html":"(node : Crystal::Alias)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Alias"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::IsA)-instance-method","name":"visit","doc":"A visit callback for `Crystal::IsA` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::IsA</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::IsA"}],"args_string":"(node : Crystal::IsA)","args_html":"(node : Crystal::IsA)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::IsA"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Assign)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Assign` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Assign</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Assign"}],"args_string":"(node : Crystal::Assign)","args_html":"(node : Crystal::Assign)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Assign"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Call)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Call` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Call</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(node : Crystal::Call)","args_html":"(node : Crystal::Call)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Block)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Block` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Block</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Block"}],"args_string":"(node : Crystal::Block)","args_html":"(node : Crystal::Block)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Block"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Case)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Case` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Case</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Case"}],"args_string":"(node : Crystal::Case)","args_html":"(node : Crystal::Case)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Case"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::ClassDef)-instance-method","name":"visit","doc":"A visit callback for `Crystal::ClassDef` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::ClassDef</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ClassDef"}],"args_string":"(node : Crystal::ClassDef)","args_html":"(node : Crystal::ClassDef)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::ClassDef"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::ClassVar)-instance-method","name":"visit","doc":"A visit callback for `Crystal::ClassVar` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::ClassVar</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ClassVar"}],"args_string":"(node : Crystal::ClassVar)","args_html":"(node : Crystal::ClassVar)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::ClassVar"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Def)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Def` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Def</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"args_string":"(node : Crystal::Def)","args_html":"(node : Crystal::Def)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::EnumDef)-instance-method","name":"visit","doc":"A visit callback for `Crystal::EnumDef` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::EnumDef</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::EnumDef"}],"args_string":"(node : Crystal::EnumDef)","args_html":"(node : Crystal::EnumDef)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::EnumDef"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::ExceptionHandler)-instance-method","name":"visit","doc":"A visit callback for `Crystal::ExceptionHandler` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::ExceptionHandler</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ExceptionHandler"}],"args_string":"(node : Crystal::ExceptionHandler)","args_html":"(node : Crystal::ExceptionHandler)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::ExceptionHandler"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Expressions)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Expressions` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Expressions</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Expressions"}],"args_string":"(node : Crystal::Expressions)","args_html":"(node : Crystal::Expressions)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Expressions"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::HashLiteral)-instance-method","name":"visit","doc":"A visit callback for `Crystal::HashLiteral` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::HashLiteral</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::HashLiteral"}],"args_string":"(node : Crystal::HashLiteral)","args_html":"(node : Crystal::HashLiteral)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::HashLiteral"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::If)-instance-method","name":"visit","doc":"A visit callback for `Crystal::If` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::If</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::If"}],"args_string":"(node : Crystal::If)","args_html":"(node : Crystal::If)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::If"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::InstanceVar)-instance-method","name":"visit","doc":"A visit callback for `Crystal::InstanceVar` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::InstanceVar</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::InstanceVar"}],"args_string":"(node : Crystal::InstanceVar)","args_html":"(node : Crystal::InstanceVar)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::InstanceVar"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::LibDef)-instance-method","name":"visit","doc":"A visit callback for `Crystal::LibDef` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::LibDef</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::LibDef"}],"args_string":"(node : Crystal::LibDef)","args_html":"(node : Crystal::LibDef)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::LibDef"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::ModuleDef)-instance-method","name":"visit","doc":"A visit callback for `Crystal::ModuleDef` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::ModuleDef</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ModuleDef"}],"args_string":"(node : Crystal::ModuleDef)","args_html":"(node : Crystal::ModuleDef)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::ModuleDef"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::NilLiteral)-instance-method","name":"visit","doc":"A visit callback for `Crystal::NilLiteral` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::NilLiteral</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::NilLiteral"}],"args_string":"(node : Crystal::NilLiteral)","args_html":"(node : Crystal::NilLiteral)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::NilLiteral"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::StringInterpolation)-instance-method","name":"visit","doc":"A visit callback for `Crystal::StringInterpolation` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::StringInterpolation</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::StringInterpolation"}],"args_string":"(node : Crystal::StringInterpolation)","args_html":"(node : Crystal::StringInterpolation)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::StringInterpolation"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Unless)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Unless` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Unless</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"args_string":"(node : Crystal::Unless)","args_html":"(node : Crystal::Unless)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Var)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Var` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Var</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Var"}],"args_string":"(node : Crystal::Var)","args_html":"(node : Crystal::Var)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Var"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::When)-instance-method","name":"visit","doc":"A visit callback for `Crystal::When` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::When</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::When"}],"args_string":"(node : Crystal::When)","args_html":"(node : Crystal::When)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::When"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::While)-instance-method","name":"visit","doc":"A visit callback for `Crystal::While` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::While</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::While"}],"args_string":"(node : Crystal::While)","args_html":"(node : Crystal::While)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::While"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node:Crystal::Until)-instance-method","name":"visit","doc":"A visit callback for `Crystal::Until` node.\n\nReturns `true` if the child nodes should be traversed as well,\n`false` otherwise.","summary":"<p>A visit callback for <code>Crystal::Until</code> node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Until"}],"args_string":"(node : Crystal::Until)","args_html":"(node : Crystal::Until)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L47"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Until"}],"visibility":"Public","body":"if skip?(node)\n  return false\nend\n@rule.test(@source, node)\ntrue\n"}},{"html_id":"visit(node)-instance-method","name":"visit","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/visitors/node_visitor.cr","line_number":60,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/node_visitor.cr#L60"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"!(skip?(node))"}}]},{"html_id":"ameba/Ameba/AST/RedundantControlExpressionVisitor","path":"Ameba/AST/RedundantControlExpressionVisitor.html","kind":"class","full_name":"Ameba::AST::RedundantControlExpressionVisitor","name":"RedundantControlExpressionVisitor","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/visitors/redundant_control_expression_visitor.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/redundant_control_expression_visitor.cr#L5"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"A class that utilizes a logic to traverse AST nodes and\nfire a source test callback if a redundant `Crystal::ControlExpression`\nis reached.","summary":"<p>A class that utilizes a logic to traverse AST nodes and fire a source test callback if a redundant <code>Crystal::ControlExpression</code> is reached.</p>","constructors":[{"html_id":"new(rule:Ameba::Rule::Base,source:Ameba::Source,node:Crystal::ASTNode)-class-method","name":"new","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"::Ameba::Rule::Base"},{"name":"source","external_name":"source","restriction":"::Ameba::Source"},{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"}],"args_string":"(rule : Ameba::Rule::Base, source : Ameba::Source, node : Crystal::ASTNode)","args_html":"(rule : <a href=\"../../Ameba/Rule/Base.html\">Ameba::Rule::Base</a>, source : <a href=\"../../Ameba/Source.html\">Ameba::Source</a>, node : Crystal::ASTNode)","location":{"filename":"src/ameba/ast/visitors/redundant_control_expression_visitor.cr","line_number":15,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/redundant_control_expression_visitor.cr#L15"},"def":{"name":"new","args":[{"name":"rule","external_name":"rule","restriction":"::Ameba::Rule::Base"},{"name":"source","external_name":"source","restriction":"::Ameba::Source"},{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"}],"visibility":"Public","body":"_ = allocate\n_.initialize(rule, source, node)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"node:Crystal::ASTNode-instance-method","name":"node","doc":"A node to run traversal on.","summary":"<p>A node to run traversal on.</p>","abstract":false,"location":{"filename":"src/ameba/ast/visitors/redundant_control_expression_visitor.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/redundant_control_expression_visitor.cr#L13"},"def":{"name":"node","return_type":"Crystal::ASTNode","visibility":"Public","body":"@node"}},{"html_id":"rule:Rule::Base-instance-method","name":"rule","doc":"A corresponding rule that uses this visitor.","summary":"<p>A corresponding rule that uses this visitor.</p>","abstract":false,"location":{"filename":"src/ameba/ast/visitors/redundant_control_expression_visitor.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/redundant_control_expression_visitor.cr#L7"},"def":{"name":"rule","return_type":"Rule::Base","visibility":"Public","body":"@rule"}},{"html_id":"source:Source-instance-method","name":"source","doc":"A source that needs to be traversed.","summary":"<p>A source that needs to be traversed.</p>","abstract":false,"location":{"filename":"src/ameba/ast/visitors/redundant_control_expression_visitor.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/redundant_control_expression_visitor.cr#L10"},"def":{"name":"source","return_type":"Source","visibility":"Public","body":"@source"}}]},{"html_id":"ameba/Ameba/AST/Reference","path":"Ameba/AST/Reference.html","kind":"class","full_name":"Ameba::AST::Reference","name":"Reference","abstract":false,"superclass":{"html_id":"ameba/Ameba/AST/Variable","kind":"class","full_name":"Ameba::AST::Variable","name":"Variable"},"ancestors":[{"html_id":"ameba/Ameba/AST/Variable","kind":"class","full_name":"Ameba::AST::Variable","name":"Variable"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/variabling/reference.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/reference.cr#L7"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Represents a reference to the variable.\nIt behaves like a variable is used to distinguish a\nthe variable from its reference.","summary":"<p>Represents a reference to the variable.</p>","instance_methods":[{"html_id":"explicit=(explicit:Bool)-instance-method","name":"explicit=","abstract":false,"args":[{"name":"explicit","external_name":"explicit","restriction":"::Bool"}],"args_string":"(explicit : Bool)","args_html":"(explicit : Bool)","location":{"filename":"src/ameba/ast/variabling/reference.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/reference.cr#L8"},"def":{"name":"explicit=","args":[{"name":"explicit","external_name":"explicit","restriction":"::Bool"}],"visibility":"Public","body":"@explicit = explicit"}},{"html_id":"explicit?:Bool-instance-method","name":"explicit?","abstract":false,"location":{"filename":"src/ameba/ast/variabling/reference.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/reference.cr#L8"},"def":{"name":"explicit?","visibility":"Public","body":"@explicit"}}]},{"html_id":"ameba/Ameba/AST/Scope","path":"Ameba/AST/Scope.html","kind":"class","full_name":"Ameba::AST::Scope","name":"Scope","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/scope.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L6"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Represents a context of the local variable visibility.\nThis is where the local variables belong to.","summary":"<p>Represents a context of the local variable visibility.</p>","constructors":[{"html_id":"new(node:Crystal::ASTNode,outer_scope:Ameba::AST::Scope?=nil)-class-method","name":"new","doc":"Creates a new scope. Accepts the AST node and the outer scope.\n\n```\nscope = Scope.new(class_node, nil)\n```","summary":"<p>Creates a new scope.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"outer_scope","default_value":"nil","external_name":"outer_scope","restriction":"::Nil | ::Ameba::AST::Scope"}],"args_string":"(node : Crystal::ASTNode, outer_scope : Ameba::AST::Scope? = nil)","args_html":"(node : Crystal::ASTNode, outer_scope : <a href=\"../../Ameba/AST/Scope.html\">Ameba::AST::Scope</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/ast/scope.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L39"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::ASTNode"},{"name":"outer_scope","default_value":"nil","external_name":"outer_scope","restriction":"::Nil | ::Ameba::AST::Scope"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node, outer_scope)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif node == other.node\nelse\n  return false\nend\nif location == other.location\nelse\n  return false\nend\ntrue\n"}},{"html_id":"add_argument(node)-instance-method","name":"add_argument","doc":"Creates a new argument in the current scope.\n\n```\nscope = Scope.new(class_node, nil)\nscope.add_argument(arg_node)\n```","summary":"<p>Creates a new argument in the current scope.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/scope.cr","line_number":59,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L59"},"def":{"name":"add_argument","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"add_variable((Crystal::Var.new(node.name)).at(node))\narguments << (Argument.new(node, variables.last))\n"}},{"html_id":"add_ivariable(node)-instance-method","name":"add_ivariable","doc":"Adds a new instance variable to the current scope.\n\n```\nscope = Scope.new(class_node, nil)\nscope.add_ivariable(ivar_node)\n```","summary":"<p>Adds a new instance variable to the current scope.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/scope.cr","line_number":70,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L70"},"def":{"name":"add_ivariable","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"ivariables << (InstanceVariable.new(node))"}},{"html_id":"add_variable(node)-instance-method","name":"add_variable","doc":"Creates a new variable in the current scope.\n\n```\nscope = Scope.new(class_node, nil)\nscope.add_variable(var_node)\n```","summary":"<p>Creates a new variable in the current scope.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/scope.cr","line_number":49,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L49"},"def":{"name":"add_variable","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"variables << (Variable.new(node, self))"}},{"html_id":"arg?(var)-instance-method","name":"arg?","doc":"Returns true if var is an argument in current scope, `false` otherwise.","summary":"<p>Returns true if var is an argument in current scope, <code>false</code> otherwise.</p>","abstract":false,"args":[{"name":"var","external_name":"var","restriction":""}],"args_string":"(var)","args_html":"(var)","location":{"filename":"src/ameba/ast/scope.cr","line_number":157,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L157"},"def":{"name":"arg?","args":[{"name":"var","external_name":"var","restriction":""}],"visibility":"Public","body":"case current_node = node\nwhen Crystal::Def\n  var.is_a?(Crystal::Arg) && (any_arg?(current_node.args, var))\nwhen Crystal::Block\n  var.is_a?(Crystal::Var) && (any_arg?(current_node.args, var))\nwhen Crystal::ProcLiteral\n  var.is_a?(Crystal::Var) && (any_arg?(current_node.def.args, var))\nelse\n  false\nend"}},{"html_id":"arguments:Array(Ameba::AST::Argument)-instance-method","name":"arguments","doc":"Link to the arguments in current scope","summary":"<p>Link to the arguments in current scope</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":14,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L14"},"def":{"name":"arguments","visibility":"Public","body":"@arguments"}},{"html_id":"assign_variable(name,node)-instance-method","name":"assign_variable","doc":"Creates a new assignment for the variable.\n\n```\nscope = Scope.new(class_node, nil)\nscope.assign_variable(var_name, assign_node)\n```","summary":"<p>Creates a new assignment for the variable.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"node","external_name":"node","restriction":""}],"args_string":"(name, node)","args_html":"(name, node)","location":{"filename":"src/ameba/ast/scope.cr","line_number":90,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L90"},"def":{"name":"assign_variable","args":[{"name":"name","external_name":"name","restriction":""},{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"(find_variable(name)).try(&.assign(node, self))"}},{"html_id":"assigns_ivar?(name)-instance-method","name":"assigns_ivar?","doc":"Returns `true` if instance variable is assinged in this scope.","summary":"<p>Returns <code>true</code> if instance variable is assinged in this scope.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/ameba/ast/scope.cr","line_number":121,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L121"},"def":{"name":"assigns_ivar?","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"arguments.find do |__arg6|\n  __arg6.name == name\nend && ivariables.find do |__arg7|\n  __arg7.name == \"@#{name}\"\nend"}},{"html_id":"block?-instance-method","name":"block?","doc":"Returns `true` if current scope represents a block (or proc),\n`false` otherwise.","summary":"<p>Returns <code>true</code> if current scope represents a block (or proc), <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":96,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L96"},"def":{"name":"block?","visibility":"Public","body":"node.is_a?(Crystal::Block) || node.is_a?(Crystal::ProcLiteral)"}},{"html_id":"def?-instance-method","name":"def?","doc":"Returns `true` if current scope is a def, `false` otherwise.","summary":"<p>Returns <code>true</code> if current scope is a def, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":147,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L147"},"def":{"name":"def?","visibility":"Public","body":"node.is_a?(Crystal::Def)"}},{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/scope.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L30"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/scope.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L30"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"eql?(node)-instance-method","name":"eql?","doc":"Returns `true` if the *node* represents exactly\nthe same Crystal node as `@node`.","summary":"<p>Returns <code>true</code> if the <em>node</em> represents exactly the same Crystal node as <code>@node</code>.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/scope.cr","line_number":176,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L176"},"def":{"name":"eql?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"((node == @node) && node.location) && (node.location == @node.location)"}},{"html_id":"find_variable(name:String)-instance-method","name":"find_variable","doc":"Returns variable by its name or `nil` if it does not exist.\n\n```\nscope = Scope.new(class_node, nil)\nscope.find_variable(\"foo\")\n```","summary":"<p>Returns variable by its name or <code>nil</code> if it does not exist.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/ameba/ast/scope.cr","line_number":80,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L80"},"def":{"name":"find_variable","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"variables.find do |__arg1|\n  __arg1.name == name\nend || outer_scope.try(&.find_variable(name))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = node.hash(hasher)\nhasher = location.hash(hasher)\nhasher\n"}},{"html_id":"in_macro?-instance-method","name":"in_macro?","doc":"Returns `true` if current scope sits inside a macro.","summary":"<p>Returns <code>true</code> if current scope sits inside a macro.</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":115,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L115"},"def":{"name":"in_macro?","visibility":"Public","body":"(node.is_a?(Crystal::Macro) || node.is_a?(Crystal::MacroFor)) || (!(!outer_scope.try(&.in_macro?)))"}},{"html_id":"inner_scopes:Array(Ameba::AST::Scope)-instance-method","name":"inner_scopes","doc":"List of inner scopes","summary":"<p>List of inner scopes</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L23"},"def":{"name":"inner_scopes","visibility":"Public","body":"@inner_scopes"}},{"html_id":"ivariables:Array(Ameba::AST::InstanceVariable)-instance-method","name":"ivariables","doc":"Link to the instance variables used in current scope","summary":"<p>Link to the instance variables used in current scope</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L17"},"def":{"name":"ivariables","visibility":"Public","body":"@ivariables"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/scope.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L29"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/scope.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L29"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"node:Crystal::ASTNode-instance-method","name":"node","doc":"The actual AST node that represents a current scope.","summary":"<p>The actual AST node that represents a current scope.</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L26"},"def":{"name":"node","return_type":"Crystal::ASTNode","visibility":"Public","body":"@node"}},{"html_id":"outer_scope:Scope?-instance-method","name":"outer_scope","doc":"Link to the outer scope","summary":"<p>Link to the outer scope</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L20"},"def":{"name":"outer_scope","return_type":"Scope | ::Nil","visibility":"Public","body":"@outer_scope"}},{"html_id":"references:Array(Ameba::AST::Reference)-instance-method","name":"references","doc":"Link to all variable references in currency scope","summary":"<p>Link to all variable references in currency scope</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L11"},"def":{"name":"references","visibility":"Public","body":"@references"}},{"html_id":"references?(variable:Variable,check_inner_scopes=true)-instance-method","name":"references?","doc":"Returns true if current scope (or any of inner scopes) references variable,\n`false` otherwise.","summary":"<p>Returns true if current scope (or any of inner scopes) references variable, <code>false</code> otherwise.</p>","abstract":false,"args":[{"name":"variable","external_name":"variable","restriction":"Variable"},{"name":"check_inner_scopes","default_value":"true","external_name":"check_inner_scopes","restriction":""}],"args_string":"(variable : Variable, check_inner_scopes = true)","args_html":"(variable : <a href=\"../../Ameba/AST/Variable.html\">Variable</a>, check_inner_scopes = <span class=\"n\">true</span>)","location":{"filename":"src/ameba/ast/scope.cr","line_number":139,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L139"},"def":{"name":"references?","args":[{"name":"variable","external_name":"variable","restriction":"Variable"},{"name":"check_inner_scopes","default_value":"true","external_name":"check_inner_scopes","restriction":""}],"visibility":"Public","body":"variable.references.any? do |reference|\n  if reference.scope == self\n    return true\n  end\n  check_inner_scopes && inner_scopes.any?(&.references?(variable))\nend || variable.used_in_macro?"}},{"html_id":"spawn_block?-instance-method","name":"spawn_block?","doc":"Returns `true` if current scope represents a spawn block, e. g.\n\n```\nspawn do\n  # ...\nend\n```","summary":"<p>Returns <code>true</code> if current scope represents a spawn block, e.</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":107,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L107"},"def":{"name":"spawn_block?","visibility":"Public","body":"if node.is_a?(Crystal::Block)\nelse\n  return false\nend\ncall = (node.as(Crystal::Block)).call\ncall.try(&.name) == \"spawn\"\n"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/scope.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L28"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/scope.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L28"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"top_level?-instance-method","name":"top_level?","doc":"Returns `true` if this scope is a top level scope, `false` otherwise.","summary":"<p>Returns <code>true</code> if this scope is a top level scope, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":152,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L152"},"def":{"name":"top_level?","visibility":"Public","body":"outer_scope.nil?"}},{"html_id":"type_definition?-instance-method","name":"type_definition?","doc":"Returns `true` if and only if current scope represents some\ntype definition, for example a class.","summary":"<p>Returns <code>true</code> if and only if current scope represents some type definition, for example a class.</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":128,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L128"},"def":{"name":"type_definition?","visibility":"Public","body":"((((node.is_a?(Crystal::ClassDef) || node.is_a?(Crystal::ModuleDef)) || node.is_a?(Crystal::LibDef)) || node.is_a?(Crystal::FunDef)) || node.is_a?(Crystal::TypeDef)) || node.is_a?(Crystal::CStructOrUnionDef)"}},{"html_id":"variables:Array(Ameba::AST::Variable)-instance-method","name":"variables","doc":"Link to local variables","summary":"<p>Link to local variables</p>","abstract":false,"location":{"filename":"src/ameba/ast/scope.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/scope.cr#L8"},"def":{"name":"variables","visibility":"Public","body":"@variables"}}]},{"html_id":"ameba/Ameba/AST/ScopeVisitor","path":"Ameba/AST/ScopeVisitor.html","kind":"class","full_name":"Ameba::AST::ScopeVisitor","name":"ScopeVisitor","abstract":false,"superclass":{"html_id":"ameba/Ameba/AST/BaseVisitor","kind":"class","full_name":"Ameba::AST::BaseVisitor","name":"BaseVisitor"},"ancestors":[{"html_id":"ameba/Ameba/AST/BaseVisitor","kind":"class","full_name":"Ameba::AST::BaseVisitor","name":"BaseVisitor"},{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/visitors/scope_visitor.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/scope_visitor.cr#L5"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"NODES","name":"NODES","value":"[ClassDef, ModuleDef, EnumDef, LibDef, FunDef, TypeDef, TypeOf, CStructOrUnionDef, ProcLiteral, Block, Macro, MacroFor]","doc":"Non-exhaustive list of nodes to be visited by Ameba's rules.","summary":"<p>Non-exhaustive list of nodes to be visited by Ameba's rules.</p>"},{"id":"RECORD_NODE_NAME","name":"RECORD_NODE_NAME","value":"\"record\""},{"id":"SUPER_NODE_NAME","name":"SUPER_NODE_NAME","value":"\"super\""}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"AST Visitor that traverses the source and constructs scopes.","summary":"<p>AST Visitor that traverses the source and constructs scopes.</p>","constructors":[{"html_id":"new(rule,source,skip=nil)-class-method","name":"new","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"source","external_name":"source","restriction":""},{"name":"skip","default_value":"nil","external_name":"skip","restriction":""}],"args_string":"(rule, source, skip = nil)","args_html":"(rule, source, skip = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/ast/visitors/scope_visitor.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/scope_visitor.cr#L30"},"def":{"name":"new","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"source","external_name":"source","restriction":""},{"name":"skip","default_value":"nil","external_name":"skip","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(rule, source, skip)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"ameba/Ameba/AST/TopLevelNodesVisitor","path":"Ameba/AST/TopLevelNodesVisitor.html","kind":"class","full_name":"Ameba::AST::TopLevelNodesVisitor","name":"TopLevelNodesVisitor","abstract":false,"superclass":{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},"ancestors":[{"html_id":"ameba/Crystal/Visitor","kind":"class","full_name":"Crystal::Visitor","name":"Visitor"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/visitors/top_level_nodes_visitor.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/top_level_nodes_visitor.cr#L4"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"AST Visitor that visits certain nodes at a top level, which\ncan characterize the source (i.e. require statements, modules etc.)","summary":"<p>AST Visitor that visits certain nodes at a top level, which can characterize the source (i.e.</p>","constructors":[{"html_id":"new(scope:Crystal::ASTNode)-class-method","name":"new","doc":"Creates a new instance of visitor","summary":"<p>Creates a new instance of visitor</p>","abstract":false,"args":[{"name":"scope","external_name":"scope","restriction":"Crystal::ASTNode"}],"args_string":"(scope : Crystal::ASTNode)","args_html":"(scope : Crystal::ASTNode)","location":{"filename":"src/ameba/ast/visitors/top_level_nodes_visitor.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/top_level_nodes_visitor.cr#L8"},"def":{"name":"new","args":[{"name":"scope","external_name":"scope","restriction":"Crystal::ASTNode"}],"visibility":"Public","body":"_ = allocate\n_.initialize(scope)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"require_nodes:Array(Crystal::Require)-instance-method","name":"require_nodes","abstract":false,"location":{"filename":"src/ameba/ast/visitors/top_level_nodes_visitor.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/top_level_nodes_visitor.cr#L5"},"def":{"name":"require_nodes","visibility":"Public","body":"@require_nodes"}},{"html_id":"visit(node:Crystal::Expressions)-instance-method","name":"visit","doc":"If a top level node is Crystal::Expressions traverse the children.","summary":"<p>If a top level node is Crystal::Expressions traverse the children.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Expressions"}],"args_string":"(node : Crystal::Expressions)","args_html":"(node : Crystal::Expressions)","location":{"filename":"src/ameba/ast/visitors/top_level_nodes_visitor.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/top_level_nodes_visitor.cr#L18"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::Expressions"}],"visibility":"Public","body":"true"}},{"html_id":"visit(node:Crystal::ASTNode)-instance-method","name":"visit","doc":"A general visit method for rest of the nodes.\nReturns false meaning all child nodes will not be traversed.","summary":"<p>A general visit method for rest of the nodes.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"}],"args_string":"(node : Crystal::ASTNode)","args_html":"(node : Crystal::ASTNode)","location":{"filename":"src/ameba/ast/visitors/top_level_nodes_visitor.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/visitors/top_level_nodes_visitor.cr#L24"},"def":{"name":"visit","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"}],"visibility":"Public","body":"false"}}]},{"html_id":"ameba/Ameba/AST/Util","path":"Ameba/AST/Util.html","kind":"module","full_name":"Ameba::AST::Util","name":"Util","abstract":false,"locations":[{"filename":"src/ameba/ast/util.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"ameba/Ameba/AST/Branchable","kind":"class","full_name":"Ameba::AST::Branchable","name":"Branchable"},{"html_id":"ameba/Ameba/AST/FlowExpression","kind":"class","full_name":"Ameba::AST::FlowExpression","name":"FlowExpression"},{"html_id":"ameba/Ameba/AST/FlowExpressionVisitor","kind":"class","full_name":"Ameba::AST::FlowExpressionVisitor","name":"FlowExpressionVisitor"},{"html_id":"ameba/Ameba/Rule/Lint/AmbiguousAssignment","kind":"class","full_name":"Ameba::Rule::Lint::AmbiguousAssignment","name":"AmbiguousAssignment"},{"html_id":"ameba/Ameba/Rule/Lint/ComparisonToBoolean","kind":"class","full_name":"Ameba::Rule::Lint::ComparisonToBoolean","name":"ComparisonToBoolean"},{"html_id":"ameba/Ameba/Rule/Lint/EmptyExpression","kind":"class","full_name":"Ameba::Rule::Lint::EmptyExpression","name":"EmptyExpression"},{"html_id":"ameba/Ameba/Rule/Lint/EmptyLoop","kind":"class","full_name":"Ameba::Rule::Lint::EmptyLoop","name":"EmptyLoop"},{"html_id":"ameba/Ameba/Rule/Lint/LiteralInCondition","kind":"class","full_name":"Ameba::Rule::Lint::LiteralInCondition","name":"LiteralInCondition"},{"html_id":"ameba/Ameba/Rule/Lint/LiteralInInterpolation","kind":"class","full_name":"Ameba::Rule::Lint::LiteralInInterpolation","name":"LiteralInInterpolation"},{"html_id":"ameba/Ameba/Rule/Lint/LiteralsComparison","kind":"class","full_name":"Ameba::Rule::Lint::LiteralsComparison","name":"LiteralsComparison"},{"html_id":"ameba/Ameba/Rule/Lint/NotNil","kind":"class","full_name":"Ameba::Rule::Lint::NotNil","name":"NotNil"},{"html_id":"ameba/Ameba/Rule/Lint/NotNilAfterNoBang","kind":"class","full_name":"Ameba::Rule::Lint::NotNilAfterNoBang","name":"NotNilAfterNoBang"},{"html_id":"ameba/Ameba/Rule/Lint/RedundantStringCoercion","kind":"class","full_name":"Ameba::Rule::Lint::RedundantStringCoercion","name":"RedundantStringCoercion"},{"html_id":"ameba/Ameba/Rule/Lint/UnreachableCode","kind":"class","full_name":"Ameba::Rule::Lint::UnreachableCode","name":"UnreachableCode"},{"html_id":"ameba/Ameba/Rule/Metrics/CyclomaticComplexity","kind":"class","full_name":"Ameba::Rule::Metrics::CyclomaticComplexity","name":"CyclomaticComplexity"},{"html_id":"ameba/Ameba/Rule/Performance/AnyInsteadOfEmpty","kind":"class","full_name":"Ameba::Rule::Performance::AnyInsteadOfEmpty","name":"AnyInsteadOfEmpty"},{"html_id":"ameba/Ameba/Rule/Performance/ChainedCallWithNoBang","kind":"class","full_name":"Ameba::Rule::Performance::ChainedCallWithNoBang","name":"ChainedCallWithNoBang"},{"html_id":"ameba/Ameba/Rule/Style/GuardClause","kind":"class","full_name":"Ameba::Rule::Style::GuardClause","name":"GuardClause"},{"html_id":"ameba/Ameba/Rule/Style/MethodNames","kind":"class","full_name":"Ameba::Rule::Style::MethodNames","name":"MethodNames"},{"html_id":"ameba/Ameba/Rule/Style/RedundantBegin","kind":"class","full_name":"Ameba::Rule::Style::RedundantBegin","name":"RedundantBegin"},{"html_id":"ameba/Ameba/Rule/Style/RedundantNext","kind":"class","full_name":"Ameba::Rule::Style::RedundantNext","name":"RedundantNext"},{"html_id":"ameba/Ameba/Rule/Style/RedundantReturn","kind":"class","full_name":"Ameba::Rule::Style::RedundantReturn","name":"RedundantReturn"},{"html_id":"ameba/Ameba/Rule/Style/VerboseBlock","kind":"class","full_name":"Ameba::Rule::Style::VerboseBlock","name":"VerboseBlock"}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Utility module for Ameba's rules.","summary":"<p>Utility module for Ameba's rules.</p>","instance_methods":[{"html_id":"abort?(node)-instance-method","name":"abort?","doc":"Returns true if node represents `abort` method call.","summary":"<p>Returns true if node represents <code>abort</code> method call.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":144,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L144"},"def":{"name":"abort?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"((node.is_a?(Crystal::Call) && (node.name == \"abort\")) && node.args.size <= 2) && node.obj.nil?"}},{"html_id":"control_exp_code(node:Crystal::ControlExpression,code_lines)-instance-method","name":"control_exp_code","doc":"Returns the exp code of a control expression.\nWraps implicit tuple literal with curly brackets (e.g. multi-return).","summary":"<p>Returns the exp code of a control expression.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ControlExpression"},{"name":"code_lines","external_name":"code_lines","restriction":""}],"args_string":"(node : Crystal::ControlExpression, code_lines)","args_html":"(node : Crystal::ControlExpression, code_lines)","location":{"filename":"src/ameba/ast/util.cr","line_number":163,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L163"},"def":{"name":"control_exp_code","args":[{"name":"node","external_name":"node","restriction":"Crystal::ControlExpression"},{"name":"code_lines","external_name":"code_lines","restriction":""}],"visibility":"Public","body":"if exp = node.exp\nelse\n  return\nend\nif exp_code = node_source(exp, code_lines)\nelse\n  return\nend\nif exp.is_a?(Crystal::TupleLiteral) && (exp_code[0] != '{')\nelse\n  return exp_code\nend\nif exp_start = exp.elements.first.location\nelse\n  return\nend\nif exp_end = exp.end_location\nelse\n  return\nend\n\"{#{source_between(exp_start, exp_end, code_lines)}}\"\n"}},{"html_id":"exit?(node)-instance-method","name":"exit?","doc":"Returns true if node represents `exit` method call.","summary":"<p>Returns true if node represents <code>exit</code> method call.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":138,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L138"},"def":{"name":"exit?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"((node.is_a?(Crystal::Call) && (node.name == \"exit\")) && node.args.size <= 1) && node.obj.nil?"}},{"html_id":"flow_command?(node,in_loop)-instance-method","name":"flow_command?","doc":"Returns true if node is a flow command, false - otherwise.\nNode represents a flow command if it is a control expression,\nor special call node that interrupts execution (i.e. raise, exit, abort).","summary":"<p>Returns true if node is a flow command, false - otherwise.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"in_loop","external_name":"in_loop","restriction":""}],"args_string":"(node, in_loop)","args_html":"(node, in_loop)","location":{"filename":"src/ameba/ast/util.cr","line_number":66,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L66"},"def":{"name":"flow_command?","args":[{"name":"node","external_name":"node","restriction":""},{"name":"in_loop","external_name":"in_loop","restriction":""}],"visibility":"Public","body":"case node\nwhen Crystal::Return\n  true\nwhen Crystal::Break, Crystal::Next\n  in_loop\nwhen Crystal::Call\n  ((raise?(node)) || (exit?(node))) || (abort?(node))\nelse\n  false\nend"}},{"html_id":"flow_expression?(node,in_loop=false)-instance-method","name":"flow_expression?","doc":"Returns true if node is a flow expression, false if not.\nNode represents a flow expression if it is full-filled by a flow command.\n\nFor example, this node is a flow expression, because each branch contains\na flow command `return`:\n\n```\nif a > 0\n  return :positive\nelsif a < 0\n  return :negative\nelse\n  return :zero\nend\n```\n\nThis node is a not a flow expression:\n\n```\nif a > 0\n  return :positive\nend\n```\n\nThat's because not all branches return(i.e. `else` is missing).","summary":"<p>Returns true if node is a flow expression, false if not.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"in_loop","default_value":"false","external_name":"in_loop","restriction":""}],"args_string":"(node, in_loop = false)","args_html":"(node, in_loop = <span class=\"n\">false</span>)","location":{"filename":"src/ameba/ast/util.cr","line_number":104,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L104"},"def":{"name":"flow_expression?","args":[{"name":"node","external_name":"node","restriction":""},{"name":"in_loop","default_value":"false","external_name":"in_loop","restriction":""}],"visibility":"Public","body":"if flow_command?(node, in_loop)\n  return true\nend\ncase node\nwhen Crystal::If, Crystal::Unless\n  flow_expressions?([node.then, node.else], in_loop)\nwhen Crystal::BinaryOp\n  flow_expression?(node.left, in_loop)\nwhen Crystal::Case\n  flow_expressions?([node.whens, node.else].flatten, in_loop)\nwhen Crystal::ExceptionHandler\n  flow_expressions?([node.else || node.body, node.rescues].flatten, in_loop)\nwhen Crystal::While, Crystal::Until\n  flow_expression?(node.body, in_loop)\nwhen Crystal::Rescue, Crystal::When\n  flow_expression?(node.body, in_loop)\nwhen Crystal::Expressions\n  node.expressions.any? do |exp|\n    flow_expression?(exp, in_loop)\n  end\nelse\n  false\nend\n"}},{"html_id":"literal?(node)-instance-method","name":"literal?","doc":"Returns true if current `node` is a literal, false otherwise.","summary":"<p>Returns true if current <code>node</code> is a literal, false otherwise.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L4"},"def":{"name":"literal?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"case node\nwhen Crystal::NilLiteral, Crystal::BoolLiteral, Crystal::NumberLiteral, Crystal::CharLiteral, Crystal::StringLiteral, Crystal::SymbolLiteral, Crystal::RegexLiteral, Crystal::ProcLiteral, Crystal::MacroLiteral\n  true\nwhen Crystal::RangeLiteral\n  (literal?(node.from)) && (literal?(node.to))\nwhen Crystal::ArrayLiteral, Crystal::TupleLiteral\n  node.elements.all? do |el|\n    literal?(el)\n  end\nwhen Crystal::HashLiteral\n  node.entries.all? do |entry|\n    (literal?(entry.key)) && (literal?(entry.value))\n  end\nwhen Crystal::NamedTupleLiteral\n  node.entries.all? do |entry|\n    literal?(entry.value)\n  end\nelse\n  false\nend"}},{"html_id":"loop?(node)-instance-method","name":"loop?","doc":"Returns true if node represents a loop.","summary":"<p>Returns true if node represents a loop.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":150,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L150"},"def":{"name":"loop?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"case node\nwhen Crystal::While, Crystal::Until\n  true\nwhen Crystal::Call\n  ((node.name == \"loop\") && (node.args.size == 0)) && node.obj.nil?\nelse\n  false\nend"}},{"html_id":"name_end_location(node)-instance-method","name":"name_end_location","doc":"Returns `nil` if *node* does not contain a name.\n\nNOTE: Use this instead of `Crystal::Call#name_end_location` to avoid an\n      off-by-one error.","summary":"<p>Returns <code>nil</code> if <em>node</em> does not contain a name.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":206,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L206"},"def":{"name":"name_end_location","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"if loc = name_location(node)\nelse\n  return\nend\nif (size = name_size(node)).zero?\n  return\nend\nloc.adjust(column_number: size - 1)\n"}},{"html_id":"name_location(node)-instance-method","name":"name_location","doc":"Returns `nil` if *node* does not contain a name.","summary":"<p>Returns <code>nil</code> if <em>node</em> does not contain a name.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":174,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L174"},"def":{"name":"name_location","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"if loc = node.name_location\n  return loc\nend\nif node.is_a?(Crystal::TypeDeclaration) || node.is_a?(Crystal::UninitializedVar)\n  return node.var.location\nend\nif (node.responds_to?(:name)) && (name = node.name)\nelse\n  return\nend\nif name.is_a?(Crystal::ASTNode)\nelse\n  return\nend\nname.location\n"}},{"html_id":"name_size(node)-instance-method","name":"name_size","doc":"Returns zero if *node* does not contain a name.","summary":"<p>Returns zero if <em>node</em> does not contain a name.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":188,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L188"},"def":{"name":"name_size","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"if (size = node.name_size).zero?\nelse\n  return size\nend\nif (node.responds_to?(:name)) && (name = node.name)\nelse\n  return 0\nend\ncase name\nwhen Crystal::ASTNode\n  name.name_size\nwhen Crystal::Token::Kind\n  name.to_s.size\nelse\n  name.size\nend\n"}},{"html_id":"node_source(node,code_lines)-instance-method","name":"node_source","doc":"Returns a source code for the current node.\nThis method uses `node.location` and `node.end_location`\nto determine and cut a piece of source of the node.","summary":"<p>Returns a source code for the current node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"code_lines","external_name":"code_lines","restriction":""}],"args_string":"(node, code_lines)","args_html":"(node, code_lines)","location":{"filename":"src/ameba/ast/util.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L33"},"def":{"name":"node_source","args":[{"name":"node","external_name":"node","restriction":""},{"name":"code_lines","external_name":"code_lines","restriction":""}],"visibility":"Public","body":"loc, end_loc = node.location, node.end_location\nif loc && end_loc\nelse\n  return\nend\nsource_between(loc, end_loc, code_lines)\n"}},{"html_id":"raise?(node)-instance-method","name":"raise?","doc":"Returns true if node represents `raise` method call.","summary":"<p>Returns true if node represents <code>raise</code> method call.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/util.cr","line_number":132,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L132"},"def":{"name":"raise?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"((node.is_a?(Crystal::Call) && (node.name == \"raise\")) && (node.args.size == 1)) && node.obj.nil?"}},{"html_id":"source_between(loc,end_loc,code_lines):String?-instance-method","name":"source_between","doc":"Returns the source code from *loc* to *end_loc* (inclusive).","summary":"<p>Returns the source code from <em>loc</em> to <em>end_loc</em> (inclusive).</p>","abstract":false,"args":[{"name":"loc","external_name":"loc","restriction":""},{"name":"end_loc","external_name":"end_loc","restriction":""},{"name":"code_lines","external_name":"code_lines","restriction":""}],"args_string":"(loc, end_loc, code_lines) : String?","args_html":"(loc, end_loc, code_lines) : String?","location":{"filename":"src/ameba/ast/util.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/util.cr#L41"},"def":{"name":"source_between","args":[{"name":"loc","external_name":"loc","restriction":""},{"name":"end_loc","external_name":"end_loc","restriction":""},{"name":"code_lines","external_name":"code_lines","restriction":""}],"return_type":"String | ::Nil","visibility":"Public","body":"line, column = loc.line_number - 1, loc.column_number - 1\nend_line, end_column = end_loc.line_number - 1, end_loc.column_number - 1\nnode_lines = code_lines[line..end_line]\nfirst_line, last_line = node_lines[0]?, node_lines[-1]?\nif first_line.nil? || last_line.nil?\n  return\nend\nif first_line.size < column\n  return\nend\nnode_lines[0] = first_line.sub(0...column, \"\")\nif line == end_line\n  end_column = end_column - column\n  last_line = node_lines[0]\nend\nif last_line.size < (end_column + 1)\n  return\nend\nnode_lines[-1] = last_line.sub((end_column + 1)...last_line.size, \"\")\nnode_lines.join('\\n')\n"}}]},{"html_id":"ameba/Ameba/AST/Variable","path":"Ameba/AST/Variable.html","kind":"class","full_name":"Ameba::AST::Variable","name":"Variable","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/ast/variabling/variable.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L4"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"ameba/Ameba/AST/Reference","kind":"class","full_name":"Ameba::AST::Reference","name":"Reference"}],"namespace":{"html_id":"ameba/Ameba/AST","kind":"module","full_name":"Ameba::AST","name":"AST"},"doc":"Represents the existence of the local variable.\nHolds the var node and variable assignments.","summary":"<p>Represents the existence of the local variable.</p>","constructors":[{"html_id":"new(node:Crystal::Var,scope:Ameba::AST::Scope)-class-method","name":"new","doc":"Creates a new variable(in the scope).\n\n```\nVariable.new(node, scope)\n```","summary":"<p>Creates a new variable(in the scope).</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"::Crystal::Var"},{"name":"scope","external_name":"scope","restriction":"::Ameba::AST::Scope"}],"args_string":"(node : Crystal::Var, scope : Ameba::AST::Scope)","args_html":"(node : Crystal::Var, scope : <a href=\"../../Ameba/AST/Scope.html\">Ameba::AST::Scope</a>)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L30"},"def":{"name":"new","args":[{"name":"node","external_name":"node","restriction":"::Crystal::Var"},{"name":"scope","external_name":"scope","restriction":"::Ameba::AST::Scope"}],"visibility":"Public","body":"_ = allocate\n_.initialize(node, scope)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign(node,scope)-instance-method","name":"assign","doc":"Assigns the variable (creates a new assignment).\nVariable may have multiple assignments.\n\n```\nvariable = Variable.new(node, scope)\nvariable.assign(node1)\nvariable.assign(node2)\nvariable.assignment.size # => 2\n```","summary":"<p>Assigns the variable (creates a new assignment).</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":""}],"args_string":"(node, scope)","args_html":"(node, scope)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L47"},"def":{"name":"assign","args":[{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":""}],"visibility":"Public","body":"assignments << (Assignment.new(node, self, scope))\nupdate_assign_reference!\n"}},{"html_id":"assign_before_reference:Crystal::ASTNode?-instance-method","name":"assign_before_reference","doc":"Node of the first assignment which can be available before any reference.","summary":"<p>Node of the first assignment which can be available before any reference.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L18"},"def":{"name":"assign_before_reference","return_type":"Crystal::ASTNode | ::Nil","visibility":"Public","body":"@assign_before_reference"}},{"html_id":"assignments:Array(Ameba::AST::Assignment)-instance-method","name":"assignments","doc":"List of the assignments of this variable.","summary":"<p>List of the assignments of this variable.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L6"},"def":{"name":"assignments","visibility":"Public","body":"@assignments"}},{"html_id":"captured_by_block?(scope=@scope)-instance-method","name":"captured_by_block?","doc":"Returns `true` if the current var is referenced in\nin the block. For example this variable is captured\nby block:\n\n```\na = 1\n3.times { |i| a = a + i }\n```\n\nAnd this variable is not captured by block.\n\n```\ni = 1\n3.times { |i| i + 1 }\n```","summary":"<p>Returns <code>true</code> if the current var is referenced in in the block.</p>","abstract":false,"args":[{"name":"scope","default_value":"@scope","external_name":"scope","restriction":""}],"args_string":"(scope = @scope)","args_html":"(scope = @scope)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":111,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L111"},"def":{"name":"captured_by_block?","args":[{"name":"scope","default_value":"@scope","external_name":"scope","restriction":""}],"visibility":"Public","body":"scope.inner_scopes.each do |inner_scope|\n  if inner_scope.block? && (inner_scope.references?(self, check_inner_scopes: false))\n    return true\n  end\n  if captured_by_block?(inner_scope)\n    return true\n  end\nend\nfalse\n"}},{"html_id":"declared_before?(node)-instance-method","name":"declared_before?","doc":"Returns `true` if the variable is declared before the `node`.","summary":"<p>Returns <code>true</code> if the variable is declared before the <code><a href=\"../../Ameba/AST/Variable.html#node%3ACrystal%3A%3AVar-instance-method\">#node</a></code>.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":161,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L161"},"def":{"name":"declared_before?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"var_location, node_location = location, node.location\nif var_location.nil? || node_location.nil?\n  return\nend\n(var_location.line_number < node_location.line_number) || ((var_location.line_number == node_location.line_number) && var_location.column_number < node_location.column_number)\n"}},{"html_id":"end_location(*args,**options)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L21"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.end_location(*args, **options)"}},{"html_id":"end_location(*args,**options,&)-instance-method","name":"end_location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L21"},"def":{"name":"end_location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.end_location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"eql?(node)-instance-method","name":"eql?","doc":"Returns `true` if the `node` represents exactly\nthe same Crystal node as `@node`.","summary":"<p>Returns <code>true</code> if the <code><a href=\"../../Ameba/AST/Variable.html#node%3ACrystal%3A%3AVar-instance-method\">#node</a></code> represents exactly the same Crystal node as <code>@node</code>.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":154,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L154"},"def":{"name":"eql?","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"(node.is_a?(Crystal::Var) && (node.name == @node.name)) && (node.location == @node.location)"}},{"html_id":"ignored?-instance-method","name":"ignored?","doc":"Returns `true` if the name starts with '_', `false` if not.","summary":"<p>Returns <code>true</code> if the name starts with '_', <code>false</code> if not.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":148,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L148"},"def":{"name":"ignored?","visibility":"Public","body":"name.starts_with?('_')"}},{"html_id":"location(*args,**options)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L20"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.location(*args, **options)"}},{"html_id":"location(*args,**options,&)-instance-method","name":"location","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L20"},"def":{"name":"location","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.location(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"name(*args,**options)-instance-method","name":"name","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L22"},"def":{"name":"name","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.name(*args, **options)"}},{"html_id":"name(*args,**options,&)-instance-method","name":"name","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L22"},"def":{"name":"name","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.name(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"node:Crystal::Var-instance-method","name":"node","doc":"The actual var node.","summary":"<p>The actual var node.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":12,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L12"},"def":{"name":"node","return_type":"Crystal::Var","visibility":"Public","body":"@node"}},{"html_id":"reference(node:Crystal::Var,scope:Scope)-instance-method","name":"reference","doc":"Creates a reference to this variable in some scope.\n\n```\nvariable = Variable.new(node, scope)\nvariable.reference(var_node, some_scope)\n```","summary":"<p>Creates a reference to this variable in some scope.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::Var"},{"name":"scope","external_name":"scope","restriction":"Scope"}],"args_string":"(node : Crystal::Var, scope : Scope)","args_html":"(node : Crystal::Var, scope : <a href=\"../../Ameba/AST/Scope.html\">Scope</a>)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":70,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L70"},"def":{"name":"reference","args":[{"name":"node","external_name":"node","restriction":"Crystal::Var"},{"name":"scope","external_name":"scope","restriction":"Scope"}],"visibility":"Public","body":"(Reference.new(node, scope)).tap do |reference|\n  references << reference\n  scope.references << reference\nend"}},{"html_id":"reference_assignments!-instance-method","name":"reference_assignments!","doc":"Reference variable's assignments.\n\n```\nvariable = Variable.new(node, scope)\nvariable.assign(assign_node)\nvariable.reference_assignments!\n```","summary":"<p>Reference variable's assignments.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":84,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L84"},"def":{"name":"reference_assignments!","visibility":"Public","body":"consumed_branches = Set(Branch).new\nassignments.reverse_each do |assignment|\n  if assignment.branch.in?(consumed_branches)\n    next\n  end\n  assignment.referenced = true\n  if branch = assignment.branch\n  else\n    break\n  end\n  consumed_branches << branch\nend\n"}},{"html_id":"referenced?-instance-method","name":"referenced?","doc":"Returns `true` if variable has any reference.\n\n```\nvariable = Variable.new(node, scope)\nvariable.reference(var_node)\nvariable.referenced? # => true\n```","summary":"<p>Returns <code>true</code> if variable has any reference.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":60,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L60"},"def":{"name":"referenced?","visibility":"Public","body":"!references.empty?"}},{"html_id":"references:Array(Ameba::AST::Reference)-instance-method","name":"references","doc":"List of the references of this variable.","summary":"<p>List of the references of this variable.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":9,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L9"},"def":{"name":"references","visibility":"Public","body":"@references"}},{"html_id":"scope:Scope-instance-method","name":"scope","doc":"Scope of this variable.","summary":"<p>Scope of this variable.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":15,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L15"},"def":{"name":"scope","return_type":"Scope","visibility":"Public","body":"@scope"}},{"html_id":"special?-instance-method","name":"special?","doc":"Returns `true` if it is a special variable, i.e `$?`.","summary":"<p>Returns <code>true</code> if it is a special variable, i.e <code>$?</code>.</p>","abstract":false,"location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":34,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L34"},"def":{"name":"special?","visibility":"Public","body":"@node.special_var?"}},{"html_id":"target_of?(assign)-instance-method","name":"target_of?","doc":"Returns `true` if the variable is a target (on the left) of the assignment,\n`false` otherwise.","summary":"<p>Returns <code>true</code> if the variable is a target (on the left) of the assignment, <code>false</code> otherwise.</p>","abstract":false,"args":[{"name":"assign","external_name":"assign","restriction":""}],"args_string":"(assign)","args_html":"(assign)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":136,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L136"},"def":{"name":"target_of?","args":[{"name":"assign","external_name":"assign","restriction":""}],"visibility":"Public","body":"case assign\nwhen Crystal::Assign\n  eql?(assign.target)\nwhen Crystal::OpAssign\n  eql?(assign.target)\nwhen Crystal::MultiAssign\n  assign.targets.any? do |t|\n    eql?(t)\n  end\nwhen Crystal::UninitializedVar\n  eql?(assign.var)\nelse\n  false\nend"}},{"html_id":"to_s(*args,**options)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L23"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@node.to_s(*args, **options)"}},{"html_id":"to_s(*args,**options,&)-instance-method","name":"to_s","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L23"},"def":{"name":"to_s","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"@node.to_s(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"used_in_macro?(scope=@scope)-instance-method","name":"used_in_macro?","doc":"Returns `true` if current variable potentially referenced in a macro,\n`false` if not.","summary":"<p>Returns <code>true</code> if current variable potentially referenced in a macro, <code>false</code> if not.</p>","abstract":false,"args":[{"name":"scope","default_value":"@scope","external_name":"scope","restriction":""}],"args_string":"(scope = @scope)","args_html":"(scope = @scope)","location":{"filename":"src/ameba/ast/variabling/variable.cr","line_number":123,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ast/variabling/variable.cr#L123"},"def":{"name":"used_in_macro?","args":[{"name":"scope","default_value":"@scope","external_name":"scope","restriction":""}],"visibility":"Public","body":"scope.inner_scopes.each do |inner_scope|\n  if (MacroReferenceFinder.new(inner_scope.node, node.name)).references\n    return true\n  end\nend\nif (MacroReferenceFinder.new(scope.node, node.name)).references\n  return true\nend\nif (outer_scope = scope.outer_scope) && (used_in_macro?(outer_scope))\n  return true\nend\nfalse\n"}}]}]},{"html_id":"ameba/Ameba/Config","path":"Ameba/Config.html","kind":"class","full_name":"Ameba::Config","name":"Config","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Ameba/GlobUtils","kind":"module","full_name":"Ameba::GlobUtils","name":"GlobUtils"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/config.cr","line_number":15,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L15"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"AVAILABLE_FORMATTERS","name":"AVAILABLE_FORMATTERS","value":"{progress: Formatter::DotFormatter, todo: Formatter::TODOFormatter, flycheck: Formatter::FlycheckFormatter, silent: Formatter::BaseFormatter, disabled: Formatter::DisabledFormatter, json: Formatter::JSONFormatter}"},{"id":"DEFAULT_GLOBS","name":"DEFAULT_GLOBS","value":"[\"**/*.cr\", \"!lib\"] of ::String"},{"id":"PATH","name":"PATH","value":"\".ameba.yml\""}],"included_modules":[{"html_id":"ameba/Ameba/GlobUtils","kind":"module","full_name":"Ameba::GlobUtils","name":"GlobUtils"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"A configuration entry for `Ameba::Runner`.\n\nConfig can be loaded from configuration YAML file and adjusted.\n\n```\nconfig = Config.load\nconfig.formatter = my_formatter\n```\n\nBy default config loads `.ameba.yml` file in a current directory.\n","summary":"<p>A configuration entry for <code><a href=\"../Ameba/Runner.html\">Ameba::Runner</a></code>.</p>","class_methods":[{"html_id":"formatter_names-class-method","name":"formatter_names","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":88,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L88"},"def":{"name":"formatter_names","visibility":"Public","body":"AVAILABLE_FORMATTERS.keys.join('|')"}},{"html_id":"load(path=PATH,colors=true)-class-method","name":"load","doc":"Loads YAML configuration file by `path`.\n\n```\nconfig = Ameba::Config.load\n```","summary":"<p>Loads YAML configuration file by <code>path</code>.</p>","abstract":false,"args":[{"name":"path","default_value":"PATH","external_name":"path","restriction":""},{"name":"colors","default_value":"true","external_name":"colors","restriction":""}],"args_string":"(path = PATH, colors = true)","args_html":"(path = <span class=\"t\">PATH</span>, colors = <span class=\"n\">true</span>)","location":{"filename":"src/ameba/config.cr","line_number":80,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L80"},"def":{"name":"load","args":[{"name":"path","default_value":"PATH","external_name":"path","restriction":""},{"name":"colors","default_value":"true","external_name":"colors","restriction":""}],"visibility":"Public","body":"begin\n  Colorize.enabled = colors\n  content = File.exists?(path) ? File.read(path) : \"{}\"\n  Config.new(YAML.parse(content))\nrescue e\n  raise(\"Config file is invalid: #{e.message}\")\nend"}}],"instance_methods":[{"html_id":"autocorrect=(autocorrect:Bool)-instance-method","name":"autocorrect=","doc":"Returns true if correctable issues should be autocorrected.","summary":"<p>Returns true if correctable issues should be autocorrected.</p>","abstract":false,"args":[{"name":"autocorrect","external_name":"autocorrect","restriction":"::Bool"}],"args_string":"(autocorrect : Bool)","args_html":"(autocorrect : Bool)","location":{"filename":"src/ameba/config.cr","line_number":58,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L58"},"def":{"name":"autocorrect=","args":[{"name":"autocorrect","external_name":"autocorrect","restriction":"::Bool"}],"visibility":"Public","body":"@autocorrect = autocorrect"}},{"html_id":"autocorrect?:Bool-instance-method","name":"autocorrect?","doc":"Returns true if correctable issues should be autocorrected.","summary":"<p>Returns true if correctable issues should be autocorrected.</p>","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":58,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L58"},"def":{"name":"autocorrect?","visibility":"Public","body":"@autocorrect"}},{"html_id":"excluded:Array(String)-instance-method","name":"excluded","doc":"Represents a list of paths to exclude from globs.\nCan have wildcards.\n\n```\nconfig = Ameba::Config.load\nconfig.excluded = [\"spec\", \"src/server/*.cr\"]\n```","summary":"<p>Represents a list of paths to exclude from globs.</p>","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":55,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L55"},"def":{"name":"excluded","return_type":"Array(String)","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String))-instance-method","name":"excluded=","doc":"Represents a list of paths to exclude from globs.\nCan have wildcards.\n\n```\nconfig = Ameba::Config.load\nconfig.excluded = [\"spec\", \"src/server/*.cr\"]\n```","summary":"<p>Represents a list of paths to exclude from globs.</p>","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String)"}],"args_string":"(excluded : Array(String))","args_html":"(excluded : Array(String))","location":{"filename":"src/ameba/config.cr","line_number":55,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L55"},"def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String)"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"formatter:Formatter::BaseFormatter-instance-method","name":"formatter","doc":"Returns a formatter to be used while inspecting files.\nIf formatter is not set, it will return default formatter.\n\n```\nconfig = Ameba::Config.load\nconfig.formatter = custom_formatter\nconfig.formatter\n```\n","summary":"<p>Returns a formatter to be used while inspecting files.</p>","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":115,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L115"},"def":{"name":"formatter","return_type":"Formatter::BaseFormatter","visibility":"Public","body":"if (value = @formatter).nil?\n  @formatter = (Formatter::DotFormatter.new)\nelse\n  value\nend"}},{"html_id":"formatter=(name:String|Symbol)-instance-method","name":"formatter=","doc":"Sets formatter by name.\n\n```\nconfig = Ameba::Config.load\nconfig.formatter = :progress\n```","summary":"<p>Sets formatter by name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | Symbol"}],"args_string":"(name : String | Symbol)","args_html":"(name : String | Symbol)","location":{"filename":"src/ameba/config.cr","line_number":125,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L125"},"def":{"name":"formatter=","args":[{"name":"name","external_name":"name","restriction":"String | Symbol"}],"visibility":"Public","body":"if formatter = AVAILABLE_FORMATTERS[name]?\nelse\n  raise(\"Unknown formatter `#{name}`. Use one of #{Config.formatter_names}.\")\nend\n@formatter = formatter.new\n"}},{"html_id":"formatter=(formatter:Formatter::BaseFormatter)-instance-method","name":"formatter=","doc":"Returns a formatter to be used while inspecting files.\nIf formatter is not set, it will return default formatter.\n\n```\nconfig = Ameba::Config.load\nconfig.formatter = custom_formatter\nconfig.formatter\n```\n","summary":"<p>Returns a formatter to be used while inspecting files.</p>","abstract":false,"args":[{"name":"formatter","external_name":"formatter","restriction":"Formatter::BaseFormatter"}],"args_string":"(formatter : Formatter::BaseFormatter)","args_html":"(formatter : <a href=\"../Ameba/Formatter/BaseFormatter.html\">Formatter::BaseFormatter</a>)","location":{"filename":"src/ameba/config.cr","line_number":115,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L115"},"def":{"name":"formatter=","args":[{"name":"formatter","external_name":"formatter","restriction":"Formatter::BaseFormatter"}],"visibility":"Public","body":"@formatter = formatter"}},{"html_id":"globs:Array(String)-instance-method","name":"globs","doc":"Returns a list of paths (with wildcards) to files.\nRepresents a list of sources to be inspected.\nIf globs are not set, it will return default list of files.\n\n```\nconfig = Ameba::Config.load\nconfig.globs = [\"**/*.cr\"]\nconfig.globs\n```","summary":"<p>Returns a list of paths (with wildcards) to files.</p>","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":46,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L46"},"def":{"name":"globs","return_type":"Array(String)","visibility":"Public","body":"@globs"}},{"html_id":"globs=(globs:Array(String))-instance-method","name":"globs=","doc":"Returns a list of paths (with wildcards) to files.\nRepresents a list of sources to be inspected.\nIf globs are not set, it will return default list of files.\n\n```\nconfig = Ameba::Config.load\nconfig.globs = [\"**/*.cr\"]\nconfig.globs\n```","summary":"<p>Returns a list of paths (with wildcards) to files.</p>","abstract":false,"args":[{"name":"globs","external_name":"globs","restriction":"Array(String)"}],"args_string":"(globs : Array(String))","args_html":"(globs : Array(String))","location":{"filename":"src/ameba/config.cr","line_number":46,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L46"},"def":{"name":"globs=","args":[{"name":"globs","external_name":"globs","restriction":"Array(String)"}],"visibility":"Public","body":"@globs = globs"}},{"html_id":"rules:Array(Rule::Base)-instance-method","name":"rules","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":34,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L34"},"def":{"name":"rules","return_type":"Array(Rule::Base)","visibility":"Public","body":"@rules"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L35"},"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../Ameba/Severity.html\">Ameba::Severity</a>)","location":{"filename":"src/ameba/config.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L35"},"def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"sources-instance-method","name":"sources","doc":"Returns a list of sources matching globs and excluded sections.\n\n```\nconfig = Ameba::Config.load\nconfig.sources # => list of default sources\nconfig.globs = [\"**/*.cr\"]\nconfig.excluded = [\"spec\"]\nconfig.sources # => list of sources pointing to files found by the wildcards\n```","summary":"<p>Returns a list of sources matching globs and excluded sections.</p>","abstract":false,"location":{"filename":"src/ameba/config.cr","line_number":101,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L101"},"def":{"name":"sources","visibility":"Public","body":"((find_files_by_globs(globs)) - (find_files_by_globs(excluded))).map do |path|\n  Source.new(File.read(path), path)\nend"}},{"html_id":"update_rule(name,enabled=true,excluded=nil)-instance-method","name":"update_rule","doc":"Updates rule properties.\n\n```\nconfig = Ameba::Config.load\nconfig.update_rule \"MyRuleName\", enabled: false\n```","summary":"<p>Updates rule properties.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"enabled","default_value":"true","external_name":"enabled","restriction":""},{"name":"excluded","default_value":"nil","external_name":"excluded","restriction":""}],"args_string":"(name, enabled = true, excluded = nil)","args_html":"(name, enabled = <span class=\"n\">true</span>, excluded = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/config.cr","line_number":138,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L138"},"def":{"name":"update_rule","args":[{"name":"name","external_name":"name","restriction":""},{"name":"enabled","default_value":"true","external_name":"enabled","restriction":""},{"name":"excluded","default_value":"nil","external_name":"excluded","restriction":""}],"visibility":"Public","body":"rule = @rules.find do |__arg2|\n  __arg2.name == name\nend\nif rule\nelse\n  raise(ArgumentError.new(\"Rule `#{name}` does not exist\"))\nend\nrule.tap(&.enabled = enabled).tap(&.excluded = excluded)\n"}},{"html_id":"update_rules(names,enabled=true,excluded=nil)-instance-method","name":"update_rules","doc":"Updates rules properties.\n\n```\nconfig = Ameba::Config.load\nconfig.update_rules %w(Rule1 Rule2), enabled: true\n```\n\nalso it allows to update groups of rules:\n\n```\nconfig.update_rules %w(Group1 Group2), enabled: true\n```","summary":"<p>Updates rules properties.</p>","abstract":false,"args":[{"name":"names","external_name":"names","restriction":""},{"name":"enabled","default_value":"true","external_name":"enabled","restriction":""},{"name":"excluded","default_value":"nil","external_name":"excluded","restriction":""}],"args_string":"(names, enabled = true, excluded = nil)","args_html":"(names, enabled = <span class=\"n\">true</span>, excluded = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/config.cr","line_number":159,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/config.cr#L159"},"def":{"name":"update_rules","args":[{"name":"names","external_name":"names","restriction":""},{"name":"enabled","default_value":"true","external_name":"enabled","restriction":""},{"name":"excluded","default_value":"nil","external_name":"excluded","restriction":""}],"visibility":"Public","body":"names.try(&.each do |name|\n  if rules = @rule_groups[name]?\n    rules.each do |rule|\n      rule.enabled = enabled\n      rule.excluded = excluded\n    end\n  else\n    update_rule(name, enabled, excluded)\n  end\nend)"}}]},{"html_id":"ameba/Ameba/Ext","path":"Ameba/Ext.html","kind":"module","full_name":"Ameba::Ext","name":"Ext","abstract":false,"locations":[{"filename":"src/ameba/ext/location.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ext/location.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"types":[{"html_id":"ameba/Ameba/Ext/Location","path":"Ameba/Ext/Location.html","kind":"module","full_name":"Ameba::Ext::Location","name":"Location","abstract":false,"locations":[{"filename":"src/ameba/ext/location.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ext/location.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"ameba/Crystal/Location","kind":"class","full_name":"Crystal::Location","name":"Location"}],"namespace":{"html_id":"ameba/Ameba/Ext","kind":"module","full_name":"Ameba::Ext","name":"Ext"},"doc":"Extensions to Crystal::Location","summary":"<p>Extensions to Crystal::Location</p>","instance_methods":[{"html_id":"adjust(line_number=0,column_number=0):self-instance-method","name":"adjust","doc":"Returns the same location as this location but with the line and/or column number(s) adjusted\nby the given amount(s).","summary":"<p>Returns the same location as this location but with the line and/or column number(s) adjusted by the given amount(s).</p>","abstract":false,"args":[{"name":"line_number","default_value":"0","external_name":"line_number","restriction":""},{"name":"column_number","default_value":"0","external_name":"column_number","restriction":""}],"args_string":"(line_number = 0, column_number = 0) : self","args_html":"(line_number = <span class=\"n\">0</span>, column_number = <span class=\"n\">0</span>) : <span class=\"k\">self</span>","location":{"filename":"src/ameba/ext/location.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ext/location.cr#L11"},"def":{"name":"adjust","args":[{"name":"line_number","default_value":"0","external_name":"line_number","restriction":""},{"name":"column_number","default_value":"0","external_name":"column_number","restriction":""}],"return_type":"self","visibility":"Public","body":"self.class.new(@filename, @line_number + line_number, @column_number + column_number)"}},{"html_id":"seek(offset:self):self-instance-method","name":"seek","doc":"Seeks to a given *offset* relative to `self`.","summary":"<p>Seeks to a given <em>offset</em> relative to <code>self</code>.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"self"}],"args_string":"(offset : self) : self","args_html":"(offset : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/ameba/ext/location.cr","line_number":16,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ext/location.cr#L16"},"def":{"name":"seek","args":[{"name":"offset","external_name":"offset","restriction":"self"}],"return_type":"self","visibility":"Public","body":"if (offset.filename.as?(String)).presence && (@filename != offset.filename)\n  raise(ArgumentError.new(\"Mismatching filenames:\\n  #{@filename}\\n  #{offset.filename}\"))\nend\nif offset.line_number == 1\n  self.class.new(@filename, @line_number, (@column_number + offset.column_number) - 1)\nelse\n  self.class.new(@filename, (@line_number + offset.line_number) - 1, offset.column_number)\nend\n"}},{"html_id":"with(line_number=@line_number,column_number=@column_number):self-instance-method","name":"with","doc":"Returns the same location as this location but with the line and/or column number(s) changed\nto the given value(s).","summary":"<p>Returns the same location as this location but with the line and/or column number(s) changed to the given value(s).</p>","abstract":false,"args":[{"name":"line_number","default_value":"@line_number","external_name":"line_number","restriction":""},{"name":"column_number","default_value":"@column_number","external_name":"column_number","restriction":""}],"args_string":"(line_number = @line_number, column_number = @column_number) : self","args_html":"(line_number = @line_number, column_number = @column_number) : <span class=\"k\">self</span>","location":{"filename":"src/ameba/ext/location.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/ext/location.cr#L5"},"def":{"name":"with","args":[{"name":"line_number","default_value":"@line_number","external_name":"line_number","restriction":""},{"name":"column_number","default_value":"@column_number","external_name":"column_number","restriction":""}],"return_type":"self","visibility":"Public","body":"self.class.new(@filename, line_number, column_number)"}}]}]},{"html_id":"ameba/Ameba/Formatter","path":"Ameba/Formatter.html","kind":"module","full_name":"Ameba::Formatter","name":"Formatter","abstract":false,"locations":[{"filename":"src/ameba/formatter/base_formatter.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L4"},{"filename":"src/ameba/formatter/disabled_formatter.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/disabled_formatter.cr#L1"},{"filename":"src/ameba/formatter/dot_formatter.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/dot_formatter.cr#L3"},{"filename":"src/ameba/formatter/explain_formatter.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/explain_formatter.cr#L3"},{"filename":"src/ameba/formatter/flycheck_formatter.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/flycheck_formatter.cr#L1"},{"filename":"src/ameba/formatter/json_formatter.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/json_formatter.cr#L3"},{"filename":"src/ameba/formatter/todo_formatter.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/todo_formatter.cr#L1"},{"filename":"src/ameba/formatter/util.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/util.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"A module that utilizes Ameba's formatters.","summary":"<p>A module that utilizes Ameba's formatters.</p>","types":[{"html_id":"ameba/Ameba/Formatter/BaseFormatter","path":"Ameba/Formatter/BaseFormatter.html","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/formatter/base_formatter.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L8"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"ameba/Ameba/Formatter/DisabledFormatter","kind":"class","full_name":"Ameba::Formatter::DisabledFormatter","name":"DisabledFormatter"},{"html_id":"ameba/Ameba/Formatter/DotFormatter","kind":"class","full_name":"Ameba::Formatter::DotFormatter","name":"DotFormatter"},{"html_id":"ameba/Ameba/Formatter/FlycheckFormatter","kind":"class","full_name":"Ameba::Formatter::FlycheckFormatter","name":"FlycheckFormatter"},{"html_id":"ameba/Ameba/Formatter/JSONFormatter","kind":"class","full_name":"Ameba::Formatter::JSONFormatter","name":"JSONFormatter"}],"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"doc":"A base formatter for all formatters. It uses `output` IO\nto report results and also implements stub methods for\ncallbacks in `Ameba::Runner#run` method.","summary":"<p>A base formatter for all formatters.</p>","constructors":[{"html_id":"new(output:IO=STDOUT)-class-method","name":"new","abstract":false,"args":[{"name":"output","default_value":"STDOUT","external_name":"output","restriction":"::IO"}],"args_string":"(output : IO = STDOUT)","args_html":"(output : IO = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/ameba/formatter/base_formatter.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L13"},"def":{"name":"new","args":[{"name":"output","default_value":"STDOUT","external_name":"output","restriction":"::IO"}],"visibility":"Public","body":"_ = allocate\n_.initialize(output)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"config:Hash(Symbol,Bool|String)-instance-method","name":"config","abstract":false,"location":{"filename":"src/ameba/formatter/base_formatter.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L11"},"def":{"name":"config","visibility":"Public","body":"@config"}},{"html_id":"finished(sources)-instance-method","name":"finished","doc":"Callback that indicates when inspection is finished.\nA list of inspected sources is passed as an argument.","summary":"<p>Callback that indicates when inspection is finished.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/base_formatter.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L30"},"def":{"name":"finished","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":""}},{"html_id":"output:IO::FileDescriptor|IO::Memory-instance-method","name":"output","doc":"TODO: allow other IOs","summary":"<p><span class=\"flag orange\">TODO</span>  allow other IOs</p>","abstract":false,"location":{"filename":"src/ameba/formatter/base_formatter.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L10"},"def":{"name":"output","return_type":"IO::FileDescriptor | IO::Memory","visibility":"Public","body":"@output"}},{"html_id":"source_finished(source:Source)-instance-method","name":"source_finished","doc":"Callback that indicates when source inspection is finished.\nA corresponding source is passed as an argument.","summary":"<p>Callback that indicates when source inspection is finished.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/formatter/base_formatter.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L22"},"def":{"name":"source_finished","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":""}},{"html_id":"source_started(source:Source)-instance-method","name":"source_started","doc":"Callback that indicates when source inspection is finished.\nA corresponding source is passed as an argument.","summary":"<p>Callback that indicates when source inspection is finished.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/formatter/base_formatter.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L26"},"def":{"name":"source_started","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":""}},{"html_id":"started(sources)-instance-method","name":"started","doc":"Callback that indicates when inspecting is started.\nA list of sources to inspect is passed as an argument.","summary":"<p>Callback that indicates when inspecting is started.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/base_formatter.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/base_formatter.cr#L18"},"def":{"name":"started","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":""}}]},{"html_id":"ameba/Ameba/Formatter/DisabledFormatter","path":"Ameba/Formatter/DisabledFormatter.html","kind":"class","full_name":"Ameba::Formatter::DisabledFormatter","name":"DisabledFormatter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},"ancestors":[{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/formatter/disabled_formatter.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/disabled_formatter.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"doc":"A formatter that shows all disabled lines by inline directives.","summary":"<p>A formatter that shows all disabled lines by inline directives.</p>","instance_methods":[{"html_id":"finished(sources)-instance-method","name":"finished","doc":"Callback that indicates when inspection is finished.\nA list of inspected sources is passed as an argument.","summary":"<p>Callback that indicates when inspection is finished.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/disabled_formatter.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/disabled_formatter.cr#L4"},"def":{"name":"finished","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":"output << \"Disabled rules using inline directives: \\n\\n\"\nsources.each do |source|\n  source.issues.select(&.disabled?).each do |e|\n    if loc = e.location\n      output << (\"#{source.path}:#{loc.line_number}\".colorize(:cyan))\n      output << \" #{e.rule.name}\\n\"\n    end\n  end\nend\n"}}]},{"html_id":"ameba/Ameba/Formatter/DotFormatter","path":"Ameba/Formatter/DotFormatter.html","kind":"class","full_name":"Ameba::Formatter::DotFormatter","name":"DotFormatter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},"ancestors":[{"html_id":"ameba/Ameba/Formatter/Util","kind":"module","full_name":"Ameba::Formatter::Util","name":"Util"},{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/formatter/dot_formatter.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/dot_formatter.cr#L6"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/Formatter/Util","kind":"module","full_name":"Ameba::Formatter::Util","name":"Util"}],"subclasses":[{"html_id":"ameba/Ameba/Formatter/TODOFormatter","kind":"class","full_name":"Ameba::Formatter::TODOFormatter","name":"TODOFormatter"}],"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"doc":"A formatter that shows a progress of inspection in a terminal using dots.\nIt is similar to Crystal's dot formatter for specs.","summary":"<p>A formatter that shows a progress of inspection in a terminal using dots.</p>","instance_methods":[{"html_id":"finished(sources)-instance-method","name":"finished","doc":"Reports a message when inspection is finished.","summary":"<p>Reports a message when inspection is finished.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/dot_formatter.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/dot_formatter.cr#L27"},"def":{"name":"finished","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":"output.flush\noutput << \"\\n\\n\"\nshow_affected_code = !config[:without_affected_code]?\nfailed_sources = sources.reject(&.valid?)\nfailed_sources.each do |source|\n  source.issues.each do |issue|\n    if issue.disabled?\n      next\n    end\n    if (    location = issue.location).nil?\n      next\n    end\n    output.print(location.colorize(:cyan))\n    if issue.correctable?\n      if config[:autocorrect]?\n        output.print(\" [Corrected]\".colorize(:green))\n      else\n        output.print(\" [Correctable]\".colorize(:yellow))\n      end\n    end\n    output.puts\n    output.puts(\"[#{issue.rule.severity.symbol}] #{issue.rule.name}: #{issue.message}\".colorize(:red))\n    if show_affected_code && (code = affected_code(issue))\n      output << (code.colorize(:default))\n    end\n    output.puts\n  end\nend\noutput.puts(finished_in_message(@started_at, Time.monotonic))\noutput.puts(final_message(sources, failed_sources))\n"}},{"html_id":"source_finished(source:Source)-instance-method","name":"source_finished","doc":"Reports a result of the inspection of a corresponding source.","summary":"<p>Reports a result of the inspection of a corresponding source.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/formatter/dot_formatter.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/dot_formatter.cr#L21"},"def":{"name":"source_finished","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":"sym = source.valid? ? \".\".colorize(:green) : \"F\".colorize(:red)\n@mutex.synchronize do\n  output << sym\nend\n"}},{"html_id":"started(sources)-instance-method","name":"started","doc":"Reports a message when inspection is started.","summary":"<p>Reports a message when inspection is started.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/dot_formatter.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/dot_formatter.cr#L13"},"def":{"name":"started","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":"@started_at = Time.monotonic\noutput.puts(started_message(sources.size))\noutput.puts\n"}}]},{"html_id":"ameba/Ameba/Formatter/ExplainFormatter","path":"Ameba/Formatter/ExplainFormatter.html","kind":"class","full_name":"Ameba::Formatter::ExplainFormatter","name":"ExplainFormatter","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Ameba/Formatter/Util","kind":"module","full_name":"Ameba::Formatter::Util","name":"Util"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/formatter/explain_formatter.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/explain_formatter.cr#L6"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"HEADING","name":"HEADING","value":"\"## \""},{"id":"PREFIX","name":"PREFIX","value":"\" \""}],"included_modules":[{"html_id":"ameba/Ameba/Formatter/Util","kind":"module","full_name":"Ameba::Formatter::Util","name":"Util"}],"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"doc":"A formatter that shows the detailed explanation of the issue at\na specific location.","summary":"<p>A formatter that shows the detailed explanation of the issue at a specific location.</p>","constructors":[{"html_id":"new(output:IO,location)-class-method","name":"new","doc":"Creates a new instance of ExplainFormatter.\nAccepts *output* which indicates the io where the explanation will be wrtitten to.\nSecond argument is *location* which indicates the location to explain.\n\n```\nExplainFormatter.new output,\n  {file: path, line: line_number, column: column_number}\n```","summary":"<p>Creates a new instance of ExplainFormatter.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"::IO"},{"name":"location","external_name":"location","restriction":""}],"args_string":"(output : IO, location)","args_html":"(output : IO, location)","location":{"filename":"src/ameba/formatter/explain_formatter.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/explain_formatter.cr#L23"},"def":{"name":"new","args":[{"name":"output","external_name":"output","restriction":"::IO"},{"name":"location","external_name":"location","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(output, location)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"finished(sources)-instance-method","name":"finished","doc":"Reports the explainations at the *@location*.","summary":"<p>Reports the explainations at the <em>@location</em>.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/explain_formatter.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/explain_formatter.cr#L28"},"def":{"name":"finished","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":"source = sources.find do |__arg0|\n  __arg0.path == @location.filename\nend\nif source\nelse\n  return\nend\nissue = source.issues.find do |__arg1|\n  __arg1.location == @location\nend\nif issue\nelse\n  return\nend\nexplain(source, issue)\n"}},{"html_id":"location:Crystal::Location-instance-method","name":"location","abstract":false,"location":{"filename":"src/ameba/formatter/explain_formatter.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/explain_formatter.cr#L13"},"def":{"name":"location","return_type":"Crystal::Location","visibility":"Public","body":"@location"}},{"html_id":"output:IO::FileDescriptor|IO::Memory-instance-method","name":"output","abstract":false,"location":{"filename":"src/ameba/formatter/explain_formatter.cr","line_number":12,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/explain_formatter.cr#L12"},"def":{"name":"output","return_type":"IO::FileDescriptor | IO::Memory","visibility":"Public","body":"@output"}}]},{"html_id":"ameba/Ameba/Formatter/FlycheckFormatter","path":"Ameba/Formatter/FlycheckFormatter.html","kind":"class","full_name":"Ameba::Formatter::FlycheckFormatter","name":"FlycheckFormatter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},"ancestors":[{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/formatter/flycheck_formatter.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/flycheck_formatter.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"instance_methods":[{"html_id":"source_finished(source:Source)-instance-method","name":"source_finished","doc":"Callback that indicates when source inspection is finished.\nA corresponding source is passed as an argument.","summary":"<p>Callback that indicates when source inspection is finished.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/formatter/flycheck_formatter.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/flycheck_formatter.cr#L5"},"def":{"name":"source_finished","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":"source.issues.each do |e|\n  if e.disabled?\n    next\n  end\n  if e.correctable? && config[:autocorrect]?\n    next\n  end\n  if loc = e.location\n    @mutex.synchronize do\n      output.printf(\"%s:%d:%d: %s: [%s] %s\\n\", source.path, loc.line_number, loc.column_number, e.rule.severity.symbol, e.rule.name, e.message.gsub('\\n', \" \"))\n    end\n  end\nend"}}]},{"html_id":"ameba/Ameba/Formatter/JSONFormatter","path":"Ameba/Formatter/JSONFormatter.html","kind":"class","full_name":"Ameba::Formatter::JSONFormatter","name":"JSONFormatter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},"ancestors":[{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/formatter/json_formatter.cr","line_number":66,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/json_formatter.cr#L66"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"doc":"A formatter that produces the result in a json format.\n\nExample:\n\n```\n{\n  \"metadata\": {\n    \"ameba_version\":   \"x.x.x\",\n    \"crystal_version\": \"x.x.x\",\n  },\n  \"sources\": [\n    {\n      \"issues\": [\n        {\n          \"location\": {\n            \"column\": 7,\n            \"line\":   17,\n          },\n          \"end_location\": {\n            \"column\": 20,\n            \"line\":   17,\n          },\n          \"message\":   \"Useless assignment to variable `a`\",\n          \"rule_name\": \"UselessAssign\",\n          \"severity\":  \"Convention\",\n        },\n        {\n          \"location\": {\n            \"column\": 7,\n            \"line\":   18,\n          },\n          \"end_location\": {\n            \"column\": 8,\n            \"line\":   18,\n          },\n          \"message\":   \"Useless assignment to variable `a`\",\n          \"rule_name\": \"UselessAssign\",\n        },\n        {\n          \"location\": {\n            \"column\": 7,\n            \"line\":   19,\n          },\n          \"end_location\": {\n            \"column\": 9,\n            \"line\":   19,\n          },\n          \"message\":   \"Useless assignment to variable `a`\",\n          \"rule_name\": \"UselessAssign\",\n          \"severity\":  \"Convention\",\n        },\n      ],\n      \"path\": \"src/ameba/formatter/json_formatter.cr\",\n    },\n  ],\n  \"summary\": {\n    \"issues_count\":         3,\n    \"target_sources_count\": 1,\n  },\n}\n```\n","summary":"<p>A formatter that produces the result in a json format.</p>","constructors":[{"html_id":"new(output=STDOUT)-class-method","name":"new","abstract":false,"args":[{"name":"output","default_value":"STDOUT","external_name":"output","restriction":""}],"args_string":"(output = STDOUT)","args_html":"(output = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/ameba/formatter/json_formatter.cr","line_number":67,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/json_formatter.cr#L67"},"def":{"name":"new","args":[{"name":"output","default_value":"STDOUT","external_name":"output","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(output)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"finished(sources)-instance-method","name":"finished","doc":"Callback that indicates when inspection is finished.\nA list of inspected sources is passed as an argument.","summary":"<p>Callback that indicates when inspection is finished.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/json_formatter.cr","line_number":88,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/json_formatter.cr#L88"},"def":{"name":"finished","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":"@result.to_json(@output)"}},{"html_id":"source_finished(source:Source)-instance-method","name":"source_finished","doc":"Callback that indicates when source inspection is finished.\nA corresponding source is passed as an argument.","summary":"<p>Callback that indicates when source inspection is finished.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/formatter/json_formatter.cr","line_number":75,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/json_formatter.cr#L75"},"def":{"name":"source_finished","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":"json_source = AsJSON::Source.new(source.path)\nsource.issues.each do |e|\n  if e.disabled?\n    next\n  end\n  if e.correctable? && config[:autocorrect]?\n    next\n  end\n  json_source.issues << (AsJSON::Issue.new(e.rule.name, e.rule.severity.to_s, e.location, e.end_location, e.message))\n  __temp_46 = @result.summary\n  __temp_46.issues_count = __temp_46.issues_count + 1\nend\n@result.sources << json_source\n"}},{"html_id":"started(sources)-instance-method","name":"started","doc":"Callback that indicates when inspecting is started.\nA list of sources to inspect is passed as an argument.","summary":"<p>Callback that indicates when inspecting is started.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/json_formatter.cr","line_number":71,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/json_formatter.cr#L71"},"def":{"name":"started","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":"@result.summary.target_sources_count = sources.size"}}]},{"html_id":"ameba/Ameba/Formatter/TODOFormatter","path":"Ameba/Formatter/TODOFormatter.html","kind":"class","full_name":"Ameba::Formatter::TODOFormatter","name":"TODOFormatter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Formatter/DotFormatter","kind":"class","full_name":"Ameba::Formatter::DotFormatter","name":"DotFormatter"},"ancestors":[{"html_id":"ameba/Ameba/Formatter/DotFormatter","kind":"class","full_name":"Ameba::Formatter::DotFormatter","name":"DotFormatter"},{"html_id":"ameba/Ameba/Formatter/Util","kind":"module","full_name":"Ameba::Formatter::Util","name":"Util"},{"html_id":"ameba/Ameba/Formatter/BaseFormatter","kind":"class","full_name":"Ameba::Formatter::BaseFormatter","name":"BaseFormatter"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/formatter/todo_formatter.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/todo_formatter.cr#L5"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"doc":"A formatter that creates a todo config.\nBasically, it takes all issues reported and disables corresponding rules\nor excludes failed sources from these rules.","summary":"<p>A formatter that creates a todo config.</p>","constructors":[{"html_id":"new(output=STDOUT)-class-method","name":"new","abstract":false,"args":[{"name":"output","default_value":"STDOUT","external_name":"output","restriction":""}],"args_string":"(output = STDOUT)","args_html":"(output = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/ameba/formatter/todo_formatter.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/todo_formatter.cr#L6"},"def":{"name":"new","args":[{"name":"output","default_value":"STDOUT","external_name":"output","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(output)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"finished(sources)-instance-method","name":"finished","doc":"Reports a message when inspection is finished.","summary":"<p>Reports a message when inspection is finished.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":""}],"args_string":"(sources)","args_html":"(sources)","location":{"filename":"src/ameba/formatter/todo_formatter.cr","line_number":9,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/todo_formatter.cr#L9"},"def":{"name":"finished","args":[{"name":"sources","external_name":"sources","restriction":""}],"visibility":"Public","body":"super(sources)\nissues = sources.flat_map(&.issues)\nif issues.any? do |issue|\n  !issue.disabled?\nend\nelse\n  @output.puts(\"No issues found. File is not generated.\")\n  return\nend\nif issues.any?(&.syntax?)\n  @output.puts(\"Unable to generate TODO file. Please fix syntax issues.\")\n  return\nend\nfile = generate_todo_config(issues)\n@output.puts(\"Created #{file.path}\")\nfile\n"}}]},{"html_id":"ameba/Ameba/Formatter/Util","path":"Ameba/Formatter/Util.html","kind":"module","full_name":"Ameba::Formatter::Util","name":"Util","abstract":false,"locations":[{"filename":"src/ameba/formatter/util.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/util.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"ameba/Ameba/Formatter/DotFormatter","kind":"class","full_name":"Ameba::Formatter::DotFormatter","name":"DotFormatter"},{"html_id":"ameba/Ameba/Formatter/ExplainFormatter","kind":"class","full_name":"Ameba::Formatter::ExplainFormatter","name":"ExplainFormatter"}],"namespace":{"html_id":"ameba/Ameba/Formatter","kind":"module","full_name":"Ameba::Formatter","name":"Formatter"},"instance_methods":[{"html_id":"affected_code(issue:Issue,context_lines=0,max_length=120,ellipsis=\"...\",prompt=\">\")-instance-method","name":"affected_code","abstract":false,"args":[{"name":"issue","external_name":"issue","restriction":"Issue"},{"name":"context_lines","default_value":"0","external_name":"context_lines","restriction":""},{"name":"max_length","default_value":"120","external_name":"max_length","restriction":""},{"name":"ellipsis","default_value":"\" ...\"","external_name":"ellipsis","restriction":""},{"name":"prompt","default_value":"\"> \"","external_name":"prompt","restriction":""}],"args_string":"(issue : Issue, context_lines = 0, max_length = 120, ellipsis = \" ...\", prompt = \"> \")","args_html":"(issue : <a href=\"../../Ameba/Issue.html\">Issue</a>, context_lines = <span class=\"n\">0</span>, max_length = <span class=\"n\">120</span>, ellipsis = <span class=\"s\">&quot; ...&quot;</span>, prompt = <span class=\"s\">&quot;&gt; &quot;</span>)","location":{"filename":"src/ameba/formatter/util.cr","line_number":43,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/util.cr#L43"},"def":{"name":"affected_code","args":[{"name":"issue","external_name":"issue","restriction":"Issue"},{"name":"context_lines","default_value":"0","external_name":"context_lines","restriction":""},{"name":"max_length","default_value":"120","external_name":"max_length","restriction":""},{"name":"ellipsis","default_value":"\" ...\"","external_name":"ellipsis","restriction":""},{"name":"prompt","default_value":"\"> \"","external_name":"prompt","restriction":""}],"visibility":"Public","body":"if location = issue.location\nelse\n  return\nend\naffected_code(issue.code, location, issue.end_location, context_lines, max_length, ellipsis, prompt)\n"}},{"html_id":"affected_code(code,location,end_location=nil,context_lines=0,max_length=120,ellipsis=\"...\",prompt=\">\")-instance-method","name":"affected_code","abstract":false,"args":[{"name":"code","external_name":"code","restriction":""},{"name":"location","external_name":"location","restriction":""},{"name":"end_location","default_value":"nil","external_name":"end_location","restriction":""},{"name":"context_lines","default_value":"0","external_name":"context_lines","restriction":""},{"name":"max_length","default_value":"120","external_name":"max_length","restriction":""},{"name":"ellipsis","default_value":"\" ...\"","external_name":"ellipsis","restriction":""},{"name":"prompt","default_value":"\"> \"","external_name":"prompt","restriction":""}],"args_string":"(code, location, end_location = nil, context_lines = 0, max_length = 120, ellipsis = \" ...\", prompt = \"> \")","args_html":"(code, location, end_location = <span class=\"n\">nil</span>, context_lines = <span class=\"n\">0</span>, max_length = <span class=\"n\">120</span>, ellipsis = <span class=\"s\">&quot; ...&quot;</span>, prompt = <span class=\"s\">&quot;&gt; &quot;</span>)","location":{"filename":"src/ameba/formatter/util.cr","line_number":49,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/util.cr#L49"},"def":{"name":"affected_code","args":[{"name":"code","external_name":"code","restriction":""},{"name":"location","external_name":"location","restriction":""},{"name":"end_location","default_value":"nil","external_name":"end_location","restriction":""},{"name":"context_lines","default_value":"0","external_name":"context_lines","restriction":""},{"name":"max_length","default_value":"120","external_name":"max_length","restriction":""},{"name":"ellipsis","default_value":"\" ...\"","external_name":"ellipsis","restriction":""},{"name":"prompt","default_value":"\"> \"","external_name":"prompt","restriction":""}],"visibility":"Public","body":"lines = code.split('\\n')\nlineno, column = location.line_number, location.column_number\nif affected_line = lines[lineno - 1]?.presence\nelse\n  return\nend\nif column < max_length\n  affected_line = trim(affected_line, max_length, ellipsis)\nend\nshow_context = context_lines > 0\nif show_context\n  pre_context, post_context = context(lines, lineno, context_lines)\n  position = prompt.size + column\n  position = position - 1\nelse\n  affected_line_size, affected_line = affected_line.size, affected_line.lstrip\n  position = (column - (affected_line_size - affected_line.size)) + prompt.size\n  position = position - 1\nend\nString.build do |str|\n  if show_context\n    pre_context.try(&.each do |line|\n      line = trim(line, max_length, ellipsis)\n      str << prompt\n      str.puts(line.colorize(:dark_gray))\n    end)\n  end\n  str << prompt\n  str.puts(affected_line.colorize(:white))\n  str << (\" \" * position)\n  str << (\"^\".colorize(:yellow))\n  if end_location\n    end_lineno = end_location.line_number\n    end_column = end_location.column_number\n    if (end_lineno == lineno) && end_column > column\n      end_position = end_column - column\n      end_position = end_position - 1\n      str << ((\"-\" * end_position).colorize(:dark_gray))\n      str << (\"^\".colorize(:yellow))\n    end\n  end\n  str.puts\n  if show_context\n    post_context.try(&.each do |line|\n      line = trim(line, max_length, ellipsis)\n      str << prompt\n      str.puts(line.colorize(:dark_gray))\n    end)\n  end\nend\n"}},{"html_id":"context(lines,lineno,context_lines=3,remove_empty=true)-instance-method","name":"context","abstract":false,"args":[{"name":"lines","external_name":"lines","restriction":""},{"name":"lineno","external_name":"lineno","restriction":""},{"name":"context_lines","default_value":"3","external_name":"context_lines","restriction":""},{"name":"remove_empty","default_value":"true","external_name":"remove_empty","restriction":""}],"args_string":"(lines, lineno, context_lines = 3, remove_empty = true)","args_html":"(lines, lineno, context_lines = <span class=\"n\">3</span>, remove_empty = <span class=\"n\">true</span>)","location":{"filename":"src/ameba/formatter/util.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/util.cr#L17"},"def":{"name":"context","args":[{"name":"lines","external_name":"lines","restriction":""},{"name":"lineno","external_name":"lineno","restriction":""},{"name":"context_lines","default_value":"3","external_name":"context_lines","restriction":""},{"name":"remove_empty","default_value":"true","external_name":"remove_empty","restriction":""}],"visibility":"Public","body":"pre_context, post_context = [] of ::String, [] of ::String\nlines.each_with_index do |line, i|\n  case i + 1\n  when (lineno - context_lines)...lineno\n    pre_context << line\n  when (lineno + 1)..(lineno + context_lines)\n    post_context << line\n  end\nend\nif remove_empty\n  while pre_context.first?.try(&.blank?)\n    pre_context.shift\n  end\n  while post_context.last?.try(&.blank?)\n    post_context.pop\n  end\nend\n{pre_context, post_context}\n"}},{"html_id":"deansify(message:String?):String?-instance-method","name":"deansify","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(message : String?) : String?","args_html":"(message : String?) : String?","location":{"filename":"src/ameba/formatter/util.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/util.cr#L3"},"def":{"name":"deansify","args":[{"name":"message","external_name":"message","restriction":"String | ::Nil"}],"return_type":"String | ::Nil","visibility":"Public","body":"message.try do |__arg0|\n  (__arg0.gsub(/\\x1b[^m]*m/, \"\")).presence\nend"}},{"html_id":"trim(str,max_length=120,ellipsis=\"...\")-instance-method","name":"trim","abstract":false,"args":[{"name":"str","external_name":"str","restriction":""},{"name":"max_length","default_value":"120","external_name":"max_length","restriction":""},{"name":"ellipsis","default_value":"\" ...\"","external_name":"ellipsis","restriction":""}],"args_string":"(str, max_length = 120, ellipsis = \" ...\")","args_html":"(str, max_length = <span class=\"n\">120</span>, ellipsis = <span class=\"s\">&quot; ...&quot;</span>)","location":{"filename":"src/ameba/formatter/util.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/formatter/util.cr#L7"},"def":{"name":"trim","args":[{"name":"str","external_name":"str","restriction":""},{"name":"max_length","default_value":"120","external_name":"max_length","restriction":""},{"name":"ellipsis","default_value":"\" ...\"","external_name":"ellipsis","restriction":""}],"visibility":"Public","body":"if (str.size - ellipsis.size) > max_length\n  str = str[0, max_length]\n  if str.size > ellipsis.size\n    str = str[0...(-ellipsis.size)] + ellipsis\n  end\nend\nstr\n"}}]}]},{"html_id":"ameba/Ameba/GlobUtils","path":"Ameba/GlobUtils.html","kind":"module","full_name":"Ameba::GlobUtils","name":"GlobUtils","abstract":false,"locations":[{"filename":"src/ameba/glob_utils.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/glob_utils.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"ameba/Ameba/Config","kind":"class","full_name":"Ameba::Config","name":"Config"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"Helper module that is utilizes helpers for working with globs.","summary":"<p>Helper module that is utilizes helpers for working with globs.</p>","instance_methods":[{"html_id":"expand(globs)-instance-method","name":"expand","doc":"Expands globs. Globs can point to files or even directories.\n\n```\nexpand([\"spec/*.cr\", \"src\"]) # => all files in src folder + first level specs\n```","summary":"<p>Expands globs.</p>","abstract":false,"args":[{"name":"globs","external_name":"globs","restriction":""}],"args_string":"(globs)","args_html":"(globs)","location":{"filename":"src/ameba/glob_utils.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/glob_utils.cr#L22"},"def":{"name":"expand","args":[{"name":"globs","external_name":"globs","restriction":""}],"visibility":"Public","body":"globs.flat_map do |glob|\n  if File.directory?(glob)\n    glob = glob + \"/**/*.cr\"\n  end\n  Dir[glob]\nend.uniq!"}},{"html_id":"find_files_by_globs(globs)-instance-method","name":"find_files_by_globs","doc":"Returns all files that match specified globs.\nGlobs can have wildcards or be rejected:\n\n```\nfind_files_by_globs([\"**/*.cr\", \"!lib\"])\n```","summary":"<p>Returns all files that match specified globs.</p>","abstract":false,"args":[{"name":"globs","external_name":"globs","restriction":""}],"args_string":"(globs)","args_html":"(globs)","location":{"filename":"src/ameba/glob_utils.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/glob_utils.cr#L10"},"def":{"name":"find_files_by_globs","args":[{"name":"globs","external_name":"globs","restriction":""}],"visibility":"Public","body":"rejected = rejected_globs(globs)\nselected = globs - rejected\n(expand(selected)) - (expand(rejected.map!(&.[](1..-1))))\n"}}]},{"html_id":"ameba/Ameba/InlineComments","path":"Ameba/InlineComments.html","kind":"module","full_name":"Ameba::InlineComments","name":"InlineComments","abstract":false,"locations":[{"filename":"src/ameba/inline_comments.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"COMMENT_DIRECTIVE_REGEX","name":"COMMENT_DIRECTIVE_REGEX","value":"/# ameba:(?<action>\\w+) (?<rules>\\w+(?:\\/\\w+)?(?:,? \\w+(?:\\/\\w+)?)*)/"}],"including_types":[{"html_id":"ameba/Ameba/Source","kind":"class","full_name":"Ameba::Source","name":"Source"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"A module that utilizes inline comments parsing and processing logic.","summary":"<p>A module that utilizes inline comments parsing and processing logic.</p>","instance_methods":[{"html_id":"comment?(line_number:Int32)-instance-method","name":"comment?","doc":"Returns true if the line at the given `line_number` is a comment.","summary":"<p>Returns true if the line at the given <code>line_number</code> is a comment.</p>","abstract":false,"args":[{"name":"line_number","external_name":"line_number","restriction":"Int32"}],"args_string":"(line_number : Int32)","args_html":"(line_number : Int32)","location":{"filename":"src/ameba/inline_comments.cr","line_number":78,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L78"},"def":{"name":"comment?","args":[{"name":"line_number","external_name":"line_number","restriction":"Int32"}],"visibility":"Public","body":"if line = lines[line_number]?\nelse\n  return\nend\ncomment?(line)\n"}},{"html_id":"location_disabled?(location:Crystal::Location?,rule)-instance-method","name":"location_disabled?","doc":"Returns true if current location is disabled for a particular rule,\nfalse otherwise.\n\nLocation is disabled in two cases:\n  1. The line of the location ends with a comment directive.\n  2. The line above the location is a comment directive.\n\nFor example, here are two examples of disabled location:\n\n```\n# ameba:disable Style/LargeNumbers\nTime.epoch(1483859302)\n\nTime.epoch(1483859302) # ameba:disable Style/LargeNumbers\n```\n\nBut here are examples which are not considered as disabled location:\n\n```\n# ameba:disable Style/LargeNumbers\n#\nTime.epoch(1483859302)\n\nif use_epoch? # ameba:disable Style/LargeNumbers\n  Time.epoch(1483859302)\nend\n```","summary":"<p>Returns true if current location is disabled for a particular rule, false otherwise.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Crystal::Location | ::Nil"},{"name":"rule","external_name":"rule","restriction":""}],"args_string":"(location : Crystal::Location?, rule)","args_html":"(location : <a href=\"../Crystal/Location.html\">Crystal::Location</a>?, rule)","location":{"filename":"src/ameba/inline_comments.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L40"},"def":{"name":"location_disabled?","args":[{"name":"location","external_name":"location","restriction":"Crystal::Location | ::Nil"},{"name":"rule","external_name":"rule","restriction":""}],"visibility":"Public","body":"if rule.name.in?(Rule::SPECIAL)\n  return false\nend\nif line_number = location.try do |__arg0|\n  __arg0.line_number.try(&.-(1))\nend\nelse\n  return false\nend\nif line = lines[line_number]?\nelse\n  return false\nend\n(line_disabled?(line, rule)) || (((line_number > 0 && (prev_line = lines[line_number - 1])) && (comment?(prev_line))) && (line_disabled?(prev_line, rule)))\n"}},{"html_id":"parse_inline_directive(line)-instance-method","name":"parse_inline_directive","doc":"Parses inline comment directive. Returns a tuple that consists of\nan action and parsed rules if directive found, nil otherwise.\n\n```\nline = \"# ameba:disable Rule1, Rule2\"\ndirective = parse_inline_directive(line)\ndirective[:action] # => \"disable\"\ndirective[:rules]  # => [\"Rule1\", \"Rule2\"]\n```\n\nIt ignores the directive if it is commented out.\n\n```\nline = \"# # ameba:disable Rule1, Rule2\"\nparse_inline_directive(line) # => nil\n```","summary":"<p>Parses inline comment directive.</p>","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line)","args_html":"(line)","location":{"filename":"src/ameba/inline_comments.cr","line_number":68,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L68"},"def":{"name":"parse_inline_directive","args":[{"name":"line","external_name":"line","restriction":""}],"visibility":"Public","body":"if directive = COMMENT_DIRECTIVE_REGEX.match(line)\nelse\n  return\nend\nif commented_out?(line.gsub(directive[0], \"\"))\n  return\nend\n{action: directive[\"action\"], rules: directive[\"rules\"].split(/[\\s,]/, remove_empty: true)}\n"}}],"types":[{"html_id":"ameba/Ameba/InlineComments/Action","path":"Ameba/InlineComments/Action.html","kind":"enum","full_name":"Ameba::InlineComments::Action","name":"Action","abstract":false,"ancestors":[{"html_id":"ameba/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"ameba/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ameba/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/inline_comments.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L8"}],"repository_name":"ameba","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Disable","name":"Disable","value":"0"},{"id":"Enable","name":"Enable","value":"1"}],"namespace":{"html_id":"ameba/Ameba/InlineComments","kind":"module","full_name":"Ameba::InlineComments","name":"InlineComments"},"doc":"Available actions in the inline comments","summary":"<p>Available actions in the inline comments</p>","instance_methods":[{"html_id":"disable?-instance-method","name":"disable?","abstract":false,"location":{"filename":"src/ameba/inline_comments.cr","line_number":9,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L9"},"def":{"name":"disable?","visibility":"Public","body":"self == Disable"}},{"html_id":"enable?-instance-method","name":"enable?","abstract":false,"location":{"filename":"src/ameba/inline_comments.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/inline_comments.cr#L10"},"def":{"name":"enable?","visibility":"Public","body":"self == Enable"}}]}]},{"html_id":"ameba/Ameba/Issue","path":"Ameba/Issue.html","kind":"struct","full_name":"Ameba::Issue","name":"Issue","abstract":false,"superclass":{"html_id":"ameba/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"ameba/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ameba/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/issue.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"Represents an issue reported by Ameba.","summary":"<p>Represents an issue reported by Ameba.</p>","constructors":[{"html_id":"new(code:String,rule:Ameba::Rule::Base,location:Crystal::Location?,end_location:Crystal::Location?,message:String,status:Status?=nil,block:Source::Corrector->?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"::String"},{"name":"rule","external_name":"rule","restriction":"::Ameba::Rule::Base"},{"name":"location","external_name":"location","restriction":"::Nil | ::Crystal::Location"},{"name":"end_location","external_name":"end_location","restriction":"::Nil | ::Crystal::Location"},{"name":"message","external_name":"message","restriction":"::String"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"args_string":"(code : String, rule : Ameba::Rule::Base, location : Crystal::Location?, end_location : Crystal::Location?, message : String, status : Status? = nil, block : Source::Corrector -> ? = nil)","args_html":"(code : String, rule : <a href=\"../Ameba/Rule/Base.html\">Ameba::Rule::Base</a>, location : <a href=\"../Crystal/Location.html\">Crystal::Location</a>?, end_location : <a href=\"../Crystal/Location.html\">Crystal::Location</a>?, message : String, status : <a href=\"../Ameba/Issue/Status.html\">Status</a>? = <span class=\"n\">nil</span>, block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ? = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/issue.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L30"},"def":{"name":"new","args":[{"name":"code","external_name":"code","restriction":"::String"},{"name":"rule","external_name":"rule","restriction":"::Ameba::Rule::Base"},{"name":"location","external_name":"location","restriction":"::Nil | ::Crystal::Location"},{"name":"end_location","external_name":"end_location","restriction":"::Nil | ::Crystal::Location"},{"name":"message","external_name":"message","restriction":"::String"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(code, rule, location, end_location, message, status, block)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"code:String-instance-method","name":"code","doc":"The source code that triggered this issue.","summary":"<p>The source code that triggered this issue.</p>","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L10"},"def":{"name":"code","return_type":"String","visibility":"Public","body":"@code"}},{"html_id":"correct(corrector)-instance-method","name":"correct","abstract":false,"args":[{"name":"corrector","external_name":"corrector","restriction":""}],"args_string":"(corrector)","args_html":"(corrector)","location":{"filename":"src/ameba/issue.cr","line_number":42,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L42"},"def":{"name":"correct","args":[{"name":"corrector","external_name":"corrector","restriction":""}],"visibility":"Public","body":"@block.try(&.call(corrector))"}},{"html_id":"correctable?-instance-method","name":"correctable?","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L38"},"def":{"name":"correctable?","visibility":"Public","body":"!@block.nil?"}},{"html_id":"disabled?(*args,**options)-instance-method","name":"disabled?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/issue.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L27"},"def":{"name":"disabled?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"status.disabled?(*args, **options)"}},{"html_id":"disabled?(*args,**options,&)-instance-method","name":"disabled?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/issue.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L27"},"def":{"name":"disabled?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"status.disabled?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"enabled?(*args,**options)-instance-method","name":"enabled?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/ameba/issue.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L27"},"def":{"name":"enabled?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"status.enabled?(*args, **options)"}},{"html_id":"enabled?(*args,**options,&)-instance-method","name":"enabled?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/ameba/issue.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L27"},"def":{"name":"enabled?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"status.enabled?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"end_location:Crystal::Location?-instance-method","name":"end_location","doc":"End location of the issue.","summary":"<p>End location of the issue.</p>","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":19,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L19"},"def":{"name":"end_location","return_type":"Crystal::Location | ::Nil","visibility":"Public","body":"@end_location"}},{"html_id":"location:Crystal::Location?-instance-method","name":"location","doc":"Location of the issue.","summary":"<p>Location of the issue.</p>","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":16,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L16"},"def":{"name":"location","return_type":"Crystal::Location | ::Nil","visibility":"Public","body":"@location"}},{"html_id":"message:String-instance-method","name":"message","doc":"Issue message.","summary":"<p>Issue message.</p>","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L22"},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"}},{"html_id":"rule:Rule::Base-instance-method","name":"rule","doc":"A rule that triggers this issue.","summary":"<p>A rule that triggers this issue.</p>","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L13"},"def":{"name":"rule","return_type":"Rule::Base","visibility":"Public","body":"@rule"}},{"html_id":"status:Status-instance-method","name":"status","doc":"Issue status.","summary":"<p>Issue status.</p>","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L25"},"def":{"name":"status","return_type":"Status","visibility":"Public","body":"@status"}},{"html_id":"syntax?-instance-method","name":"syntax?","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":34,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L34"},"def":{"name":"syntax?","visibility":"Public","body":"rule.is_a?(Rule::Lint::Syntax)"}}],"types":[{"html_id":"ameba/Ameba/Issue/Status","path":"Ameba/Issue/Status.html","kind":"enum","full_name":"Ameba::Issue::Status","name":"Status","abstract":false,"ancestors":[{"html_id":"ameba/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"ameba/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ameba/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/issue.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L4"}],"repository_name":"ameba","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Enabled","name":"Enabled","value":"0"},{"id":"Disabled","name":"Disabled","value":"1"}],"namespace":{"html_id":"ameba/Ameba/Issue","kind":"struct","full_name":"Ameba::Issue","name":"Issue"},"instance_methods":[{"html_id":"disabled?-instance-method","name":"disabled?","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L6"},"def":{"name":"disabled?","visibility":"Public","body":"self == Disabled"}},{"html_id":"enabled?-instance-method","name":"enabled?","abstract":false,"location":{"filename":"src/ameba/issue.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/issue.cr#L5"},"def":{"name":"enabled?","visibility":"Public","body":"self == Enabled"}}]}]},{"html_id":"ameba/Ameba/Reportable","path":"Ameba/Reportable.html","kind":"module","full_name":"Ameba::Reportable","name":"Reportable","abstract":false,"locations":[{"filename":"src/ameba/reportable.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"ameba/Ameba/Source","kind":"class","full_name":"Ameba::Source","name":"Source"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"Represents a module used to report issues.","summary":"<p>Represents a module used to report issues.</p>","instance_methods":[{"html_id":"add_issue(rule,location:Crystal::Location?,end_location:Crystal::Location?,message:String,status:Issue::Status?=nil,block:Source::Corrector->?=nil):Issue-instance-method","name":"add_issue","doc":"Adds a new issue to the list of issues.","summary":"<p>Adds a new issue to the list of issues.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"Crystal::Location | ::Nil"},{"name":"end_location","external_name":"end_location","restriction":"Crystal::Location | ::Nil"},{"name":"message","external_name":"message","restriction":"String"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"args_string":"(rule, location : Crystal::Location?, end_location : Crystal::Location?, message : String, status : Issue::Status? = nil, block : Source::Corrector -> ? = nil) : Issue","args_html":"(rule, location : <a href=\"../Crystal/Location.html\">Crystal::Location</a>?, end_location : <a href=\"../Crystal/Location.html\">Crystal::Location</a>?, message : String, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ? = <span class=\"n\">nil</span>) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L8"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"Crystal::Location | ::Nil"},{"name":"end_location","external_name":"end_location","restriction":"Crystal::Location | ::Nil"},{"name":"message","external_name":"message","restriction":"String"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"return_type":"Issue","visibility":"Public","body":"if location_disabled?(location, rule)\n  status || (status = Issue::Status::Disabled)\nend\n(Issue.new(code, rule, location, end_location, message, status, block)).tap do |issue|\n  issues << issue\nend\n"}},{"html_id":"add_issue(rule,location:Crystal::Location,end_location:Crystal::Location,message:String,status:Issue::Status?=nil,&block:Source::Corrector->):Issue-instance-method","name":"add_issue","doc":"Adds a new issue to the list of issues.","summary":"<p>Adds a new issue to the list of issues.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"Crystal::Location"},{"name":"end_location","external_name":"end_location","restriction":"Crystal::Location"},{"name":"message","external_name":"message","restriction":"String"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"args_string":"(rule, location : Crystal::Location, end_location : Crystal::Location, message : String, status : Issue::Status? = nil, &block : Source::Corrector -> ) : Issue","args_html":"(rule, location : <a href=\"../Crystal/Location.html\">Crystal::Location</a>, end_location : <a href=\"../Crystal/Location.html\">Crystal::Location</a>, message : String, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, &block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L23"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"Crystal::Location"},{"name":"end_location","external_name":"end_location","restriction":"Crystal::Location"},{"name":"message","external_name":"message","restriction":"String"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Source::Corrector ->)"},"return_type":"Issue","visibility":"Public","body":"add_issue(rule, location, end_location, message, status, block)"}},{"html_id":"add_issue(rule,node:Crystal::ASTNode,message,status:Issue::Status?=nil,block:Source::Corrector->?=nil):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for Crystal AST *node*.","summary":"<p>Adds a new issue for Crystal AST <em>node</em>.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"args_string":"(rule, node : Crystal::ASTNode, message, status : Issue::Status? = nil, block : Source::Corrector -> ? = nil) : Issue","args_html":"(rule, node : Crystal::ASTNode, message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ? = <span class=\"n\">nil</span>) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L33"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"return_type":"Issue","visibility":"Public","body":"add_issue(rule, node.location, node.end_location, message, status, block)"}},{"html_id":"add_issue(rule,location:Tuple(Int32,Int32),message,status:Issue::Status?=nil,&block:Source::Corrector->):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for *location* defined by line and column numbers.","summary":"<p>Adds a new issue for <em>location</em> defined by line and column numbers.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"args_string":"(rule, location : Tuple(Int32, Int32), message, status : Issue::Status? = nil, &block : Source::Corrector -> ) : Issue","args_html":"(rule, location : Tuple(Int32, Int32), message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, &block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":61,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L61"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Source::Corrector ->)"},"return_type":"Issue","visibility":"Public","body":"add_issue(rule, location, message, status, block)"}},{"html_id":"add_issue(rule,node:Crystal::ASTNode,message,status:Issue::Status?=nil,&block:Source::Corrector->):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for Crystal AST *node*.","summary":"<p>Adds a new issue for Crystal AST <em>node</em>.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"args_string":"(rule, node : Crystal::ASTNode, message, status : Issue::Status? = nil, &block : Source::Corrector -> ) : Issue","args_html":"(rule, node : Crystal::ASTNode, message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, &block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L38"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Source::Corrector ->)"},"return_type":"Issue","visibility":"Public","body":"add_issue(rule, node, message, status, block)"}},{"html_id":"add_issue(rule,token:Crystal::Token,message,status:Issue::Status?=nil,block:Source::Corrector->?=nil):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for Crystal *token*.","summary":"<p>Adds a new issue for Crystal <em>token</em>.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"token","external_name":"token","restriction":"Crystal::Token"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"args_string":"(rule, token : Crystal::Token, message, status : Issue::Status? = nil, block : Source::Corrector -> ? = nil) : Issue","args_html":"(rule, token : Crystal::Token, message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ? = <span class=\"n\">nil</span>) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":43,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L43"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"token","external_name":"token","restriction":"Crystal::Token"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"return_type":"Issue","visibility":"Public","body":"add_issue(rule, token.location, nil, message, status, block)"}},{"html_id":"add_issue(rule,token:Crystal::Token,message,status:Issue::Status?=nil,&block:Source::Corrector->):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for Crystal *token*.","summary":"<p>Adds a new issue for Crystal <em>token</em>.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"token","external_name":"token","restriction":"Crystal::Token"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"args_string":"(rule, token : Crystal::Token, message, status : Issue::Status? = nil, &block : Source::Corrector -> ) : Issue","args_html":"(rule, token : Crystal::Token, message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, &block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":48,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L48"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"token","external_name":"token","restriction":"Crystal::Token"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Source::Corrector ->)"},"return_type":"Issue","visibility":"Public","body":"add_issue(rule, token, message, status, block)"}},{"html_id":"add_issue(rule,location:Tuple(Int32,Int32),message,status:Issue::Status?=nil,block:Source::Corrector->?=nil):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for *location* defined by line and column numbers.","summary":"<p>Adds a new issue for <em>location</em> defined by line and column numbers.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"args_string":"(rule, location : Tuple(Int32, Int32), message, status : Issue::Status? = nil, block : Source::Corrector -> ? = nil) : Issue","args_html":"(rule, location : Tuple(Int32, Int32), message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ? = <span class=\"n\">nil</span>) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":53,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L53"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"return_type":"Issue","visibility":"Public","body":"location = Crystal::Location.new(path, *location)\nadd_issue(rule, location, nil, message, status, block)\n"}},{"html_id":"add_issue(rule,location:Tuple(Int32,Int32),end_location:Tuple(Int32,Int32),message,status:Issue::Status?=nil,block:Source::Corrector->?=nil):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for *location* and *end_location* defined by line and column numbers.","summary":"<p>Adds a new issue for <em>location</em> and <em>end_location</em> defined by line and column numbers.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"end_location","external_name":"end_location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"args_string":"(rule, location : Tuple(Int32, Int32), end_location : Tuple(Int32, Int32), message, status : Issue::Status? = nil, block : Source::Corrector -> ? = nil) : Issue","args_html":"(rule, location : Tuple(Int32, Int32), end_location : Tuple(Int32, Int32), message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ? = <span class=\"n\">nil</span>) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":66,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L66"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"end_location","external_name":"end_location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(Source::Corrector ->) | ::Nil"}],"return_type":"Issue","visibility":"Public","body":"location = Crystal::Location.new(path, *location)\nend_location = Crystal::Location.new(path, *end_location)\nadd_issue(rule, location, end_location, message, status, block)\n"}},{"html_id":"add_issue(rule,location:Tuple(Int32,Int32),end_location:Tuple(Int32,Int32),message,status:Issue::Status?=nil,&block:Source::Corrector->):Issue-instance-method","name":"add_issue","doc":"Adds a new issue for *location* and *end_location* defined by line and column numbers.","summary":"<p>Adds a new issue for <em>location</em> and <em>end_location</em> defined by line and column numbers.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"end_location","external_name":"end_location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"args_string":"(rule, location : Tuple(Int32, Int32), end_location : Tuple(Int32, Int32), message, status : Issue::Status? = nil, &block : Source::Corrector -> ) : Issue","args_html":"(rule, location : Tuple(Int32, Int32), end_location : Tuple(Int32, Int32), message, status : <a href=\"../Ameba/Issue/Status.html\">Issue::Status</a>? = <span class=\"n\">nil</span>, &block : <a href=\"../Ameba/Source/Corrector.html\">Source::Corrector</a> -> ) : <a href=\"../Ameba/Issue.html\">Issue</a>","location":{"filename":"src/ameba/reportable.cr","line_number":81,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L81"},"def":{"name":"add_issue","args":[{"name":"rule","external_name":"rule","restriction":""},{"name":"location","external_name":"location","restriction":"::Tuple(Int32, Int32)"},{"name":"end_location","external_name":"end_location","restriction":"::Tuple(Int32, Int32)"},{"name":"message","external_name":"message","restriction":""},{"name":"status","default_value":"nil","external_name":"status","restriction":"Issue::Status | ::Nil"}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Source::Corrector ->)"},"return_type":"Issue","visibility":"Public","body":"add_issue(rule, location, end_location, message, status, block)"}},{"html_id":"issues-instance-method","name":"issues","doc":"List of reported issues.","summary":"<p>List of reported issues.</p>","abstract":false,"location":{"filename":"src/ameba/reportable.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L5"},"def":{"name":"issues","visibility":"Public","body":"@issues"}},{"html_id":"valid?-instance-method","name":"valid?","doc":"Returns `true` if the list of not disabled issues is empty, `false` otherwise.","summary":"<p>Returns <code>true</code> if the list of not disabled issues is empty, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/ameba/reportable.cr","line_number":91,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/reportable.cr#L91"},"def":{"name":"valid?","visibility":"Public","body":"issues.none?(&.enabled?)"}}]},{"html_id":"ameba/Ameba/Rule","path":"Ameba/Rule.html","kind":"module","full_name":"Ameba::Rule","name":"Rule","abstract":false,"locations":[{"filename":"src/ameba/rule/base.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"SPECIAL","name":"SPECIAL","value":"[Lint::Syntax.rule_name, Lint::UnneededDisableDirective.rule_name]","doc":"List of names of the special rules, which\nbehave differently than usual rules.","summary":"<p>List of names of the special rules, which behave differently than usual rules.</p>"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"class_methods":[{"html_id":"rules-class-method","name":"rules","doc":"Returns a list of all available rules.\n\n```\nAmeba::Rule.rules # => [Rule1, Rule2, ....]\n```","summary":"<p>Returns a list of all available rules.</p>","abstract":false,"location":{"filename":"src/ameba/rule/base.cr","line_number":172,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L172"},"def":{"name":"rules","visibility":"Public","body":"Base.inherited_rules"}}],"types":[{"html_id":"ameba/Ameba/Rule/Base","path":"Ameba/Rule/Base.html","kind":"class","full_name":"Ameba::Rule::Base","name":"Base","abstract":true,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/base.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L29"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"}],"subclasses":[{"html_id":"ameba/Ameba/Rule/Layout/LineLength","kind":"class","full_name":"Ameba::Rule::Layout::LineLength","name":"LineLength"},{"html_id":"ameba/Ameba/Rule/Layout/TrailingBlankLines","kind":"class","full_name":"Ameba::Rule::Layout::TrailingBlankLines","name":"TrailingBlankLines"},{"html_id":"ameba/Ameba/Rule/Layout/TrailingWhitespace","kind":"class","full_name":"Ameba::Rule::Layout::TrailingWhitespace","name":"TrailingWhitespace"},{"html_id":"ameba/Ameba/Rule/Lint/AmbiguousAssignment","kind":"class","full_name":"Ameba::Rule::Lint::AmbiguousAssignment","name":"AmbiguousAssignment"},{"html_id":"ameba/Ameba/Rule/Lint/BadDirective","kind":"class","full_name":"Ameba::Rule::Lint::BadDirective","name":"BadDirective"},{"html_id":"ameba/Ameba/Rule/Lint/ComparisonToBoolean","kind":"class","full_name":"Ameba::Rule::Lint::ComparisonToBoolean","name":"ComparisonToBoolean"},{"html_id":"ameba/Ameba/Rule/Lint/DebugCalls","kind":"class","full_name":"Ameba::Rule::Lint::DebugCalls","name":"DebugCalls"},{"html_id":"ameba/Ameba/Rule/Lint/DebuggerStatement","kind":"class","full_name":"Ameba::Rule::Lint::DebuggerStatement","name":"DebuggerStatement"},{"html_id":"ameba/Ameba/Rule/Lint/DuplicatedRequire","kind":"class","full_name":"Ameba::Rule::Lint::DuplicatedRequire","name":"DuplicatedRequire"},{"html_id":"ameba/Ameba/Rule/Lint/EmptyEnsure","kind":"class","full_name":"Ameba::Rule::Lint::EmptyEnsure","name":"EmptyEnsure"},{"html_id":"ameba/Ameba/Rule/Lint/EmptyExpression","kind":"class","full_name":"Ameba::Rule::Lint::EmptyExpression","name":"EmptyExpression"},{"html_id":"ameba/Ameba/Rule/Lint/EmptyLoop","kind":"class","full_name":"Ameba::Rule::Lint::EmptyLoop","name":"EmptyLoop"},{"html_id":"ameba/Ameba/Rule/Lint/HashDuplicatedKey","kind":"class","full_name":"Ameba::Rule::Lint::HashDuplicatedKey","name":"HashDuplicatedKey"},{"html_id":"ameba/Ameba/Rule/Lint/LiteralInCondition","kind":"class","full_name":"Ameba::Rule::Lint::LiteralInCondition","name":"LiteralInCondition"},{"html_id":"ameba/Ameba/Rule/Lint/LiteralInInterpolation","kind":"class","full_name":"Ameba::Rule::Lint::LiteralInInterpolation","name":"LiteralInInterpolation"},{"html_id":"ameba/Ameba/Rule/Lint/LiteralsComparison","kind":"class","full_name":"Ameba::Rule::Lint::LiteralsComparison","name":"LiteralsComparison"},{"html_id":"ameba/Ameba/Rule/Lint/NotNil","kind":"class","full_name":"Ameba::Rule::Lint::NotNil","name":"NotNil"},{"html_id":"ameba/Ameba/Rule/Lint/NotNilAfterNoBang","kind":"class","full_name":"Ameba::Rule::Lint::NotNilAfterNoBang","name":"NotNilAfterNoBang"},{"html_id":"ameba/Ameba/Rule/Lint/PercentArrays","kind":"class","full_name":"Ameba::Rule::Lint::PercentArrays","name":"PercentArrays"},{"html_id":"ameba/Ameba/Rule/Lint/RandZero","kind":"class","full_name":"Ameba::Rule::Lint::RandZero","name":"RandZero"},{"html_id":"ameba/Ameba/Rule/Lint/RedundantStringCoercion","kind":"class","full_name":"Ameba::Rule::Lint::RedundantStringCoercion","name":"RedundantStringCoercion"},{"html_id":"ameba/Ameba/Rule/Lint/RedundantWithIndex","kind":"class","full_name":"Ameba::Rule::Lint::RedundantWithIndex","name":"RedundantWithIndex"},{"html_id":"ameba/Ameba/Rule/Lint/RedundantWithObject","kind":"class","full_name":"Ameba::Rule::Lint::RedundantWithObject","name":"RedundantWithObject"},{"html_id":"ameba/Ameba/Rule/Lint/ShadowedArgument","kind":"class","full_name":"Ameba::Rule::Lint::ShadowedArgument","name":"ShadowedArgument"},{"html_id":"ameba/Ameba/Rule/Lint/ShadowedException","kind":"class","full_name":"Ameba::Rule::Lint::ShadowedException","name":"ShadowedException"},{"html_id":"ameba/Ameba/Rule/Lint/ShadowingOuterLocalVar","kind":"class","full_name":"Ameba::Rule::Lint::ShadowingOuterLocalVar","name":"ShadowingOuterLocalVar"},{"html_id":"ameba/Ameba/Rule/Lint/SharedVarInFiber","kind":"class","full_name":"Ameba::Rule::Lint::SharedVarInFiber","name":"SharedVarInFiber"},{"html_id":"ameba/Ameba/Rule/Lint/SpecFocus","kind":"class","full_name":"Ameba::Rule::Lint::SpecFocus","name":"SpecFocus"},{"html_id":"ameba/Ameba/Rule/Lint/Syntax","kind":"class","full_name":"Ameba::Rule::Lint::Syntax","name":"Syntax"},{"html_id":"ameba/Ameba/Rule/Lint/UnneededDisableDirective","kind":"class","full_name":"Ameba::Rule::Lint::UnneededDisableDirective","name":"UnneededDisableDirective"},{"html_id":"ameba/Ameba/Rule/Lint/UnreachableCode","kind":"class","full_name":"Ameba::Rule::Lint::UnreachableCode","name":"UnreachableCode"},{"html_id":"ameba/Ameba/Rule/Lint/UnusedArgument","kind":"class","full_name":"Ameba::Rule::Lint::UnusedArgument","name":"UnusedArgument"},{"html_id":"ameba/Ameba/Rule/Lint/UselessAssign","kind":"class","full_name":"Ameba::Rule::Lint::UselessAssign","name":"UselessAssign"},{"html_id":"ameba/Ameba/Rule/Lint/UselessConditionInWhen","kind":"class","full_name":"Ameba::Rule::Lint::UselessConditionInWhen","name":"UselessConditionInWhen"},{"html_id":"ameba/Ameba/Rule/Metrics/CyclomaticComplexity","kind":"class","full_name":"Ameba::Rule::Metrics::CyclomaticComplexity","name":"CyclomaticComplexity"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/Ameba/Rule/Style/ConstantNames","kind":"class","full_name":"Ameba::Rule::Style::ConstantNames","name":"ConstantNames"},{"html_id":"ameba/Ameba/Rule/Style/GuardClause","kind":"class","full_name":"Ameba::Rule::Style::GuardClause","name":"GuardClause"},{"html_id":"ameba/Ameba/Rule/Style/IsAFilter","kind":"class","full_name":"Ameba::Rule::Style::IsAFilter","name":"IsAFilter"},{"html_id":"ameba/Ameba/Rule/Style/IsANil","kind":"class","full_name":"Ameba::Rule::Style::IsANil","name":"IsANil"},{"html_id":"ameba/Ameba/Rule/Style/LargeNumbers","kind":"class","full_name":"Ameba::Rule::Style::LargeNumbers","name":"LargeNumbers"},{"html_id":"ameba/Ameba/Rule/Style/MethodNames","kind":"class","full_name":"Ameba::Rule::Style::MethodNames","name":"MethodNames"},{"html_id":"ameba/Ameba/Rule/Style/NegatedConditionsInUnless","kind":"class","full_name":"Ameba::Rule::Style::NegatedConditionsInUnless","name":"NegatedConditionsInUnless"},{"html_id":"ameba/Ameba/Rule/Style/PredicateName","kind":"class","full_name":"Ameba::Rule::Style::PredicateName","name":"PredicateName"},{"html_id":"ameba/Ameba/Rule/Style/RedundantBegin","kind":"class","full_name":"Ameba::Rule::Style::RedundantBegin","name":"RedundantBegin"},{"html_id":"ameba/Ameba/Rule/Style/RedundantNext","kind":"class","full_name":"Ameba::Rule::Style::RedundantNext","name":"RedundantNext"},{"html_id":"ameba/Ameba/Rule/Style/RedundantReturn","kind":"class","full_name":"Ameba::Rule::Style::RedundantReturn","name":"RedundantReturn"},{"html_id":"ameba/Ameba/Rule/Style/TypeNames","kind":"class","full_name":"Ameba::Rule::Style::TypeNames","name":"TypeNames"},{"html_id":"ameba/Ameba/Rule/Style/UnlessElse","kind":"class","full_name":"Ameba::Rule::Style::UnlessElse","name":"UnlessElse"},{"html_id":"ameba/Ameba/Rule/Style/VariableNames","kind":"class","full_name":"Ameba::Rule::Style::VariableNames","name":"VariableNames"},{"html_id":"ameba/Ameba/Rule/Style/VerboseBlock","kind":"class","full_name":"Ameba::Rule::Style::VerboseBlock","name":"VerboseBlock"},{"html_id":"ameba/Ameba/Rule/Style/WhileTrue","kind":"class","full_name":"Ameba::Rule::Style::WhileTrue","name":"WhileTrue"}],"namespace":{"html_id":"ameba/Ameba/Rule","kind":"module","full_name":"Ameba::Rule","name":"Rule"},"doc":"Represents a base of all rules. In other words, all rules\ninherits from this struct:\n\n```\nclass MyRule < Ameba::Rule::Base\n  def test(source)\n    if invalid?(source)\n      issue_for line, column, \"Something wrong.\"\n    end\n  end\n\n  private def invalid?(source)\n    # ...\n  end\nend\n```\n\nEnforces rules to implement an abstract `#test` method which\nis designed to test the source passed in. If source has issues\nthat are tested by this rule, it should add an issue.","summary":"<p>Represents a base of all rules.</p>","instance_methods":[{"html_id":"==(other)-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/ameba/rule/base.cr","line_number":107,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L107"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"name == other.try(&.name)"}},{"html_id":"catch(source:Source)-instance-method","name":"catch","doc":"A convenient addition to `#test` method that does the same\nbut returns a passed in `source` as an addition.\n\n```\nsource = MyRule.new.catch(source)\nsource.valid?\n```","summary":"<p>A convenient addition to <code><a href=\"../../Ameba/Rule/Base.html#test%28source%3ASource%2Cnode%3ACrystal%3A%3AASTNode%2C%2Aopts%29-instance-method\">#test</a></code> method that does the same but returns a passed in <code>source</code> as an addition.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/rule/base.cr","line_number":52,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L52"},"def":{"name":"catch","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":"source.tap do\n  test(source)\nend"}},{"html_id":"excluded?(source)-instance-method","name":"excluded?","doc":"Checks whether the source is excluded from this rule.\nIt searches for a path in `excluded` property which matches\nthe one of the given source.\n\n```\nmy_rule.excluded?(source) # => true or false\n```","summary":"<p>Checks whether the source is excluded from this rule.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/base.cr","line_number":90,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L90"},"def":{"name":"excluded?","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"excluded.try(&.any? do |path|\n  (source.matches_path?(path)) || (Dir.glob(path)).any? do |glob|\n    source.matches_path?(glob)\n  end\nend)"}},{"html_id":"group-instance-method","name":"group","doc":"Returns a group this rule belong to.\n\n```\nclass MyGroup::MyRule < Ameba::Rule::Base\n  # ...\nend\n\nMyGroup::MyRule.new.group # => \"MyGroup\"\n```","summary":"<p>Returns a group this rule belong to.</p>","abstract":false,"location":{"filename":"src/ameba/rule/base.cr","line_number":79,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L79"},"def":{"name":"group","visibility":"Public","body":"({{ @type }}).group_name"}},{"html_id":"hash-instance-method","name":"hash","doc":"Generates an `UInt64` hash value for this object.\n\nThis method must have the property that `a == b` implies `a.hash == b.hash`.\n\nThe hash value is used along with `==` by the `Hash` class to determine if two objects\nreference the same hash key.\n\nSubclasses must not override this method. Instead, they must define `hash(hasher)`,\nthough usually the macro `def_hash` can be used to generate this method.","summary":"<p>Generates an <code>UInt64</code> hash value for this object.</p>","abstract":false,"location":{"filename":"src/ameba/rule/base.cr","line_number":111,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L111"},"def":{"name":"hash","visibility":"Public","body":"name.hash"}},{"html_id":"name-instance-method","name":"name","doc":"Returns a name of this rule, which is basically a class name.\n\n```\nclass MyRule < Ameba::Rule::Base\n  def test(source)\n  end\nend\n\nMyRule.new.name # => \"MyRule\"\n```","summary":"<p>Returns a name of this rule, which is basically a class name.</p>","abstract":false,"location":{"filename":"src/ameba/rule/base.cr","line_number":66,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L66"},"def":{"name":"name","visibility":"Public","body":"({{ @type }}).rule_name"}},{"html_id":"special?-instance-method","name":"special?","doc":"Returns true if this rule is special and behaves differently than\nusual rules.\n\n```\nmy_rule.special? # => true or false\n```","summary":"<p>Returns true if this rule is special and behaves differently than usual rules.</p>","abstract":false,"location":{"filename":"src/ameba/rule/base.cr","line_number":103,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L103"},"def":{"name":"special?","visibility":"Public","body":"name.in?(SPECIAL)"}},{"html_id":"test(source:Source,node:Crystal::ASTNode,*opts)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"},{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"opts","external_name":"opts","restriction":""}],"args_string":"(source : Source, node : Crystal::ASTNode, *opts)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>, node : Crystal::ASTNode, *opts)","location":{"filename":"src/ameba/rule/base.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L41"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":"Source"},{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"opts","external_name":"opts","restriction":""}],"splat_index":2,"visibility":"Public","body":""}},{"html_id":"test(source:Source)-instance-method","name":"test","doc":"This method is designed to test the source passed in. If source has issues\nthat are tested by this rule, it should add an issue.\n\nBe default it uses a node visitor to traverse all the nodes in the source.\nNOTE: Must be overridden for other type of rules.","summary":"<p>This method is designed to test the source passed in.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/rule/base.cr","line_number":37,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L37"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source)"}}],"macros":[{"html_id":"issue_for(*args,**kwargs,&block)-macro","name":"issue_for","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs, &block)","args_html":"(*args, **kwargs, &block)","location":{"filename":"src/ameba/rule/base.cr","line_number":115,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/base.cr#L115"},"def":{"name":"issue_for","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"      source.add_issue(self, \n{{ *args }}\n, \n{{ **kwargs }}\n) \n{{ block }}\n\n    \n"}}]},{"html_id":"ameba/Ameba/Rule/Layout","path":"Ameba/Rule/Layout.html","kind":"module","full_name":"Ameba::Rule::Layout","name":"Layout","abstract":false,"locations":[{"filename":"src/ameba/rule/layout/line_length.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/line_length.cr#L1"},{"filename":"src/ameba/rule/layout/trailing_blank_lines.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_blank_lines.cr#L1"},{"filename":"src/ameba/rule/layout/trailing_whitespace.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_whitespace.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Rule","kind":"module","full_name":"Ameba::Rule","name":"Rule"},"types":[{"html_id":"ameba/Ameba/Rule/Layout/LineLength","path":"Ameba/Rule/Layout/LineLength.html","kind":"class","full_name":"Ameba::Rule::Layout::LineLength","name":"LineLength","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/layout/line_length.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/line_length.cr#L11"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Line too long\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Layout","kind":"module","full_name":"Ameba::Rule::Layout","name":"Layout"},"doc":"A rule that disallows lines longer than `max_length` number of symbols.\n\nYAML configuration example:\n\n```\nLayout/LineLength:\n  Enabled: true\n  MaxLength: 100\n```","summary":"<p>A rule that disallows lines longer than <code><a href=\"../../../Ameba/Rule/Layout/LineLength.html#max_length%3AInt32-instance-method\">#max_length</a></code> number of symbols.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows lines longer than `max_length` number of symbols.\n\nYAML configuration example:\n\n```\nLayout/LineLength:\n  Enabled: true\n  MaxLength: 100\n```","summary":"<p>A rule that disallows lines longer than <code><a href=\"../../../Ameba/Rule/Layout/LineLength.html#max_length%3AInt32-instance-method\">#max_length</a></code> number of symbols.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/layout/line_length.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/line_length.cr#L11"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","return_type":"Bool","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"max_length:Int32-instance-method","name":"max_length","abstract":false,"def":{"name":"max_length","return_type":"Int32","visibility":"Public","body":"@max_length"}},{"html_id":"max_length=(max_length:Int32)-instance-method","name":"max_length=","abstract":false,"args":[{"name":"max_length","external_name":"max_length","restriction":"Int32"}],"args_string":"(max_length : Int32)","args_html":"(max_length : Int32)","def":{"name":"max_length=","args":[{"name":"max_length","external_name":"max_length","restriction":"Int32"}],"visibility":"Public","body":"@max_length = max_length"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/layout/line_length.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/line_length.cr#L20"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"source.lines.each_with_index do |line, index|\n  if line.size > max_length\n    issue_for({index + 1, max_length + 1}, MSG)\n  end\nend"}}]},{"html_id":"ameba/Ameba/Rule/Layout/TrailingBlankLines","path":"Ameba/Rule/Layout/TrailingBlankLines.html","kind":"class","full_name":"Ameba::Rule::Layout::TrailingBlankLines","name":"TrailingBlankLines","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/layout/trailing_blank_lines.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_blank_lines.cr#L10"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Excessive trailing newline detected\""},{"id":"MSG_FINAL_NEWLINE","name":"MSG_FINAL_NEWLINE","value":"\"Trailing newline missing\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Layout","kind":"module","full_name":"Ameba::Rule::Layout","name":"Layout"},"doc":"A rule that disallows trailing blank lines at the end of the source file.\n\nYAML configuration example:\n\n```\nLayout/TrailingBlankLines:\n  Enabled: true\n```","summary":"<p>A rule that disallows trailing blank lines at the end of the source file.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows trailing blank lines at the end of the source file.\n\nYAML configuration example:\n\n```\nLayout/TrailingBlankLines:\n  Enabled: true\n```","summary":"<p>A rule that disallows trailing blank lines at the end of the source file.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/layout/trailing_blank_lines.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_blank_lines.cr#L10"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/layout/trailing_blank_lines.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_blank_lines.cr#L18"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"source_lines = source.lines\nif source_lines.empty?\n  return\nend\nlast_source_line = source_lines.last\nsource_lines_size = source_lines.size\nif (source_lines_size == 1) && last_source_line.empty?\n  return\nend\nlast_line_empty = last_source_line.empty?\nif source_lines_size.zero? || ((source_lines.last(2)).join.presence && last_line_empty)\n  return\nend\nif last_line_empty\n  issue_for({source_lines_size, 1}, MSG)\nelse\n  issue_for({source_lines_size, 1}, MSG_FINAL_NEWLINE) do |corrector|\n    corrector.insert_before({source_lines_size + 1, 1}, '\\n')\n  end\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Layout/TrailingWhitespace","path":"Ameba/Rule/Layout/TrailingWhitespace.html","kind":"class","full_name":"Ameba::Rule::Layout::TrailingWhitespace","name":"TrailingWhitespace","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/layout/trailing_whitespace.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_whitespace.cr#L10"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Trailing whitespace detected\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Layout","kind":"module","full_name":"Ameba::Rule::Layout","name":"Layout"},"doc":"A rule that disallows trailing whitespace.\n\nYAML configuration example:\n\n```\nLayout/TrailingWhitespace:\n  Enabled: true\n```","summary":"<p>A rule that disallows trailing whitespace.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows trailing whitespace.\n\nYAML configuration example:\n\n```\nLayout/TrailingWhitespace:\n  Enabled: true\n```","summary":"<p>A rule that disallows trailing whitespace.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/layout/trailing_whitespace.cr","line_number":10,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_whitespace.cr#L10"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/layout/trailing_whitespace.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/layout/trailing_whitespace.cr#L17"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"source.lines.each_with_index do |line, index|\n  if ws_index = line =~ (/\\s+$/)\n  else\n    next\n  end\n  location = {index + 1, ws_index + 1}\n  end_location = {index + 1, line.size}\n  issue_for(location, end_location, MSG) do |corrector|\n    corrector.remove(location, end_location)\n  end\nend"}}]}]},{"html_id":"ameba/Ameba/Rule/Lint","path":"Ameba/Rule/Lint.html","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint","abstract":false,"locations":[{"filename":"src/ameba/rule/lint/ambiguous_assignment.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/ambiguous_assignment.cr#L1"},{"filename":"src/ameba/rule/lint/bad_directive.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/bad_directive.cr#L1"},{"filename":"src/ameba/rule/lint/comparison_to_boolean.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/comparison_to_boolean.cr#L1"},{"filename":"src/ameba/rule/lint/debug_calls.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debug_calls.cr#L1"},{"filename":"src/ameba/rule/lint/debugger_statement.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debugger_statement.cr#L1"},{"filename":"src/ameba/rule/lint/duplicated_require.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/duplicated_require.cr#L1"},{"filename":"src/ameba/rule/lint/empty_ensure.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_ensure.cr#L1"},{"filename":"src/ameba/rule/lint/empty_expression.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_expression.cr#L1"},{"filename":"src/ameba/rule/lint/empty_loop.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_loop.cr#L1"},{"filename":"src/ameba/rule/lint/hash_duplicated_key.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/hash_duplicated_key.cr#L1"},{"filename":"src/ameba/rule/lint/literal_in_condition.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_condition.cr#L1"},{"filename":"src/ameba/rule/lint/literal_in_interpolation.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_interpolation.cr#L1"},{"filename":"src/ameba/rule/lint/literals_comparison.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literals_comparison.cr#L1"},{"filename":"src/ameba/rule/lint/not_nil.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil.cr#L1"},{"filename":"src/ameba/rule/lint/not_nil_after_no_bang.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil_after_no_bang.cr#L1"},{"filename":"src/ameba/rule/lint/percent_array.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/percent_array.cr#L1"},{"filename":"src/ameba/rule/lint/rand_zero.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/rand_zero.cr#L1"},{"filename":"src/ameba/rule/lint/redundant_string_coercion.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_string_coercion.cr#L1"},{"filename":"src/ameba/rule/lint/redundant_with_index.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_index.cr#L1"},{"filename":"src/ameba/rule/lint/redundant_with_object.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_object.cr#L1"},{"filename":"src/ameba/rule/lint/shadowed_argument.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_argument.cr#L1"},{"filename":"src/ameba/rule/lint/shadowed_exception.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_exception.cr#L1"},{"filename":"src/ameba/rule/lint/shadowing_outer_local_var.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowing_outer_local_var.cr#L1"},{"filename":"src/ameba/rule/lint/shared_var_in_fiber.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shared_var_in_fiber.cr#L1"},{"filename":"src/ameba/rule/lint/spec_focus.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/spec_focus.cr#L1"},{"filename":"src/ameba/rule/lint/syntax.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/syntax.cr#L1"},{"filename":"src/ameba/rule/lint/unneeded_disable_directive.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unneeded_disable_directive.cr#L1"},{"filename":"src/ameba/rule/lint/unreachable_code.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unreachable_code.cr#L1"},{"filename":"src/ameba/rule/lint/unused_argument.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unused_argument.cr#L1"},{"filename":"src/ameba/rule/lint/useless_assign.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_assign.cr#L1"},{"filename":"src/ameba/rule/lint/useless_condition_in_when.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_condition_in_when.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Rule","kind":"module","full_name":"Ameba::Rule","name":"Rule"},"types":[{"html_id":"ameba/Ameba/Rule/Lint/AmbiguousAssignment","path":"Ameba/Rule/Lint/AmbiguousAssignment.html","kind":"class","full_name":"Ameba::Rule::Lint::AmbiguousAssignment","name":"AmbiguousAssignment","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/ambiguous_assignment.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/ambiguous_assignment.cr#L20"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MISTAKES","name":"MISTAKES","value":"{\"=-\" => \"-=\", \"=+\" => \"+=\", \"=!\" => \"!=\"}"},{"id":"MSG","name":"MSG","value":"\"Suspicious assignment detected. Did you mean `%s`?\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"This rule checks for mistyped shorthand assignments.\n\n    # bad\n    x =- y\n    x =+ y\n    x =! y\n\n    # good\n    x -= y # or x = -y\n    x += y # or x = +y\n    x != y # or x = !y\n\nYAML configuration example:\n\n```\nLint/AmbiguousAssignment:\n  Enabled: true\n```","summary":"<p>This rule checks for mistyped shorthand assignments.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule checks for mistyped shorthand assignments.\n\n    # bad\n    x =- y\n    x =+ y\n    x =! y\n\n    # good\n    x -= y # or x = -y\n    x += y # or x = +y\n    x != y # or x = !y\n\nYAML configuration example:\n\n```\nLint/AmbiguousAssignment:\n  Enabled: true\n```","summary":"<p>This rule checks for mistyped shorthand assignments.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/ambiguous_assignment.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/ambiguous_assignment.cr#L20"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Assign)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Assign"}],"args_string":"(source, node : Crystal::Assign)","args_html":"(source, node : Crystal::Assign)","location":{"filename":"src/ameba/rule/lint/ambiguous_assignment.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/ambiguous_assignment.cr#L35"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Assign"}],"visibility":"Public","body":"if op_end_location = node.value.location\nelse\n  return\nend\nop_location = Crystal::Location.new(op_end_location.filename, op_end_location.line_number, op_end_location.column_number - 1)\nop_text = source_between(op_location, op_end_location, source.lines)\nif op_text\nelse\n  return\nend\nif MISTAKES.has_key?(op_text)\nelse\n  return\nend\nissue_for(op_location, op_end_location, MSG % MISTAKES[op_text])\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/BadDirective","path":"Ameba/Rule/Lint/BadDirective.html","kind":"class","full_name":"Ameba::Rule::Lint::BadDirective","name":"BadDirective","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/bad_directive.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/bad_directive.cr#L20"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALL_GROUP_NAMES","name":"ALL_GROUP_NAMES","value":"Rule.rules.map(&.group_name).uniq!"},{"id":"ALL_RULE_NAMES","name":"ALL_RULE_NAMES","value":"Rule.rules.map(&.rule_name)"},{"id":"AVAILABLE_ACTIONS","name":"AVAILABLE_ACTIONS","value":"InlineComments::Action.names.map(&.downcase)"}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that reports incorrect comment directives for Ameba.\n\nFor example, the user can mistakenly add a directive\nto disable a rule that even doesn't exist:\n\n```\n# ameba:disable BadRuleName\ndef foo\n  :bar\nend\n```\n\nYAML configuration example:\n\n```\nLint/BadDirective:\n  Enabled: true\n```","summary":"<p>A rule that reports incorrect comment directives for Ameba.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that reports incorrect comment directives for Ameba.\n\nFor example, the user can mistakenly add a directive\nto disable a rule that even doesn't exist:\n\n```\n# ameba:disable BadRuleName\ndef foo\n  :bar\nend\n```\n\nYAML configuration example:\n\n```\nLint/BadDirective:\n  Enabled: true\n```","summary":"<p>A rule that reports incorrect comment directives for Ameba.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/bad_directive.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/bad_directive.cr#L20"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/bad_directive.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/bad_directive.cr#L29"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"(Tokenizer.new(source)).run do |token|\n  if token.type.comment?\n  else\n    next\n  end\n  if directive = source.parse_inline_directive(token.value.to_s)\n  else\n    next\n  end\n  check_action(source, token, directive[:action])\n  check_rules(source, token, directive[:rules])\nend"}}]},{"html_id":"ameba/Ameba/Rule/Lint/ComparisonToBoolean","path":"Ameba/Rule/Lint/ComparisonToBoolean.html","kind":"class","full_name":"Ameba::Rule::Lint::ComparisonToBoolean","name":"ComparisonToBoolean","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/comparison_to_boolean.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/comparison_to_boolean.cr#L22"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Comparison to a boolean is pointless\""},{"id":"OP_NAMES","name":"OP_NAMES","value":"[\"==\", \"!=\", \"===\"] of ::String"}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows comparison to booleans.\n\nFor example, these are considered invalid:\n\n```\nfoo == true\nbar != false\nfalse === baz\n```\n\nThis is because these expressions evaluate to `true` or `false`, so you\ncould get the same result by using either the variable directly,\nor negating the variable.\n\nYAML configuration example:\n\n```\nLint/ComparisonToBoolean:\n  Enabled: true\n```","summary":"<p>A rule that disallows comparison to booleans.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows comparison to booleans.\n\nFor example, these are considered invalid:\n\n```\nfoo == true\nbar != false\nfalse === baz\n```\n\nThis is because these expressions evaluate to `true` or `false`, so you\ncould get the same result by using either the variable directly,\nor negating the variable.\n\nYAML configuration example:\n\n```\nLint/ComparisonToBoolean:\n  Enabled: true\n```","summary":"<p>A rule that disallows comparison to booleans.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/comparison_to_boolean.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/comparison_to_boolean.cr#L22"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","return_type":"Bool","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/comparison_to_boolean.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/comparison_to_boolean.cr#L33"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if node.name.in?(OP_NAMES)\nelse\n  return\nend\nif node.args.size == 1\nelse\n  return\nend\narg, obj = node.args.first, node.obj\ncase\nwhen arg.is_a?(Crystal::BoolLiteral)\n  bool, exp = arg, obj\nwhen obj.is_a?(Crystal::BoolLiteral)\n  bool, exp = obj, arg\nend\nif bool && exp\nelse\n  return\nend\nif exp_code = node_source(exp, source.lines)\nelse\n  return\nend\nnot = case node.name\nwhen \"==\", \"===\"\n  !bool.value\nwhen \"!=\"\n  bool.value\nend\nif not\n  exp_code = \"!#{exp_code}\"\nend\nissue_for(node, MSG) do |corrector|\n  corrector.replace(node, exp_code)\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/DebugCalls","path":"Ameba/Rule/Lint/DebugCalls.html","kind":"class","full_name":"Ameba::Rule::Lint::DebugCalls","name":"DebugCalls","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/debug_calls.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debug_calls.cr#L18"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Possibly forgotten debug-related `%s` call detected\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows calls to debug-related methods.\n\nThis is because we don't want debug calls accidentally being\ncommitted into our codebase.\n\nYAML configuration example:\n\n```\nLint/DebugCalls:\n  Enabled: true\n  MethodNames:\n    - p\n    - p!\n    - pp\n    - pp!\n```","summary":"<p>A rule that disallows calls to debug-related methods.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows calls to debug-related methods.\n\nThis is because we don't want debug calls accidentally being\ncommitted into our codebase.\n\nYAML configuration example:\n\n```\nLint/DebugCalls:\n  Enabled: true\n  MethodNames:\n    - p\n    - p!\n    - pp\n    - pp!\n```","summary":"<p>A rule that disallows calls to debug-related methods.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/debug_calls.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debug_calls.cr#L18"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"method_names:Array(String)-instance-method","name":"method_names","abstract":false,"def":{"name":"method_names","return_type":"Array(String)","visibility":"Public","body":"@method_names"}},{"html_id":"method_names=(method_names:Array(String))-instance-method","name":"method_names=","abstract":false,"args":[{"name":"method_names","external_name":"method_names","restriction":"Array(String)"}],"args_string":"(method_names : Array(String))","args_html":"(method_names : Array(String))","def":{"name":"method_names=","args":[{"name":"method_names","external_name":"method_names","restriction":"Array(String)"}],"visibility":"Public","body":"@method_names = method_names"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/debug_calls.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debug_calls.cr#L26"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name.in?(method_names)) && node.obj.nil?\nelse\n  return\nend\nissue_for(node, MSG % node.name)\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/DebuggerStatement","path":"Ameba/Rule/Lint/DebuggerStatement.html","kind":"class","full_name":"Ameba::Rule::Lint::DebuggerStatement","name":"DebuggerStatement","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/debugger_statement.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debugger_statement.cr#L13"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Possible forgotten debugger statement detected\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows calls to debugger.\n\nThis is because we don't want debugger breakpoints accidentally being\ncommitted into our codebase.\n\nYAML configuration example:\n\n```\nLint/DebuggerStatement:\n  Enabled: true\n```","summary":"<p>A rule that disallows calls to debugger.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows calls to debugger.\n\nThis is because we don't want debugger breakpoints accidentally being\ncommitted into our codebase.\n\nYAML configuration example:\n\n```\nLint/DebuggerStatement:\n  Enabled: true\n```","summary":"<p>A rule that disallows calls to debugger.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/debugger_statement.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debugger_statement.cr#L13"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/debugger_statement.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/debugger_statement.cr#L20"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if ((node.name == \"debugger\") && node.args.empty?) && node.obj.nil?\nelse\n  return\nend\nissue_for(node, MSG)\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/DuplicatedRequire","path":"Ameba/Rule/Lint/DuplicatedRequire.html","kind":"class","full_name":"Ameba::Rule::Lint::DuplicatedRequire","name":"DuplicatedRequire","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/duplicated_require.cr","line_number":16,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/duplicated_require.cr#L16"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Duplicated require of `%s`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that reports duplicated require statements.\n\n```\nrequire \"./thing\"\nrequire \"./stuff\"\nrequire \"./thing\" # duplicated require\n```\n\nYAML configuration example:\n\n```\nLint/DuplicatedRequire:\n  Enabled: true\n```","summary":"<p>A rule that reports duplicated require statements.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that reports duplicated require statements.\n\n```\nrequire \"./thing\"\nrequire \"./stuff\"\nrequire \"./thing\" # duplicated require\n```\n\nYAML configuration example:\n\n```\nLint/DuplicatedRequire:\n  Enabled: true\n```","summary":"<p>A rule that reports duplicated require statements.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/duplicated_require.cr","line_number":16,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/duplicated_require.cr#L16"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/duplicated_require.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/duplicated_require.cr#L23"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"nodes = (AST::TopLevelNodesVisitor.new(source.ast)).require_nodes\nnodes.each_with_object([] of String) do |node, processed_require_strings|\n  if node.string.in?(processed_require_strings)\n    issue_for(node, MSG % node.string)\n  end\n  processed_require_strings << node.string\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/EmptyEnsure","path":"Ameba/Rule/Lint/EmptyEnsure.html","kind":"class","full_name":"Ameba::Rule::Lint::EmptyEnsure","name":"EmptyEnsure","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/empty_ensure.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_ensure.cr#L41"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Empty `ensure` block detected\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows empty ensure statement.\n\nFor example, this is considered invalid:\n\n```\ndef some_method\n  do_some_stuff\nensure\nend\n\nbegin\n  do_some_stuff\nensure\nend\n```\n\nAnd it should be written as this:\n\n\n```\ndef some_method\n  do_some_stuff\nensure\n  do_something_else\nend\n\nbegin\n  do_some_stuff\nensure\n  do_something_else\nend\n```\n\nYAML configuration example:\n\n```\nLint/EmptyEnsure\n  Enabled: true\n```","summary":"<p>A rule that disallows empty ensure statement.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows empty ensure statement.\n\nFor example, this is considered invalid:\n\n```\ndef some_method\n  do_some_stuff\nensure\nend\n\nbegin\n  do_some_stuff\nensure\nend\n```\n\nAnd it should be written as this:\n\n\n```\ndef some_method\n  do_some_stuff\nensure\n  do_something_else\nend\n\nbegin\n  do_some_stuff\nensure\n  do_something_else\nend\n```\n\nYAML configuration example:\n\n```\nLint/EmptyEnsure\n  Enabled: true\n```","summary":"<p>A rule that disallows empty ensure statement.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/empty_ensure.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_ensure.cr#L41"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::ExceptionHandler)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ExceptionHandler"}],"args_string":"(source, node : Crystal::ExceptionHandler)","args_html":"(source, node : Crystal::ExceptionHandler)","location":{"filename":"src/ameba/rule/lint/empty_ensure.cr","line_number":48,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_ensure.cr#L48"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ExceptionHandler"}],"visibility":"Public","body":"node_ensure = node.ensure\nif node_ensure.nil? || (!node_ensure.nop?)\n  return\nend\nissue_for(node.ensure_location, node.end_location, MSG)\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/EmptyExpression","path":"Ameba/Rule/Lint/EmptyExpression.html","kind":"class","full_name":"Ameba::Rule::Lint::EmptyExpression","name":"EmptyExpression","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/empty_expression.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_expression.cr#L30"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Avoid empty expression %s\""},{"id":"MSG_EXRS","name":"MSG_EXRS","value":"\"Avoid empty expressions\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows empty expressions.\n\nThis is considered invalid:\n\n```\nfoo = ()\n\nif ()\n  bar\nend\n```\n\nAnd this is valid:\n\n```\nfoo = (some_expression)\n\nif (some_expression)\n  bar\nend\n```\n\nYAML configuration example:\n\n```\nLint/EmptyExpression:\n  Enabled: true\n```","summary":"<p>A rule that disallows empty expressions.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows empty expressions.\n\nThis is considered invalid:\n\n```\nfoo = ()\n\nif ()\n  bar\nend\n```\n\nAnd this is valid:\n\n```\nfoo = (some_expression)\n\nif (some_expression)\n  bar\nend\n```\n\nYAML configuration example:\n\n```\nLint/EmptyExpression:\n  Enabled: true\n```","summary":"<p>A rule that disallows empty expressions.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/empty_expression.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_expression.cr#L30"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::NilLiteral)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::NilLiteral"}],"args_string":"(source, node : Crystal::NilLiteral)","args_html":"(source, node : Crystal::NilLiteral)","location":{"filename":"src/ameba/rule/lint/empty_expression.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_expression.cr#L40"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::NilLiteral"}],"visibility":"Public","body":"exp = node_source(node, source.lines)\nif exp.in?(nil, \"nil\")\n  return\nend\nissue_for(node, MSG % exp)\n"}},{"html_id":"test(source,node:Crystal::Expressions)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Expressions"}],"args_string":"(source, node : Crystal::Expressions)","args_html":"(source, node : Crystal::Expressions)","location":{"filename":"src/ameba/rule/lint/empty_expression.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_expression.cr#L47"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Expressions"}],"visibility":"Public","body":"if (node.expressions.size == 1) && node.expressions.first.nop?\nelse\n  return\nend\nissue_for(node, MSG_EXRS)\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/EmptyLoop","path":"Ameba/Rule/Lint/EmptyLoop.html","kind":"class","full_name":"Ameba::Rule::Lint::EmptyLoop","name":"EmptyLoop","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/empty_loop.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_loop.cr#L40"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Empty loop detected\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows empty loops.\n\nThis is considered invalid:\n\n```\nwhile false\nend\n\nuntil 10\nend\n\nloop do\n  # nothing here\nend\n```\n\nAnd this is valid:\n\n```\na = 1\nwhile a < 10\n  a += 1\nend\n\nuntil socket_opened?\nend\n\nloop do\n  do_something_here\nend\n```\n\nYAML configuration example:\n\n```\nLint/EmptyLoop:\n  Enabled: true\n```","summary":"<p>A rule that disallows empty loops.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows empty loops.\n\nThis is considered invalid:\n\n```\nwhile false\nend\n\nuntil 10\nend\n\nloop do\n  # nothing here\nend\n```\n\nAnd this is valid:\n\n```\na = 1\nwhile a < 10\n  a += 1\nend\n\nuntil socket_opened?\nend\n\nloop do\n  do_something_here\nend\n```\n\nYAML configuration example:\n\n```\nLint/EmptyLoop:\n  Enabled: true\n```","summary":"<p>A rule that disallows empty loops.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/empty_loop.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_loop.cr#L40"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/empty_loop.cr","line_number":49,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_loop.cr#L49"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if loop?(node)\nelse\n  return\nend\ncheck_node(source, node, node.block)\n"}},{"html_id":"test(source,node:Crystal::While)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::While"}],"args_string":"(source, node : Crystal::While)","args_html":"(source, node : Crystal::While)","location":{"filename":"src/ameba/rule/lint/empty_loop.cr","line_number":55,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_loop.cr#L55"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::While"}],"visibility":"Public","body":"if literal?(node.cond)\n  check_node(source, node, node.body)\nend"}},{"html_id":"test(source,node:Crystal::Until)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Until"}],"args_string":"(source, node : Crystal::Until)","args_html":"(source, node : Crystal::Until)","location":{"filename":"src/ameba/rule/lint/empty_loop.cr","line_number":59,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/empty_loop.cr#L59"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Until"}],"visibility":"Public","body":"if literal?(node.cond)\n  check_node(source, node, node.body)\nend"}}]},{"html_id":"ameba/Ameba/Rule/Lint/HashDuplicatedKey","path":"Ameba/Rule/Lint/HashDuplicatedKey.html","kind":"class","full_name":"Ameba::Rule::Lint::HashDuplicatedKey","name":"HashDuplicatedKey","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/hash_duplicated_key.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/hash_duplicated_key.cr#L22"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Duplicated keys in hash literal: %s\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows duplicated keys in hash literals.\n\nThis is considered invalid:\n\n```\nh = {\"foo\" => 1, \"bar\" => 2, \"foo\" => 3}\n```\n\nAnd it has to written as this instead:\n\n```\nh = {\"foo\" => 1, \"bar\" => 2}\n```\n\nYAML configuration example:\n\n```\nLint/HashDuplicatedKey:\n  Enabled: true\n```","summary":"<p>A rule that disallows duplicated keys in hash literals.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows duplicated keys in hash literals.\n\nThis is considered invalid:\n\n```\nh = {\"foo\" => 1, \"bar\" => 2, \"foo\" => 3}\n```\n\nAnd it has to written as this instead:\n\n```\nh = {\"foo\" => 1, \"bar\" => 2}\n```\n\nYAML configuration example:\n\n```\nLint/HashDuplicatedKey:\n  Enabled: true\n```","summary":"<p>A rule that disallows duplicated keys in hash literals.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/hash_duplicated_key.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/hash_duplicated_key.cr#L22"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::HashLiteral)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::HashLiteral"}],"args_string":"(source, node : Crystal::HashLiteral)","args_html":"(source, node : Crystal::HashLiteral)","location":{"filename":"src/ameba/rule/lint/hash_duplicated_key.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/hash_duplicated_key.cr#L29"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::HashLiteral"}],"visibility":"Public","body":"if (keys = duplicated_keys(node.entries)).empty?\n  return\nend\nissue_for(node, MSG % (keys.join(\", \")))\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/LiteralInCondition","path":"Ameba/Rule/Lint/LiteralInCondition.html","kind":"class","full_name":"Ameba::Rule::Lint::LiteralInCondition","name":"LiteralInCondition","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/literal_in_condition.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_condition.cr#L22"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Literal value found in conditional\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows useless conditional statements that contain a literal\nin place of a variable or predicate function.\n\nThis is because a conditional construct with a literal predicate will\nalways result in the same behaviour at run time, meaning it can be\nreplaced with either the body of the construct, or deleted entirely.\n\nThis is considered invalid:\n```\nif \"something\"\n  :ok\nend\n```\n\nYAML configuration example:\n\n```\nLint/LiteralInCondition:\n  Enabled: true\n```","summary":"<p>A rule that disallows useless conditional statements that contain a literal in place of a variable or predicate function.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows useless conditional statements that contain a literal\nin place of a variable or predicate function.\n\nThis is because a conditional construct with a literal predicate will\nalways result in the same behaviour at run time, meaning it can be\nreplaced with either the body of the construct, or deleted entirely.\n\nThis is considered invalid:\n```\nif \"something\"\n  :ok\nend\n```\n\nYAML configuration example:\n\n```\nLint/LiteralInCondition:\n  Enabled: true\n```","summary":"<p>A rule that disallows useless conditional statements that contain a literal in place of a variable or predicate function.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/literal_in_condition.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_condition.cr#L22"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"check_node(source,node)-instance-method","name":"check_node","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""}],"args_string":"(source, node)","args_html":"(source, node)","location":{"filename":"src/ameba/rule/lint/literal_in_condition.cr","line_number":32,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_condition.cr#L32"},"def":{"name":"check_node","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"if literal?(node.cond)\n  issue_for(node, MSG)\nend"}},{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::If)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::If"}],"args_string":"(source, node : Crystal::If)","args_html":"(source, node : Crystal::If)","location":{"filename":"src/ameba/rule/lint/literal_in_condition.cr","line_number":36,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_condition.cr#L36"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::If"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::Unless)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"args_string":"(source, node : Crystal::Unless)","args_html":"(source, node : Crystal::Unless)","location":{"filename":"src/ameba/rule/lint/literal_in_condition.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_condition.cr#L40"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::Case)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Case"}],"args_string":"(source, node : Crystal::Case)","args_html":"(source, node : Crystal::Case)","location":{"filename":"src/ameba/rule/lint/literal_in_condition.cr","line_number":44,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_condition.cr#L44"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Case"}],"visibility":"Public","body":"check_node(source, node)"}}]},{"html_id":"ameba/Ameba/Rule/Lint/LiteralInInterpolation","path":"Ameba/Rule/Lint/LiteralInInterpolation.html","kind":"class","full_name":"Ameba::Rule::Lint::LiteralInInterpolation","name":"LiteralInInterpolation","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/literal_in_interpolation.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_interpolation.cr#L18"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Literal value found in interpolation\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows useless string interpolations\nthat contain a literal value instead of a variable or function.\n\nFor example:\n\n```\n\"Hello, #{:Ary}\"\n\"There are #{4} cats\"\n```\n\nYAML configuration example:\n\n```\nLint/LiteralInInterpolation\n  Enabled: true\n```","summary":"<p>A rule that disallows useless string interpolations that contain a literal value instead of a variable or function.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows useless string interpolations\nthat contain a literal value instead of a variable or function.\n\nFor example:\n\n```\n\"Hello, #{:Ary}\"\n\"There are #{4} cats\"\n```\n\nYAML configuration example:\n\n```\nLint/LiteralInInterpolation\n  Enabled: true\n```","summary":"<p>A rule that disallows useless string interpolations that contain a literal value instead of a variable or function.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/literal_in_interpolation.cr","line_number":18,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_interpolation.cr#L18"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::StringInterpolation)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::StringInterpolation"}],"args_string":"(source, node : Crystal::StringInterpolation)","args_html":"(source, node : Crystal::StringInterpolation)","location":{"filename":"src/ameba/rule/lint/literal_in_interpolation.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literal_in_interpolation.cr#L27"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::StringInterpolation"}],"visibility":"Public","body":"node.expressions.select do |e|\n  (!e.is_a?(Crystal::StringLiteral)) && (literal?(e))\nend.each do |n|\n  issue_for(n, MSG)\nend"}}]},{"html_id":"ameba/Ameba/Rule/Lint/LiteralsComparison","path":"Ameba/Rule/Lint/LiteralsComparison.html","kind":"class","full_name":"Ameba::Rule::Lint::LiteralsComparison","name":"LiteralsComparison","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/literals_comparison.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literals_comparison.cr#L20"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DYNAMIC_LITERAL_TYPES","name":"DYNAMIC_LITERAL_TYPES","value":"{Crystal::RangeLiteral, Crystal::RegexLiteral, Crystal::TupleLiteral, Crystal::NamedTupleLiteral, Crystal::ArrayLiteral, Crystal::HashLiteral}"},{"id":"LITERAL_TYPES","name":"LITERAL_TYPES","value":"PRIMITIVE_LITERAL_TYPES + DYNAMIC_LITERAL_TYPES"},{"id":"MSG","name":"MSG","value":"\"Comparison always evaluates to %s\""},{"id":"MSG_LIKELY","name":"MSG_LIKELY","value":"\"Comparison most likely evaluates to %s\""},{"id":"OP_NAMES","name":"OP_NAMES","value":"[\"===\", \"==\", \"!=\"] of ::String"},{"id":"PRIMITIVE_LITERAL_TYPES","name":"PRIMITIVE_LITERAL_TYPES","value":"{Crystal::NilLiteral, Crystal::BoolLiteral, Crystal::NumberLiteral, Crystal::CharLiteral, Crystal::StringLiteral, Crystal::SymbolLiteral, Crystal::ProcLiteral, Crystal::Path}"}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"This rule is used to identify comparisons between two literals.\n\nThey usually have the same result - except for non-primitive\ntypes like containers, range or regex.\n\n\nFor example, this will be always false:\n\n```\n\"foo\" == 42\n```\n\nYAML configuration example:\n\n```\nLint/LiteralsComparison:\n  Enabled: true\n```","summary":"<p>This rule is used to identify comparisons between two literals.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify comparisons between two literals.\n\nThey usually have the same result - except for non-primitive\ntypes like containers, range or regex.\n\n\nFor example, this will be always false:\n\n```\n\"foo\" == 42\n```\n\nYAML configuration example:\n\n```\nLint/LiteralsComparison:\n  Enabled: true\n```","summary":"<p>This rule is used to identify comparisons between two literals.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/literals_comparison.cr","line_number":20,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literals_comparison.cr#L20"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/literals_comparison.cr","line_number":71,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literals_comparison.cr#L71"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if node.name.in?(OP_NAMES)\nelse\n  return\nend\nif (obj = node.obj) && (arg = node.args.first?)\nelse\n  return\nend\nif (obj.class.in?(LITERAL_TYPES)) && (arg.class.in?(LITERAL_TYPES))\nelse\n  return\nend\nis_dynamic = (obj.class.in?(DYNAMIC_LITERAL_TYPES)) || (arg.class.in?(DYNAMIC_LITERAL_TYPES))\nwhat = case node.name\nwhen \"===\"\n  \"the same\"\nwhen \"==\"\n  (obj.to_s == arg.to_s).to_s\nwhen \"!=\"\n  (obj.to_s != arg.to_s).to_s\nend\nissue_for(node, (is_dynamic ? MSG_LIKELY : MSG) % what)\n"}},{"html_id":"test(source)-instance-method","name":"test","doc":"Edge-case: `{{ T == Nil }}`\n\nCurrent implementation just skips all macro contexts,\nregardless of the free variable being present.\n\nIdeally we should only check whether either of the sides\nis a free var","summary":"<p>Edge-case: <code>{{ T == Nil }}</code></p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/literals_comparison.cr","line_number":62,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/literals_comparison.cr#L62"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Lint/NotNil","path":"Ameba/Rule/Lint/NotNil.html","kind":"class","full_name":"Ameba::Rule::Lint::NotNil","name":"NotNil","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/not_nil.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil.cr#L28"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Avoid using `not_nil!`\""},{"id":"NOT_NIL_NAME","name":"NOT_NIL_NAME","value":"\"not_nil!\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"This rule is used to identify usages of `not_nil!` calls.\n\nFor example, this is considered a code smell:\n\n```\nnames = %w[Alice Bob]\nalice = names.find { |name| name == \"Alice\" }.not_nil!\n```\n\nAnd can be written as this:\n\n```\nnames = %w[Alice Bob]\nalice = names.find { |name| name == \"Alice\" }\n\nif alice\n  # ...\nend\n```\n\nYAML configuration example:\n\n```\nLint/NotNil:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usages of <code>not_nil!</code> calls.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usages of `not_nil!` calls.\n\nFor example, this is considered a code smell:\n\n```\nnames = %w[Alice Bob]\nalice = names.find { |name| name == \"Alice\" }.not_nil!\n```\n\nAnd can be written as this:\n\n```\nnames = %w[Alice Bob]\nalice = names.find { |name| name == \"Alice\" }\n\nif alice\n  # ...\nend\n```\n\nYAML configuration example:\n\n```\nLint/NotNil:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usages of <code>not_nil!</code> calls.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/not_nil.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil.cr#L28"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/not_nil.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil.cr#L47"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if node.name == NOT_NIL_NAME\nelse\n  return\nend\nif node.obj && node.args.empty?\nelse\n  return\nend\nif name_location = node.name_location\nelse\n  return\nend\nif end_location = name_end_location(node)\nelse\n  return\nend\nissue_for(name_location, end_location, MSG)\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/not_nil.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil.cr#L38"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Lint/NotNilAfterNoBang","path":"Ameba/Rule/Lint/NotNilAfterNoBang.html","kind":"class","full_name":"Ameba::Rule::Lint::NotNilAfterNoBang","name":"NotNilAfterNoBang","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/not_nil_after_no_bang.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil_after_no_bang.cr#L22"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BLOCK_CALL_NAMES","name":"BLOCK_CALL_NAMES","value":"[\"index\", \"find\"] of ::String"},{"id":"CALL_NAMES","name":"CALL_NAMES","value":"[\"index\"] of ::String"},{"id":"MSG","name":"MSG","value":"\"Use `%s! {...}` instead of `%s {...}.not_nil!`\""},{"id":"NOT_NIL_NAME","name":"NOT_NIL_NAME","value":"\"not_nil!\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"This rule is used to identify usage of `index/find` calls followed by `not_nil!`.\n\nFor example, this is considered a code smell:\n\n```\n%w[Alice Bob].find(&.match(/^A./)).not_nil!\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].find!(&.match(/^A./))\n```\n\nYAML configuration example:\n\n```\nLint/NotNilAfterNoBang:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>index/find</code> calls followed by <code>not_nil!</code>.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `index/find` calls followed by `not_nil!`.\n\nFor example, this is considered a code smell:\n\n```\n%w[Alice Bob].find(&.match(/^A./)).not_nil!\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].find!(&.match(/^A./))\n```\n\nYAML configuration example:\n\n```\nLint/NotNilAfterNoBang:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>index/find</code> calls followed by <code>not_nil!</code>.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/not_nil_after_no_bang.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil_after_no_bang.cr#L22"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/not_nil_after_no_bang.cr","line_number":44,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil_after_no_bang.cr#L44"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name == NOT_NIL_NAME) && node.args.empty?\nelse\n  return\nend\nif (obj = node.obj).is_a?(Crystal::Call)\nelse\n  return\nend\nif obj.name.in?(obj.block ? BLOCK_CALL_NAMES : CALL_NAMES)\nelse\n  return\nend\nif name_location = obj.name_location\nelse\n  return\nend\nif name_location_end = name_end_location(obj)\nelse\n  return\nend\nif end_location = name_end_location(node)\nelse\n  return\nend\nmsg = MSG % {obj.name, obj.name}\nissue_for(name_location, end_location, msg) do |corrector|\n  corrector.insert_after(name_location_end, '!')\n  corrector.remove_trailing(node, {{ \".not_nil!\".size }})\nend\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/not_nil_after_no_bang.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/not_nil_after_no_bang.cr#L35"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Lint/PercentArrays","path":"Ameba/Rule/Lint/PercentArrays.html","kind":"class","full_name":"Ameba::Rule::Lint::PercentArrays","name":"PercentArrays","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/percent_array.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/percent_array.cr#L26"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Symbols `%s` may be unwanted in %s array literals\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows some unwanted symbols in percent array literals.\n\nFor example, this is usually written by mistake:\n\n```\n%i(:one, :two)\n%w(\"one\", \"two\")\n```\n\nAnd the expected example is:\n\n```\n%i(one two)\n%w(one two)\n```\n\nYAML configuration example:\n\n```\nLint/PercentArrays:\n  Enabled: true\n  StringArrayUnwantedSymbols: ',\"'\n  SymbolArrayUnwantedSymbols: ',:'\n```","summary":"<p>A rule that disallows some unwanted symbols in percent array literals.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows some unwanted symbols in percent array literals.\n\nFor example, this is usually written by mistake:\n\n```\n%i(:one, :two)\n%w(\"one\", \"two\")\n```\n\nAnd the expected example is:\n\n```\n%i(one two)\n%w(one two)\n```\n\nYAML configuration example:\n\n```\nLint/PercentArrays:\n  Enabled: true\n  StringArrayUnwantedSymbols: ',\"'\n  SymbolArrayUnwantedSymbols: ',:'\n```","summary":"<p>A rule that disallows some unwanted symbols in percent array literals.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/percent_array.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/percent_array.cr#L26"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"string_array_unwanted_symbols:String-instance-method","name":"string_array_unwanted_symbols","abstract":false,"def":{"name":"string_array_unwanted_symbols","return_type":"String","visibility":"Public","body":"@string_array_unwanted_symbols"}},{"html_id":"string_array_unwanted_symbols=(string_array_unwanted_symbols:String)-instance-method","name":"string_array_unwanted_symbols=","abstract":false,"args":[{"name":"string_array_unwanted_symbols","external_name":"string_array_unwanted_symbols","restriction":"String"}],"args_string":"(string_array_unwanted_symbols : String)","args_html":"(string_array_unwanted_symbols : String)","def":{"name":"string_array_unwanted_symbols=","args":[{"name":"string_array_unwanted_symbols","external_name":"string_array_unwanted_symbols","restriction":"String"}],"visibility":"Public","body":"@string_array_unwanted_symbols = string_array_unwanted_symbols"}},{"html_id":"symbol_array_unwanted_symbols:String-instance-method","name":"symbol_array_unwanted_symbols","abstract":false,"def":{"name":"symbol_array_unwanted_symbols","return_type":"String","visibility":"Public","body":"@symbol_array_unwanted_symbols"}},{"html_id":"symbol_array_unwanted_symbols=(symbol_array_unwanted_symbols:String)-instance-method","name":"symbol_array_unwanted_symbols=","abstract":false,"args":[{"name":"symbol_array_unwanted_symbols","external_name":"symbol_array_unwanted_symbols","restriction":"String"}],"args_string":"(symbol_array_unwanted_symbols : String)","args_html":"(symbol_array_unwanted_symbols : String)","def":{"name":"symbol_array_unwanted_symbols=","args":[{"name":"symbol_array_unwanted_symbols","external_name":"symbol_array_unwanted_symbols","restriction":"String"}],"visibility":"Public","body":"@symbol_array_unwanted_symbols = symbol_array_unwanted_symbols"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/percent_array.cr","line_number":36,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/percent_array.cr#L36"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"issue = start_token = nil\n(Tokenizer.new(source)).run do |token|\n  case token.type\n  when .string_array_start?, .symbol_array_start?\n    start_token = token.dup\n  when .string?\n    if (_start = start_token) && (!issue)\n      issue = array_entry_invalid?(token.value, _start.raw)\n    end\n  when .string_array_end?\n    if (_start = start_token) && (_issue = issue)\n      issue_for(_start, _issue)\n    end\n    issue = start_token = nil\n  end\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/RandZero","path":"Ameba/Rule/Lint/RandZero.html","kind":"class","full_name":"Ameba::Rule::Lint::RandZero","name":"RandZero","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/rand_zero.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/rand_zero.cr#L25"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"%s always returns 0\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows `rand(0)` and `rand(1)` calls.\nSuch calls always return `0`.\n\nFor example:\n\n```\nrand(1)\n```\n\nShould be written as:\n\n```\nrand\n# or\nrand(2)\n```\n\nYAML configuration example:\n\n```\nLint/RandZero:\n  Enabled: true\n```","summary":"<p>A rule that disallows <code>rand(0)</code> and <code>rand(1)</code> calls.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows `rand(0)` and `rand(1)` calls.\nSuch calls always return `0`.\n\nFor example:\n\n```\nrand(1)\n```\n\nShould be written as:\n\n```\nrand\n# or\nrand(2)\n```\n\nYAML configuration example:\n\n```\nLint/RandZero:\n  Enabled: true\n```","summary":"<p>A rule that disallows <code>rand(0)</code> and <code>rand(1)</code> calls.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/rand_zero.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/rand_zero.cr#L25"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/rand_zero.cr","line_number":32,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/rand_zero.cr#L32"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (((((node.name == \"rand\") && (node.args.size == 1)) && (arg = node.args.first)) && arg.is_a?(Crystal::NumberLiteral)) && (value = arg.value)) && (value.in?(\"0\", \"1\"))\nelse\n  return\nend\nissue_for(node, MSG % node)\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/RedundantStringCoercion","path":"Ameba/Rule/Lint/RedundantStringCoercion.html","kind":"class","full_name":"Ameba::Rule::Lint::RedundantStringCoercion","name":"RedundantStringCoercion","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/redundant_string_coercion.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_string_coercion.cr#L23"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Redundant use of `Object#to_s` in interpolation\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows string conversion in string interpolation,\nwhich is redundant.\n\nFor example, this is considered invalid:\n\n```\n\"Hello, #{name.to_s}\"\n```\n\nAnd this is valid:\n\n```\n\"Hello, #{name}\"\n```\n\nYAML configuration example:\n\n```\nLint/RedundantStringCoersion\n  Enabled: true\n```","summary":"<p>A rule that disallows string conversion in string interpolation, which is redundant.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows string conversion in string interpolation,\nwhich is redundant.\n\nFor example, this is considered invalid:\n\n```\n\"Hello, #{name.to_s}\"\n```\n\nAnd this is valid:\n\n```\n\"Hello, #{name}\"\n```\n\nYAML configuration example:\n\n```\nLint/RedundantStringCoersion\n  Enabled: true\n```","summary":"<p>A rule that disallows string conversion in string interpolation, which is redundant.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/redundant_string_coercion.cr","line_number":23,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_string_coercion.cr#L23"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::StringInterpolation)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::StringInterpolation"}],"args_string":"(source, node : Crystal::StringInterpolation)","args_html":"(source, node : Crystal::StringInterpolation)","location":{"filename":"src/ameba/rule/lint/redundant_string_coercion.cr","line_number":32,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_string_coercion.cr#L32"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::StringInterpolation"}],"visibility":"Public","body":"(string_coercion_nodes(node)).each do |n|\n  issue_for(n.name_location, n.end_location, MSG)\nend"}}]},{"html_id":"ameba/Ameba/Rule/Lint/RedundantWithIndex","path":"Ameba/Rule/Lint/RedundantWithIndex.html","kind":"class","full_name":"Ameba::Rule::Lint::RedundantWithIndex","name":"RedundantWithIndex","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/redundant_with_index.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_index.cr#L29"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows redundant `with_index` calls.\n\nFor example, this is considered invalid:\n```\ncollection.each.with_index do |e|\n  # ...\nend\n\ncollection.each_with_index do |e, _|\n  # ...\nend\n```\n\nand it should be written as follows:\n\n```\ncollection.each do |e|\n  # ...\nend\n```\n\nYAML configuration example:\n\n```\nLint/RedundantWithIndex:\n  Enabled: true\n```","summary":"<p>A rule that disallows redundant <code>with_index</code> calls.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows redundant `with_index` calls.\n\nFor example, this is considered invalid:\n```\ncollection.each.with_index do |e|\n  # ...\nend\n\ncollection.each_with_index do |e, _|\n  # ...\nend\n```\n\nand it should be written as follows:\n\n```\ncollection.each do |e|\n  # ...\nend\n```\n\nYAML configuration example:\n\n```\nLint/RedundantWithIndex:\n  Enabled: true\n```","summary":"<p>A rule that disallows redundant <code>with_index</code> calls.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/redundant_with_index.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_index.cr#L29"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/redundant_with_index.cr","line_number":34,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_index.cr#L34"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"args, block = node.args, node.block\nif block.nil? || args.size > 1\n  return\nend\nif with_index_arg?(block)\n  return\nend\ncase node.name\nwhen \"with_index\"\n  report(source, node, \"Remove redundant with_index\")\nwhen \"each_with_index\"\n  report(source, node, \"Use each instead of each_with_index\")\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/RedundantWithObject","path":"Ameba/Rule/Lint/RedundantWithObject.html","kind":"class","full_name":"Ameba::Rule::Lint::RedundantWithObject","name":"RedundantWithObject","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/redundant_with_object.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_object.cr#L30"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Use `each` instead of `each_with_object`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows redundant `each_with_object` calls.\n\nFor example, this is considered invalid:\n\n```\ncollection.each_with_object(0) do |e|\n  # ...\nend\n\ncollection.each_with_object(0) do |e, _|\n  # ...\nend\n```\n\nand it should be written as follows:\n\n```\ncollection.each do |e|\n  # ...\nend\n```\n\nYAML configuration example:\n\n```\nLint/RedundantWithObject:\n  Enabled: true\n```","summary":"<p>A rule that disallows redundant <code>each_with_object</code> calls.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows redundant `each_with_object` calls.\n\nFor example, this is considered invalid:\n\n```\ncollection.each_with_object(0) do |e|\n  # ...\nend\n\ncollection.each_with_object(0) do |e, _|\n  # ...\nend\n```\n\nand it should be written as follows:\n\n```\ncollection.each do |e|\n  # ...\nend\n```\n\nYAML configuration example:\n\n```\nLint/RedundantWithObject:\n  Enabled: true\n```","summary":"<p>A rule that disallows redundant <code>each_with_object</code> calls.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/redundant_with_object.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_object.cr#L30"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/redundant_with_object.cr","line_number":37,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/redundant_with_object.cr#L37"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (((node.name != \"each_with_object\") || (node.args.size != 1)) || (!(block = node.block))) || (with_index_arg?(block))\n  return\nend\nissue_for(node.name_location, node.name_end_location, MSG)\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/ShadowedArgument","path":"Ameba/Rule/Lint/ShadowedArgument.html","kind":"class","full_name":"Ameba::Rule::Lint::ShadowedArgument","name":"ShadowedArgument","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/shadowed_argument.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_argument.cr#L38"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Argument `%s` is assigned before it is used\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows shadowed arguments.\n\nFor example, this is considered invalid:\n\n```\ndo_something do |foo|\n  foo = 1 # shadows block argument\n  foo\nend\n\ndef do_something(foo)\n  foo = 1 # shadows method argument\n  foo\nend\n```\n\nand it should be written as follows:\n\n```\ndo_something do |foo|\n  foo = foo + 42\n  foo\nend\n\ndef do_something(foo)\n  foo = foo + 42\n  foo\nend\n```\n\nYAML configuration example:\n\n```\nLint/ShadowedArgument:\n  Enabled: true\n```","summary":"<p>A rule that disallows shadowed arguments.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows shadowed arguments.\n\nFor example, this is considered invalid:\n\n```\ndo_something do |foo|\n  foo = 1 # shadows block argument\n  foo\nend\n\ndef do_something(foo)\n  foo = 1 # shadows method argument\n  foo\nend\n```\n\nand it should be written as follows:\n\n```\ndo_something do |foo|\n  foo = foo + 42\n  foo\nend\n\ndef do_something(foo)\n  foo = foo + 42\n  foo\nend\n```\n\nYAML configuration example:\n\n```\nLint/ShadowedArgument:\n  Enabled: true\n```","summary":"<p>A rule that disallows shadowed arguments.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/shadowed_argument.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_argument.cr#L38"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node, scope : AST::Scope)","args_html":"(source, node, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/shadowed_argument.cr","line_number":49,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_argument.cr#L49"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"scope.arguments.each do |arg|\n  if assign = arg.variable.assign_before_reference\n  else\n    next\n  end\n  issue_for(assign, MSG % arg.name)\nend"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/shadowed_argument.cr","line_number":45,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_argument.cr#L45"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::ScopeVisitor.new(self, source)"}}]},{"html_id":"ameba/Ameba/Rule/Lint/ShadowedException","path":"Ameba/Rule/Lint/ShadowedException.html","kind":"class","full_name":"Ameba::Rule::Lint::ShadowedException","name":"ShadowedException","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/shadowed_exception.cr","line_number":36,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_exception.cr#L36"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Shadowed exception found: %s\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows a rescued exception that get shadowed by a\nless specific exception being rescued before a more specific\nexception is rescued.\n\nFor example, this is invalid:\n\n```\nbegin\n  do_something\nrescue Exception\n  handle_exception\nrescue ArgumentError\n  handle_argument_error_exception\nend\n```\n\nAnd it has to be written as follows:\n\n```\nbegin\n  do_something\nrescue ArgumentError\n  handle_argument_error_exception\nrescue Exception\n  handle_exception\nend\n```\n\nYAML configuration example:\n\n```\nLint/ShadowedException:\n  Enabled: true\n```","summary":"<p>A rule that disallows a rescued exception that get shadowed by a less specific exception being rescued before a more specific exception is rescued.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows a rescued exception that get shadowed by a\nless specific exception being rescued before a more specific\nexception is rescued.\n\nFor example, this is invalid:\n\n```\nbegin\n  do_something\nrescue Exception\n  handle_exception\nrescue ArgumentError\n  handle_argument_error_exception\nend\n```\n\nAnd it has to be written as follows:\n\n```\nbegin\n  do_something\nrescue ArgumentError\n  handle_argument_error_exception\nrescue Exception\n  handle_exception\nend\n```\n\nYAML configuration example:\n\n```\nLint/ShadowedException:\n  Enabled: true\n```","summary":"<p>A rule that disallows a rescued exception that get shadowed by a less specific exception being rescued before a more specific exception is rescued.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/shadowed_exception.cr","line_number":36,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_exception.cr#L36"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::ExceptionHandler)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ExceptionHandler"}],"args_string":"(source, node : Crystal::ExceptionHandler)","args_html":"(source, node : Crystal::ExceptionHandler)","location":{"filename":"src/ameba/rule/lint/shadowed_exception.cr","line_number":43,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowed_exception.cr#L43"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ExceptionHandler"}],"visibility":"Public","body":"rescues = node.rescues\nif rescues.nil?\n  return\nend\n(shadowed(rescues)).each do |tp|\n  issue_for(tp, MSG % (tp.names.join(\"::\")))\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/ShadowingOuterLocalVar","path":"Ameba/Rule/Lint/ShadowingOuterLocalVar.html","kind":"class","full_name":"Ameba::Rule::Lint::ShadowingOuterLocalVar","name":"ShadowingOuterLocalVar","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/shadowing_outer_local_var.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowing_outer_local_var.cr#L33"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Shadowing outer local variable `%s`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows the usage of the same name as outer local variables\nfor block or proc arguments.\n\nFor example, this is considered incorrect:\n\n```\ndef some_method\n  foo = 1\n\n  3.times do |foo| # shadowing outer `foo`\n  end\nend\n```\n\nand should be written as:\n\n```\ndef some_method\n  foo = 1\n\n  3.times do |bar|\n  end\nend\n```\n\nYAML configuration example:\n\n```\nLint/ShadowingOuterLocalVar:\n  Enabled: true\n```","summary":"<p>A rule that disallows the usage of the same name as outer local variables for block or proc arguments.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows the usage of the same name as outer local variables\nfor block or proc arguments.\n\nFor example, this is considered incorrect:\n\n```\ndef some_method\n  foo = 1\n\n  3.times do |foo| # shadowing outer `foo`\n  end\nend\n```\n\nand should be written as:\n\n```\ndef some_method\n  foo = 1\n\n  3.times do |bar|\n  end\nend\n```\n\nYAML configuration example:\n\n```\nLint/ShadowingOuterLocalVar:\n  Enabled: true\n```","summary":"<p>A rule that disallows the usage of the same name as outer local variables for block or proc arguments.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/shadowing_outer_local_var.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowing_outer_local_var.cr#L33"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::ProcLiteral,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ProcLiteral"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node : Crystal::ProcLiteral, scope : AST::Scope)","args_html":"(source, node : Crystal::ProcLiteral, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/shadowing_outer_local_var.cr","line_number":48,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowing_outer_local_var.cr#L48"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ProcLiteral"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"find_shadowing(source, scope)"}},{"html_id":"test(source,node:Crystal::Block,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Block"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node : Crystal::Block, scope : AST::Scope)","args_html":"(source, node : Crystal::Block, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/shadowing_outer_local_var.cr","line_number":52,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowing_outer_local_var.cr#L52"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Block"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"find_shadowing(source, scope)"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/shadowing_outer_local_var.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shadowing_outer_local_var.cr#L41"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::ScopeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Lint/SharedVarInFiber","path":"Ameba/Rule/Lint/SharedVarInFiber.html","kind":"class","full_name":"Ameba::Rule::Lint::SharedVarInFiber","name":"SharedVarInFiber","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/shared_var_in_fiber.cr","line_number":52,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shared_var_in_fiber.cr#L52"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Shared variable `%s` is used in fiber\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows using shared variables in fibers,\nwhich are mutated during iterations.\n\nIn most cases it leads to unexpected behaviour and is undesired.\n\nFor example, having this example:\n\n```\nn = 0\nchannel = Channel(Int32).new\n\nwhile n < 3\n  n = n + 1\n  spawn { channel.send n }\nend\n\n3.times { puts channel.receive } # => # 3, 3, 3\n```\n\nThe problem is there is only one shared between fibers variable `n`\nand when `channel.receive` is executed its value is `3`.\n\nTo solve this, the code above needs to be rewritten to the following:\n\n```\nn = 0\nchannel = Channel(Int32).new\n\nwhile n < 3\n  n = n + 1\n  m = n\n  spawn do { channel.send m }\nend\n\n3.times { puts channel.receive } # => # 1, 2, 3\n```\n\nThis rule is able to find the shared variables between fibers, which are mutated\nduring iterations. So it reports the issue on the first sample and passes on\nthe second one.\n\nThere are also other technics to solve the problem above which are\n[officially documented](https://crystal-lang.org/reference/guides/concurrency.html)\n\nYAML configuration example:\n\n```\nLint/SharedVarInFiber:\n  Enabled: true\n```","summary":"<p>A rule that disallows using shared variables in fibers, which are mutated during iterations.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows using shared variables in fibers,\nwhich are mutated during iterations.\n\nIn most cases it leads to unexpected behaviour and is undesired.\n\nFor example, having this example:\n\n```\nn = 0\nchannel = Channel(Int32).new\n\nwhile n < 3\n  n = n + 1\n  spawn { channel.send n }\nend\n\n3.times { puts channel.receive } # => # 3, 3, 3\n```\n\nThe problem is there is only one shared between fibers variable `n`\nand when `channel.receive` is executed its value is `3`.\n\nTo solve this, the code above needs to be rewritten to the following:\n\n```\nn = 0\nchannel = Channel(Int32).new\n\nwhile n < 3\n  n = n + 1\n  m = n\n  spawn do { channel.send m }\nend\n\n3.times { puts channel.receive } # => # 1, 2, 3\n```\n\nThis rule is able to find the shared variables between fibers, which are mutated\nduring iterations. So it reports the issue on the first sample and passes on\nthe second one.\n\nThere are also other technics to solve the problem above which are\n[officially documented](https://crystal-lang.org/reference/guides/concurrency.html)\n\nYAML configuration example:\n\n```\nLint/SharedVarInFiber:\n  Enabled: true\n```","summary":"<p>A rule that disallows using shared variables in fibers, which are mutated during iterations.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/shared_var_in_fiber.cr","line_number":52,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shared_var_in_fiber.cr#L52"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node, scope : AST::Scope)","args_html":"(source, node, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/shared_var_in_fiber.cr","line_number":63,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shared_var_in_fiber.cr#L63"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"if scope.spawn_block?\nelse\n  return\nend\nscope.references.each do |ref|\n  if (  variable = scope.find_variable(ref.name)).nil?\n    next\n  end\n  if (variable.scope == scope) || (!(mutated_in_loop?(variable)))\n    next\n  end\n  issue_for(ref.node, MSG % variable.name)\nend\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/shared_var_in_fiber.cr","line_number":59,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/shared_var_in_fiber.cr#L59"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::ScopeVisitor.new(self, source)"}}]},{"html_id":"ameba/Ameba/Rule/Lint/SpecFocus","path":"Ameba/Rule/Lint/SpecFocus.html","kind":"class","full_name":"Ameba::Rule::Lint::SpecFocus","name":"SpecFocus","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/spec_focus.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/spec_focus.cr#L47"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Focused spec item detected\""},{"id":"SPEC_ITEM_NAMES","name":"SPEC_ITEM_NAMES","value":"[\"describe\", \"context\", \"it\", \"pending\"] of ::String"}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"Checks if specs are focused.\n\nIn specs `focus: true` is mainly used to focus on a spec\nitem locally during development. However, if such change\nis committed, it silently runs only focused spec on all\nother environment, which is undesired.\n\nThis is considered bad:\n\n```\ndescribe MyClass, focus: true do\nend\n\ndescribe \".new\", focus: true do\nend\n\ncontext \"my context\", focus: true do\nend\n\nit \"works\", focus: true do\nend\n```\n\nAnd it should be written as the following:\n\n```\ndescribe MyClass do\nend\n\ndescribe \".new\" do\nend\n\ncontext \"my context\" do\nend\n\nit \"works\" do\nend\n```\n\nYAML configuration example:\n\n```\nLint/SpecFocus:\n  Enabled: true\n```","summary":"<p>Checks if specs are focused.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"Checks if specs are focused.\n\nIn specs `focus: true` is mainly used to focus on a spec\nitem locally during development. However, if such change\nis committed, it silently runs only focused spec on all\nother environment, which is undesired.\n\nThis is considered bad:\n\n```\ndescribe MyClass, focus: true do\nend\n\ndescribe \".new\", focus: true do\nend\n\ncontext \"my context\", focus: true do\nend\n\nit \"works\", focus: true do\nend\n```\n\nAnd it should be written as the following:\n\n```\ndescribe MyClass do\nend\n\ndescribe \".new\" do\nend\n\ncontext \"my context\" do\nend\n\nit \"works\" do\nend\n```\n\nYAML configuration example:\n\n```\nLint/SpecFocus:\n  Enabled: true\n```","summary":"<p>Checks if specs are focused.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/spec_focus.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/spec_focus.cr#L47"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/lint/spec_focus.cr","line_number":61,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/spec_focus.cr#L61"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if node.name.in?(SPEC_ITEM_NAMES)\nelse\n  return\nend\nif node.block\nelse\n  return\nend\narg = node.named_args.try(&.find() do |__arg1|\n  __arg1.name == \"focus\"\nend)\nif arg\n  issue_for(arg, MSG)\nend\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/spec_focus.cr","line_number":55,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/spec_focus.cr#L55"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"if source.spec?\nelse\n  return\nend\nAST::NodeVisitor.new(self, source)\n"}}]},{"html_id":"ameba/Ameba/Rule/Lint/Syntax","path":"Ameba/Rule/Lint/Syntax.html","kind":"class","full_name":"Ameba::Rule::Lint::Syntax","name":"Syntax","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/syntax.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/syntax.cr#L21"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that reports invalid Crystal syntax.\n\nFor example, this syntax is invalid:\n\n```\ndef hello\n  do_something\nrescue Exception => e\nend\n```\n\nAnd should be properly written:\n\n```\ndef hello\n  do_something\nrescue e : Exception\nend\n```","summary":"<p>A rule that reports invalid Crystal syntax.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that reports invalid Crystal syntax.\n\nFor example, this syntax is invalid:\n\n```\ndef hello\n  do_something\nrescue Exception => e\nend\n```\n\nAnd should be properly written:\n\n```\ndef hello\n  do_something\nrescue e : Exception\nend\n```","summary":"<p>A rule that reports invalid Crystal syntax.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/syntax.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/syntax.cr#L21"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","return_type":"Ameba::Severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/syntax.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/syntax.cr#L27"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"begin\n  source.ast\nrescue e : Crystal::SyntaxException\n  issue_for({e.line_number, e.column_number}, e.message.to_s)\nend"}}]},{"html_id":"ameba/Ameba/Rule/Lint/UnneededDisableDirective","path":"Ameba/Rule/Lint/UnneededDisableDirective.html","kind":"class","full_name":"Ameba::Rule::Lint::UnneededDisableDirective","name":"UnneededDisableDirective","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/unneeded_disable_directive.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unneeded_disable_directive.cr#L27"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Unnecessary disabling of %s\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that reports unneeded disable directives.\nFor example, this is considered invalid:\n\n```\n# ameba:disable Style/PredicateName\ndef comment?\n  do_something\nend\n```\n\nas the predicate name is correct and the comment directive does not\nhave any effect, the snippet should be written as the following:\n\n```\ndef comment?\n  do_something\nend\n```\n\nYAML configuration example:\n\n```\nLint/UnneededDisableDirective\n  Enabled: true\n```","summary":"<p>A rule that reports unneeded disable directives.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that reports unneeded disable directives.\nFor example, this is considered invalid:\n\n```\n# ameba:disable Style/PredicateName\ndef comment?\n  do_something\nend\n```\n\nas the predicate name is correct and the comment directive does not\nhave any effect, the snippet should be written as the following:\n\n```\ndef comment?\n  do_something\nend\n```\n\nYAML configuration example:\n\n```\nLint/UnneededDisableDirective\n  Enabled: true\n```","summary":"<p>A rule that reports unneeded disable directives.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/unneeded_disable_directive.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unneeded_disable_directive.cr#L27"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/unneeded_disable_directive.cr","line_number":34,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unneeded_disable_directive.cr#L34"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"(Tokenizer.new(source)).run do |token|\n  if token.type.comment?\n  else\n    next\n  end\n  if directive = source.parse_inline_directive(token.value.to_s)\n  else\n    next\n  end\n  if names = unneeded_disables(source, directive, token.location)\n  else\n    next\n  end\n  if names.empty?\n    next\n  end\n  issue_for(token, MSG % (names.join(\", \")))\nend"}}]},{"html_id":"ameba/Ameba/Rule/Lint/UnreachableCode","path":"Ameba/Rule/Lint/UnreachableCode.html","kind":"class","full_name":"Ameba::Rule::Lint::UnreachableCode","name":"UnreachableCode","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/unreachable_code.cr","line_number":44,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unreachable_code.cr#L44"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Unreachable code detected\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that reports unreachable code.\n\nFor example, this is considered invalid:\n\n```\ndef method(a)\n  return 42\n  a + 1\nend\n```\n\n```\na = 1\nloop do\n  break\n  a += 1\nend\n```\n\nAnd has to be written as the following:\n\n```\ndef method(a)\n  return 42 if a == 0\n  a + 1\nend\n```\n\n```\na = 1\nloop do\n  break a > 3\n  a += 1\nend\n```\n\nYAML configuration example:\n\n```\nLint/UnreachableCode:\n  Enabled: true\n```","summary":"<p>A rule that reports unreachable code.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that reports unreachable code.\n\nFor example, this is considered invalid:\n\n```\ndef method(a)\n  return 42\n  a + 1\nend\n```\n\n```\na = 1\nloop do\n  break\n  a += 1\nend\n```\n\nAnd has to be written as the following:\n\n```\ndef method(a)\n  return 42 if a == 0\n  a + 1\nend\n```\n\n```\na = 1\nloop do\n  break a > 3\n  a += 1\nend\n```\n\nYAML configuration example:\n\n```\nLint/UnreachableCode:\n  Enabled: true\n```","summary":"<p>A rule that reports unreachable code.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/unreachable_code.cr","line_number":44,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unreachable_code.cr#L44"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node,flow_expression:AST::FlowExpression)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"flow_expression","external_name":"flow_expression","restriction":"AST::FlowExpression"}],"args_string":"(source, node, flow_expression : AST::FlowExpression)","args_html":"(source, node, flow_expression : <a href=\"../../../Ameba/AST/FlowExpression.html\">AST::FlowExpression</a>)","location":{"filename":"src/ameba/rule/lint/unreachable_code.cr","line_number":57,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unreachable_code.cr#L57"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"flow_expression","external_name":"flow_expression","restriction":"AST::FlowExpression"}],"visibility":"Public","body":"if unreachable_node = flow_expression.unreachable_nodes.first?\nelse\n  return\nend\nissue_for(unreachable_node, MSG)\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/unreachable_code.cr","line_number":53,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unreachable_code.cr#L53"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::FlowExpressionVisitor.new(self, source)"}}]},{"html_id":"ameba/Ameba/Rule/Lint/UnusedArgument","path":"Ameba/Rule/Lint/UnusedArgument.html","kind":"class","full_name":"Ameba::Rule::Lint::UnusedArgument","name":"UnusedArgument","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/unused_argument.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unused_argument.cr#L27"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Unused argument `%s`. If it's necessary, use `%s` as an argument name to indicate that it won't be used.\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that reports unused arguments.\nFor example, this is considered invalid:\n\n```\ndef method(a, b, c)\n  a + b\nend\n```\nand should be written as:\n\n```\ndef method(a, b)\n  a + b\nend\n```\n\nYAML configuration example:\n\n```\nLint/UnusedArgument:\n  Enabled: true\n  IgnoreDefs: true\n  IgnoreBlocks: false\n  IgnoreProcs: false\n```","summary":"<p>A rule that reports unused arguments.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that reports unused arguments.\nFor example, this is considered invalid:\n\n```\ndef method(a, b, c)\n  a + b\nend\n```\nand should be written as:\n\n```\ndef method(a, b)\n  a + b\nend\n```\n\nYAML configuration example:\n\n```\nLint/UnusedArgument:\n  Enabled: true\n  IgnoreDefs: true\n  IgnoreBlocks: false\n  IgnoreProcs: false\n```","summary":"<p>A rule that reports unused arguments.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/unused_argument.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unused_argument.cr#L27"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"ignore_blocks:Bool-instance-method","name":"ignore_blocks","abstract":false,"def":{"name":"ignore_blocks","return_type":"Bool","visibility":"Public","body":"@ignore_blocks"}},{"html_id":"ignore_blocks=(ignore_blocks:Bool)-instance-method","name":"ignore_blocks=","abstract":false,"args":[{"name":"ignore_blocks","external_name":"ignore_blocks","restriction":"Bool"}],"args_string":"(ignore_blocks : Bool)","args_html":"(ignore_blocks : Bool)","def":{"name":"ignore_blocks=","args":[{"name":"ignore_blocks","external_name":"ignore_blocks","restriction":"Bool"}],"visibility":"Public","body":"@ignore_blocks = ignore_blocks"}},{"html_id":"ignore_defs:Bool-instance-method","name":"ignore_defs","abstract":false,"def":{"name":"ignore_defs","return_type":"Bool","visibility":"Public","body":"@ignore_defs"}},{"html_id":"ignore_defs=(ignore_defs:Bool)-instance-method","name":"ignore_defs=","abstract":false,"args":[{"name":"ignore_defs","external_name":"ignore_defs","restriction":"Bool"}],"args_string":"(ignore_defs : Bool)","args_html":"(ignore_defs : Bool)","def":{"name":"ignore_defs=","args":[{"name":"ignore_defs","external_name":"ignore_defs","restriction":"Bool"}],"visibility":"Public","body":"@ignore_defs = ignore_defs"}},{"html_id":"ignore_procs:Bool-instance-method","name":"ignore_procs","abstract":false,"def":{"name":"ignore_procs","return_type":"Bool","visibility":"Public","body":"@ignore_procs"}},{"html_id":"ignore_procs=(ignore_procs:Bool)-instance-method","name":"ignore_procs=","abstract":false,"args":[{"name":"ignore_procs","external_name":"ignore_procs","restriction":"Bool"}],"args_string":"(ignore_procs : Bool)","args_html":"(ignore_procs : Bool)","def":{"name":"ignore_procs=","args":[{"name":"ignore_procs","external_name":"ignore_procs","restriction":"Bool"}],"visibility":"Public","body":"@ignore_procs = ignore_procs"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::ProcLiteral,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ProcLiteral"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node : Crystal::ProcLiteral, scope : AST::Scope)","args_html":"(source, node : Crystal::ProcLiteral, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/unused_argument.cr","line_number":43,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unused_argument.cr#L43"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ProcLiteral"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"ignore_procs || (find_unused_arguments(source, scope))"}},{"html_id":"test(source,node:Crystal::Block,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Block"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node : Crystal::Block, scope : AST::Scope)","args_html":"(source, node : Crystal::Block, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/unused_argument.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unused_argument.cr#L47"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Block"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"ignore_blocks || (find_unused_arguments(source, scope))"}},{"html_id":"test(source,node:Crystal::Def,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node : Crystal::Def, scope : AST::Scope)","args_html":"(source, node : Crystal::Def, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/unused_argument.cr","line_number":51,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unused_argument.cr#L51"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"ignore_defs || (find_unused_arguments(source, scope))"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/unused_argument.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/unused_argument.cr#L39"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::ScopeVisitor.new(self, source)"}}]},{"html_id":"ameba/Ameba/Rule/Lint/UselessAssign","path":"Ameba/Rule/Lint/UselessAssign.html","kind":"class","full_name":"Ameba::Rule::Lint::UselessAssign","name":"UselessAssign","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/useless_assign.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_assign.cr#L28"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Useless assignment to variable `%s`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows useless assignments.\n\nFor example, this is considered invalid:\n\n```\ndef method\n  var = 1\n  do_something\nend\n```\n\nAnd has to be written as the following:\n\n```\ndef method\n  var = 1\n  do_something(var)\nend\n```\n\nYAML configuration example:\n\n```\nLint/UselessAssign:\n  Enabled: true\n```","summary":"<p>A rule that disallows useless assignments.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows useless assignments.\n\nFor example, this is considered invalid:\n\n```\ndef method\n  var = 1\n  do_something\nend\n```\n\nAnd has to be written as the following:\n\n```\ndef method\n  var = 1\n  do_something(var)\nend\n```\n\nYAML configuration example:\n\n```\nLint/UselessAssign:\n  Enabled: true\n```","summary":"<p>A rule that disallows useless assignments.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/useless_assign.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_assign.cr#L28"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node,scope:AST::Scope)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"args_string":"(source, node, scope : AST::Scope)","args_html":"(source, node, scope : <a href=\"../../../Ameba/AST/Scope.html\">AST::Scope</a>)","location":{"filename":"src/ameba/rule/lint/useless_assign.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_assign.cr#L39"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":""},{"name":"scope","external_name":"scope","restriction":"AST::Scope"}],"visibility":"Public","body":"scope.variables.each do |var|\n  if (var.ignored? || var.used_in_macro?) || var.captured_by_block?\n    next\n  end\n  var.assignments.each do |assign|\n    if assign.referenced? || assign.transformed?\n      next\n    end\n    issue_for(assign.target_node, MSG % var.name)\n  end\nend"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/lint/useless_assign.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_assign.cr#L35"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::ScopeVisitor.new(self, source)"}}]},{"html_id":"ameba/Ameba/Rule/Lint/UselessConditionInWhen","path":"Ameba/Rule/Lint/UselessConditionInWhen.html","kind":"class","full_name":"Ameba::Rule::Lint::UselessConditionInWhen","name":"UselessConditionInWhen","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/lint/useless_condition_in_when.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_condition_in_when.cr#L33"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Useless condition in when detected\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Lint","kind":"module","full_name":"Ameba::Rule::Lint","name":"Lint"},"doc":"A rule that disallows useless conditions in when clause\nwhere it is guaranteed to always return the same result.\n\nFor example, this is considered invalid:\n\n```\ncase\nwhen utc?\n  io << \" UTC\"\nwhen local?\n  Format.new(\" %:z\").format(self, io) if local?\nend\n```\n\nAnd has to be written as the following:\n\n```\ncase\nwhen utc?\n  io << \" UTC\"\nwhen local?\n  Format.new(\" %:z\").format(self, io)\nend\n```\n\nYAML configuration example:\n\n```\nLint/UselessConditionInWhen:\n  Enabled: true\n```","summary":"<p>A rule that disallows useless conditions in when clause where it is guaranteed to always return the same result.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows useless conditions in when clause\nwhere it is guaranteed to always return the same result.\n\nFor example, this is considered invalid:\n\n```\ncase\nwhen utc?\n  io << \" UTC\"\nwhen local?\n  Format.new(\" %:z\").format(self, io) if local?\nend\n```\n\nAnd has to be written as the following:\n\n```\ncase\nwhen utc?\n  io << \" UTC\"\nwhen local?\n  Format.new(\" %:z\").format(self, io)\nend\n```\n\nYAML configuration example:\n\n```\nLint/UselessConditionInWhen:\n  Enabled: true\n```","summary":"<p>A rule that disallows useless conditions in when clause where it is guaranteed to always return the same result.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/lint/useless_condition_in_when.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_condition_in_when.cr#L33"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::When)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::When"}],"args_string":"(source, node : Crystal::When)","args_html":"(source, node : Crystal::When)","location":{"filename":"src/ameba/rule/lint/useless_condition_in_when.cr","line_number":50,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/lint/useless_condition_in_when.cr#L50"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::When"}],"visibility":"Public","body":"ConditionInWhenVisitor.new(self, source, node)"}}]}]},{"html_id":"ameba/Ameba/Rule/Metrics","path":"Ameba/Rule/Metrics.html","kind":"module","full_name":"Ameba::Rule::Metrics","name":"Metrics","abstract":false,"locations":[{"filename":"src/ameba/rule/metrics/cyclomatic_complexity.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/metrics/cyclomatic_complexity.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Rule","kind":"module","full_name":"Ameba::Rule","name":"Rule"},"types":[{"html_id":"ameba/Ameba/Rule/Metrics/CyclomaticComplexity","path":"Ameba/Rule/Metrics/CyclomaticComplexity.html","kind":"class","full_name":"Ameba::Rule::Metrics::CyclomaticComplexity","name":"CyclomaticComplexity","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/metrics/cyclomatic_complexity.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/metrics/cyclomatic_complexity.cr#L11"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Cyclomatic complexity too high [%d/%d]\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Metrics","kind":"module","full_name":"Ameba::Rule::Metrics","name":"Metrics"},"doc":"A rule that disallows methods with a cyclomatic complexity higher than `MaxComplexity`\n\nYAML configuration example:\n\n```\nMetrics/CyclomaticComplexity:\n  Enabled: true\n  MaxComplexity: 10\n```","summary":"<p>A rule that disallows methods with a cyclomatic complexity higher than <code>MaxComplexity</code></p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows methods with a cyclomatic complexity higher than `MaxComplexity`\n\nYAML configuration example:\n\n```\nMetrics/CyclomaticComplexity:\n  Enabled: true\n  MaxComplexity: 10\n```","summary":"<p>A rule that disallows methods with a cyclomatic complexity higher than <code>MaxComplexity</code></p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/metrics/cyclomatic_complexity.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/metrics/cyclomatic_complexity.cr#L11"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"max_complexity:Int32-instance-method","name":"max_complexity","abstract":false,"def":{"name":"max_complexity","return_type":"Int32","visibility":"Public","body":"@max_complexity"}},{"html_id":"max_complexity=(max_complexity:Int32)-instance-method","name":"max_complexity=","abstract":false,"args":[{"name":"max_complexity","external_name":"max_complexity","restriction":"Int32"}],"args_string":"(max_complexity : Int32)","args_html":"(max_complexity : Int32)","def":{"name":"max_complexity=","args":[{"name":"max_complexity","external_name":"max_complexity","restriction":"Int32"}],"visibility":"Public","body":"@max_complexity = max_complexity"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Def)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"args_string":"(source, node : Crystal::Def)","args_html":"(source, node : Crystal::Def)","location":{"filename":"src/ameba/rule/metrics/cyclomatic_complexity.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/metrics/cyclomatic_complexity.cr#L21"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"visibility":"Public","body":"complexity = (AST::CountingVisitor.new(node)).count\nif complexity > max_complexity && (location = node.name_location)\nelse\n  return\nend\nissue_for(location, name_end_location(node), MSG % {complexity, max_complexity})\n"}}]}]},{"html_id":"ameba/Ameba/Rule/Performance","path":"Ameba/Rule/Performance.html","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance","abstract":false,"locations":[{"filename":"src/ameba/rule/performance/any_after_filter.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_after_filter.cr#L3"},{"filename":"src/ameba/rule/performance/any_instead_of_empty.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_instead_of_empty.cr#L3"},{"filename":"src/ameba/rule/performance/base.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/base.cr#L3"},{"filename":"src/ameba/rule/performance/chained_call_with_no_bang.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/chained_call_with_no_bang.cr#L3"},{"filename":"src/ameba/rule/performance/compact_after_map.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/compact_after_map.cr#L3"},{"filename":"src/ameba/rule/performance/first_last_after_filter.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/first_last_after_filter.cr#L3"},{"filename":"src/ameba/rule/performance/flatten_after_map.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/flatten_after_map.cr#L3"},{"filename":"src/ameba/rule/performance/map_instead_of_block.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/map_instead_of_block.cr#L3"},{"filename":"src/ameba/rule/performance/size_after_filter.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/size_after_filter.cr#L3"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Rule","kind":"module","full_name":"Ameba::Rule","name":"Rule"},"types":[{"html_id":"ameba/Ameba/Rule/Performance/AnyAfterFilter","path":"Ameba/Rule/Performance/AnyAfterFilter.html","kind":"class","full_name":"Ameba::Rule::Performance::AnyAfterFilter","name":"AnyAfterFilter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/any_after_filter.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_after_filter.cr#L29"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ANY_NAME","name":"ANY_NAME","value":"\"any?\""},{"id":"MSG","name":"MSG","value":"\"Use `any? {...}` instead of `%s {...}.any?`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of `any?` calls that follow filters.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].select { |e| e > 2 }.any?\n[1, 2, 3].reject { |e| e >= 2 }.any?\n```\n\nAnd it should be written as this:\n\n```\n[1, 2, 3].any? { |e| e > 2 }\n[1, 2, 3].any? { |e| e < 2 }\n```\n\nYAML configuration example:\n\n```\nPerformance/AnyAfterFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n```","summary":"<p>This rule is used to identify usage of <code>any?</code> calls that follow filters.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of `any?` calls that follow filters.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].select { |e| e > 2 }.any?\n[1, 2, 3].reject { |e| e >= 2 }.any?\n```\n\nAnd it should be written as this:\n\n```\n[1, 2, 3].any? { |e| e > 2 }\n[1, 2, 3].any? { |e| e < 2 }\n```\n\nYAML configuration example:\n\n```\nPerformance/AnyAfterFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n```","summary":"<p>This rule is used to identify usage of <code>any?</code> calls that follow filters.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `any?` calls that follow filters.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].select { |e| e > 2 }.any?\n[1, 2, 3].reject { |e| e >= 2 }.any?\n```\n\nAnd it should be written as this:\n\n```\n[1, 2, 3].any? { |e| e > 2 }\n[1, 2, 3].any? { |e| e < 2 }\n```\n\nYAML configuration example:\n\n```\nPerformance/AnyAfterFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n```","summary":"<p>This rule is used to identify usage of <code>any?</code> calls that follow filters.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/any_after_filter.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_after_filter.cr#L29"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"filter_names:Array(String)-instance-method","name":"filter_names","abstract":false,"def":{"name":"filter_names","return_type":"Array(String)","visibility":"Public","body":"@filter_names"}},{"html_id":"filter_names=(filter_names:Array(String))-instance-method","name":"filter_names=","abstract":false,"args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"args_string":"(filter_names : Array(String))","args_html":"(filter_names : Array(String))","def":{"name":"filter_names=","args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"visibility":"Public","body":"@filter_names = filter_names"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/any_after_filter.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_after_filter.cr#L38"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name == ANY_NAME) && (obj = node.obj)\nelse\n  return\nend\nif (obj.is_a?(Crystal::Call) && obj.block) && node.block.nil?\nelse\n  return\nend\nif obj.name.in?(filter_names)\nelse\n  return\nend\nissue_for(obj.name_location, node.name_end_location, MSG % obj.name)\n"}}]},{"html_id":"ameba/Ameba/Rule/Performance/AnyInsteadOfEmpty","path":"Ameba/Rule/Performance/AnyInsteadOfEmpty.html","kind":"class","full_name":"Ameba::Rule::Performance::AnyInsteadOfEmpty","name":"AnyInsteadOfEmpty","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/any_instead_of_empty.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_instead_of_empty.cr#L30"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ANY_NAME","name":"ANY_NAME","value":"\"any?\""},{"id":"MSG","name":"MSG","value":"\"Use `!{...}.empty?` instead of `{...}.any?`\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of arg-less `Enumerable#any?` calls.\n\nUsing `Enumerable#any?` instead of `Enumerable#empty?` might lead to an\nunexpected results (like `[nil, false].any? # => false`). In some cases\nit also might be less efficient, since it iterates until the block will\nreturn a _truthy_ value, instead of just checking if there's at least\none value present.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].any?\n```\n\nAnd it should be written as this:\n\n```\n![1, 2, 3].empty?\n```\n\nYAML configuration example:\n\n```\nPerformance/AnyInsteadOfEmpty:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of arg-less <code>Enumerable#any?</code> calls.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of arg-less `Enumerable#any?` calls.\n\nUsing `Enumerable#any?` instead of `Enumerable#empty?` might lead to an\nunexpected results (like `[nil, false].any? # => false`). In some cases\nit also might be less efficient, since it iterates until the block will\nreturn a _truthy_ value, instead of just checking if there's at least\none value present.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].any?\n```\n\nAnd it should be written as this:\n\n```\n![1, 2, 3].empty?\n```\n\nYAML configuration example:\n\n```\nPerformance/AnyInsteadOfEmpty:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of arg-less <code>Enumerable#any?</code> calls.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of arg-less `Enumerable#any?` calls.\n\nUsing `Enumerable#any?` instead of `Enumerable#empty?` might lead to an\nunexpected results (like `[nil, false].any? # => false`). In some cases\nit also might be less efficient, since it iterates until the block will\nreturn a _truthy_ value, instead of just checking if there's at least\none value present.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].any?\n```\n\nAnd it should be written as this:\n\n```\n![1, 2, 3].empty?\n```\n\nYAML configuration example:\n\n```\nPerformance/AnyInsteadOfEmpty:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of arg-less <code>Enumerable#any?</code> calls.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/any_instead_of_empty.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_instead_of_empty.cr#L30"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/any_instead_of_empty.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/any_instead_of_empty.cr#L40"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if node.name == ANY_NAME\nelse\n  return\nend\nif node.block.nil? && node.args.empty?\nelse\n  return\nend\nif node.obj\nelse\n  return\nend\nif location = node.location\nelse\n  return\nend\nif name_location = node.name_location\nelse\n  return\nend\nif end_location = name_end_location(node)\nelse\n  return\nend\nissue_for(name_location, end_location, MSG) do |corrector|\n  corrector.insert_before(location, '!')\n  corrector.replace(name_location, end_location, \"empty?\")\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Performance/Base","path":"Ameba/Rule/Performance/Base.html","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base","abstract":true,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/base.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/base.cr#L5"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"subclasses":[{"html_id":"ameba/Ameba/Rule/Performance/AnyAfterFilter","kind":"class","full_name":"Ameba::Rule::Performance::AnyAfterFilter","name":"AnyAfterFilter"},{"html_id":"ameba/Ameba/Rule/Performance/AnyInsteadOfEmpty","kind":"class","full_name":"Ameba::Rule::Performance::AnyInsteadOfEmpty","name":"AnyInsteadOfEmpty"},{"html_id":"ameba/Ameba/Rule/Performance/ChainedCallWithNoBang","kind":"class","full_name":"Ameba::Rule::Performance::ChainedCallWithNoBang","name":"ChainedCallWithNoBang"},{"html_id":"ameba/Ameba/Rule/Performance/CompactAfterMap","kind":"class","full_name":"Ameba::Rule::Performance::CompactAfterMap","name":"CompactAfterMap"},{"html_id":"ameba/Ameba/Rule/Performance/FirstLastAfterFilter","kind":"class","full_name":"Ameba::Rule::Performance::FirstLastAfterFilter","name":"FirstLastAfterFilter"},{"html_id":"ameba/Ameba/Rule/Performance/FlattenAfterMap","kind":"class","full_name":"Ameba::Rule::Performance::FlattenAfterMap","name":"FlattenAfterMap"},{"html_id":"ameba/Ameba/Rule/Performance/MapInsteadOfBlock","kind":"class","full_name":"Ameba::Rule::Performance::MapInsteadOfBlock","name":"MapInsteadOfBlock"},{"html_id":"ameba/Ameba/Rule/Performance/SizeAfterFilter","kind":"class","full_name":"Ameba::Rule::Performance::SizeAfterFilter","name":"SizeAfterFilter"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"A general base class for performance rules.","summary":"<p>A general base class for performance rules.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A general base class for performance rules.","summary":"<p>A general base class for performance rules.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/base.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/base.cr#L5"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"catch(source:Source)-instance-method","name":"catch","doc":"A convenient addition to `#test` method that does the same\nbut returns a passed in `source` as an addition.\n\n```\nsource = MyRule.new.catch(source)\nsource.valid?\n```","summary":"<p>A convenient addition to <code>#test</code> method that does the same but returns a passed in <code>source</code> as an addition.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/rule/performance/base.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/base.cr#L6"},"def":{"name":"catch","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":"source.spec? ? source : super(source)"}}]},{"html_id":"ameba/Ameba/Rule/Performance/ChainedCallWithNoBang","path":"Ameba/Rule/Performance/ChainedCallWithNoBang.html","kind":"class","full_name":"Ameba::Rule::Performance::ChainedCallWithNoBang","name":"ChainedCallWithNoBang","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/chained_call_with_no_bang.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/chained_call_with_no_bang.cr#L39"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALLOCATING_METHOD_NAMES","name":"ALLOCATING_METHOD_NAMES","value":"[\"keys\", \"values\", \"values_at\", \"map\", \"map_with_index\", \"flat_map\", \"compact_map\", \"flatten\", \"compact\", \"select\", \"reject\", \"sample\", \"group_by\", \"chunks\", \"tally\", \"merge\", \"combinations\", \"repeated_combinations\", \"permutations\", \"repeated_permutations\", \"transpose\", \"invert\", \"chars\", \"captures\", \"named_captures\", \"clone\"] of ::String","doc":"All these methods are allocating a new object","summary":"<p>All these methods are allocating a new object</p>"},{"id":"MSG","name":"MSG","value":"\"Use bang method variant `%s!` after chained `%s` call\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of chained calls not utilizing\nthe bang method variants.\n\nFor example, this is considered inefficient:\n\n```\nnames = %w[Alice Bob]\nchars = names\n  .flat_map(&.chars)\n  .uniq\n  .sort\n```\n\nAnd can be written as this:\n\n```\nnames = %w[Alice Bob]\nchars = names\n  .flat_map(&.chars)\n  .uniq!\n  .sort!\n```\n\nYAML configuration example:\n\n```\nPerformance/ChainedCallWithNoBang:\n  Enabled: true\n  CallNames:\n    - uniq\n    - sort\n    - sort_by\n    - shuffle\n    - reverse\n```","summary":"<p>This rule is used to identify usage of chained calls not utilizing the bang method variants.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of chained calls not utilizing\nthe bang method variants.\n\nFor example, this is considered inefficient:\n\n```\nnames = %w[Alice Bob]\nchars = names\n  .flat_map(&.chars)\n  .uniq\n  .sort\n```\n\nAnd can be written as this:\n\n```\nnames = %w[Alice Bob]\nchars = names\n  .flat_map(&.chars)\n  .uniq!\n  .sort!\n```\n\nYAML configuration example:\n\n```\nPerformance/ChainedCallWithNoBang:\n  Enabled: true\n  CallNames:\n    - uniq\n    - sort\n    - sort_by\n    - shuffle\n    - reverse\n```","summary":"<p>This rule is used to identify usage of chained calls not utilizing the bang method variants.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of chained calls not utilizing\nthe bang method variants.\n\nFor example, this is considered inefficient:\n\n```\nnames = %w[Alice Bob]\nchars = names\n  .flat_map(&.chars)\n  .uniq\n  .sort\n```\n\nAnd can be written as this:\n\n```\nnames = %w[Alice Bob]\nchars = names\n  .flat_map(&.chars)\n  .uniq!\n  .sort!\n```\n\nYAML configuration example:\n\n```\nPerformance/ChainedCallWithNoBang:\n  Enabled: true\n  CallNames:\n    - uniq\n    - sort\n    - sort_by\n    - shuffle\n    - reverse\n```","summary":"<p>This rule is used to identify usage of chained calls not utilizing the bang method variants.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/chained_call_with_no_bang.cr","line_number":39,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/chained_call_with_no_bang.cr#L39"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"call_names:Array(String)-instance-method","name":"call_names","abstract":false,"def":{"name":"call_names","return_type":"Array(String)","visibility":"Public","body":"@call_names"}},{"html_id":"call_names=(call_names:Array(String))-instance-method","name":"call_names=","abstract":false,"args":[{"name":"call_names","external_name":"call_names","restriction":"Array(String)"}],"args_string":"(call_names : Array(String))","args_html":"(call_names : Array(String))","def":{"name":"call_names=","args":[{"name":"call_names","external_name":"call_names","restriction":"Array(String)"}],"visibility":"Public","body":"@call_names = call_names"}},{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/chained_call_with_no_bang.cr","line_number":70,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/chained_call_with_no_bang.cr#L70"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if location = node.name_location\nelse\n  return\nend\nif end_location = name_end_location(node)\nelse\n  return\nend\nif (obj = node.obj).is_a?(Crystal::Call)\nelse\n  return\nend\nif node.name.in?(call_names)\nelse\n  return\nend\nif (obj.name.in?(call_names)) || (obj.name.in?(ALLOCATING_METHOD_NAMES))\nelse\n  return\nend\nissue_for(location, end_location, MSG % {node.name, obj.name}) do |corrector|\n  corrector.insert_after(end_location, '!')\nend\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/performance/chained_call_with_no_bang.cr","line_number":61,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/chained_call_with_no_bang.cr#L61"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Performance/CompactAfterMap","path":"Ameba/Rule/Performance/CompactAfterMap.html","kind":"class","full_name":"Ameba::Rule::Performance::CompactAfterMap","name":"CompactAfterMap","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/compact_after_map.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/compact_after_map.cr#L24"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"COMPACT_NAME","name":"COMPACT_NAME","value":"\"compact\""},{"id":"MAP_NAME","name":"MAP_NAME","value":"\"map\""},{"id":"MSG","name":"MSG","value":"\"Use `compact_map {...}` instead of `map {...}.compact`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of `compact` calls that follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n%w[Alice Bob].map(&.match(/^A./)).compact\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].compact_map(&.match(/^A./))\n```\n\nYAML configuration example:\n\n```\nPerformance/CompactAfterMap:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>compact</code> calls that follow <code>map</code>.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of `compact` calls that follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n%w[Alice Bob].map(&.match(/^A./)).compact\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].compact_map(&.match(/^A./))\n```\n\nYAML configuration example:\n\n```\nPerformance/CompactAfterMap:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>compact</code> calls that follow <code>map</code>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `compact` calls that follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n%w[Alice Bob].map(&.match(/^A./)).compact\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].compact_map(&.match(/^A./))\n```\n\nYAML configuration example:\n\n```\nPerformance/CompactAfterMap:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>compact</code> calls that follow <code>map</code>.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/compact_after_map.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/compact_after_map.cr#L24"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/compact_after_map.cr","line_number":42,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/compact_after_map.cr#L42"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name == COMPACT_NAME) && (obj = node.obj)\nelse\n  return\nend\nif obj.is_a?(Crystal::Call) && obj.block\nelse\n  return\nend\nif obj.name == MAP_NAME\nelse\n  return\nend\nissue_for(obj.name_location, node.name_end_location, MSG)\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/performance/compact_after_map.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/compact_after_map.cr#L33"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Performance/FirstLastAfterFilter","path":"Ameba/Rule/Performance/FirstLastAfterFilter.html","kind":"class","full_name":"Ameba::Rule::Performance::FirstLastAfterFilter","name":"FirstLastAfterFilter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/first_last_after_filter.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/first_last_after_filter.cr#L28"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CALL_NAMES","name":"CALL_NAMES","value":"[\"first\", \"last\", \"first?\", \"last?\"] of ::String"},{"id":"MSG","name":"MSG","value":"\"Use `find {...}` instead of `%s {...}.%s`\""},{"id":"MSG_REVERSE","name":"MSG_REVERSE","value":"\"Use `reverse_each.find {...}` instead of `%s {...}.%s`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of `first/last/first?/last?` calls that follow filters.\n\nFor example, this is considered inefficient:\n\n```\n[-1, 0, 1, 2].select { |e| e > 0 }.first?\n[-1, 0, 1, 2].select { |e| e > 0 }.last?\n```\n\nAnd can be written as this:\n\n```\n[-1, 0, 1, 2].find { |e| e > 0 }\n[-1, 0, 1, 2].reverse_each.find { |e| e > 0 }\n```\n\nYAML configuration example:\n\n```\nPerformance/FirstLastAfterFilter\n  Enabled: true\n  FilterNames:\n    - select\n```","summary":"<p>This rule is used to identify usage of <code>first/last/first?/last?</code> calls that follow filters.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of `first/last/first?/last?` calls that follow filters.\n\nFor example, this is considered inefficient:\n\n```\n[-1, 0, 1, 2].select { |e| e > 0 }.first?\n[-1, 0, 1, 2].select { |e| e > 0 }.last?\n```\n\nAnd can be written as this:\n\n```\n[-1, 0, 1, 2].find { |e| e > 0 }\n[-1, 0, 1, 2].reverse_each.find { |e| e > 0 }\n```\n\nYAML configuration example:\n\n```\nPerformance/FirstLastAfterFilter\n  Enabled: true\n  FilterNames:\n    - select\n```","summary":"<p>This rule is used to identify usage of <code>first/last/first?/last?</code> calls that follow filters.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `first/last/first?/last?` calls that follow filters.\n\nFor example, this is considered inefficient:\n\n```\n[-1, 0, 1, 2].select { |e| e > 0 }.first?\n[-1, 0, 1, 2].select { |e| e > 0 }.last?\n```\n\nAnd can be written as this:\n\n```\n[-1, 0, 1, 2].find { |e| e > 0 }\n[-1, 0, 1, 2].reverse_each.find { |e| e > 0 }\n```\n\nYAML configuration example:\n\n```\nPerformance/FirstLastAfterFilter\n  Enabled: true\n  FilterNames:\n    - select\n```","summary":"<p>This rule is used to identify usage of <code>first/last/first?/last?</code> calls that follow filters.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/first_last_after_filter.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/first_last_after_filter.cr#L28"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"filter_names:Array(String)-instance-method","name":"filter_names","abstract":false,"def":{"name":"filter_names","return_type":"Array(String)","visibility":"Public","body":"@filter_names"}},{"html_id":"filter_names=(filter_names:Array(String))-instance-method","name":"filter_names=","abstract":false,"args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"args_string":"(filter_names : Array(String))","args_html":"(filter_names : Array(String))","def":{"name":"filter_names=","args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"visibility":"Public","body":"@filter_names = filter_names"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/first_last_after_filter.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/first_last_after_filter.cr#L47"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name.in?(CALL_NAMES)) && (obj = node.obj)\nelse\n  return\nend\nif obj.is_a?(Crystal::Call) && obj.block\nelse\n  return\nend\nif node.block.nil? && node.args.empty?\nelse\n  return\nend\nif obj.name.in?(filter_names)\nelse\n  return\nend\nmessage = node.name.includes?(CALL_NAMES.first) ? MSG : MSG_REVERSE\nissue_for(obj.name_location, node.name_end_location, message % {obj.name, node.name})\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/performance/first_last_after_filter.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/first_last_after_filter.cr#L38"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Performance/FlattenAfterMap","path":"Ameba/Rule/Performance/FlattenAfterMap.html","kind":"class","full_name":"Ameba::Rule::Performance::FlattenAfterMap","name":"FlattenAfterMap","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/flatten_after_map.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/flatten_after_map.cr#L24"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FLATTEN_NAME","name":"FLATTEN_NAME","value":"\"flatten\""},{"id":"MAP_NAME","name":"MAP_NAME","value":"\"map\""},{"id":"MSG","name":"MSG","value":"\"Use `flat_map {...}` instead of `map {...}.flatten`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of `flatten` calls that follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n%w[Alice Bob].map(&.chars).flatten\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].flat_map(&.chars)\n```\n\nYAML configuration example:\n\n```\nPerformance/FlattenAfterMap:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>flatten</code> calls that follow <code>map</code>.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of `flatten` calls that follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n%w[Alice Bob].map(&.chars).flatten\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].flat_map(&.chars)\n```\n\nYAML configuration example:\n\n```\nPerformance/FlattenAfterMap:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>flatten</code> calls that follow <code>map</code>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `flatten` calls that follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n%w[Alice Bob].map(&.chars).flatten\n```\n\nAnd can be written as this:\n\n```\n%w[Alice Bob].flat_map(&.chars)\n```\n\nYAML configuration example:\n\n```\nPerformance/FlattenAfterMap:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>flatten</code> calls that follow <code>map</code>.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/flatten_after_map.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/flatten_after_map.cr#L24"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/flatten_after_map.cr","line_number":42,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/flatten_after_map.cr#L42"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name == FLATTEN_NAME) && (obj = node.obj)\nelse\n  return\nend\nif obj.is_a?(Crystal::Call) && obj.block\nelse\n  return\nend\nif obj.name == MAP_NAME\nelse\n  return\nend\nissue_for(obj.name_location, node.name_end_location, MSG)\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/performance/flatten_after_map.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/flatten_after_map.cr#L33"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Performance/MapInsteadOfBlock","path":"Ameba/Rule/Performance/MapInsteadOfBlock.html","kind":"class","full_name":"Ameba::Rule::Performance::MapInsteadOfBlock","name":"MapInsteadOfBlock","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/map_instead_of_block.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/map_instead_of_block.cr#L25"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CALL_NAMES","name":"CALL_NAMES","value":"[\"sum\", \"product\"] of ::String"},{"id":"MAP_NAME","name":"MAP_NAME","value":"\"map\""},{"id":"MSG","name":"MSG","value":"\"Use `%s {...}` instead of `map {...}.%s`\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of `sum/product` calls\nthat follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n(1..3).map(&.*(2)).sum\n```\n\nAnd can be written as this:\n\n```\n(1..3).sum(&.*(2))\n```\n\nYAML configuration example:\n\n```\nPerformance/MapInsteadOfBlock:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>sum/product</code> calls that follow <code>map</code>.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of `sum/product` calls\nthat follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n(1..3).map(&.*(2)).sum\n```\n\nAnd can be written as this:\n\n```\n(1..3).sum(&.*(2))\n```\n\nYAML configuration example:\n\n```\nPerformance/MapInsteadOfBlock:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>sum/product</code> calls that follow <code>map</code>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `sum/product` calls\nthat follow `map`.\n\nFor example, this is considered inefficient:\n\n```\n(1..3).map(&.*(2)).sum\n```\n\nAnd can be written as this:\n\n```\n(1..3).sum(&.*(2))\n```\n\nYAML configuration example:\n\n```\nPerformance/MapInsteadOfBlock:\n  Enabled: true\n```","summary":"<p>This rule is used to identify usage of <code>sum/product</code> calls that follow <code>map</code>.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/map_instead_of_block.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/map_instead_of_block.cr#L25"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/map_instead_of_block.cr","line_number":43,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/map_instead_of_block.cr#L43"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name.in?(CALL_NAMES)) && (obj = node.obj)\nelse\n  return\nend\nif obj.is_a?(Crystal::Call) && obj.block\nelse\n  return\nend\nif obj.name == MAP_NAME\nelse\n  return\nend\nissue_for(obj.name_location, node.name_end_location, MSG % {node.name, node.name})\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/performance/map_instead_of_block.cr","line_number":34,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/map_instead_of_block.cr#L34"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Performance/SizeAfterFilter","path":"Ameba/Rule/Performance/SizeAfterFilter.html","kind":"class","full_name":"Ameba::Rule::Performance::SizeAfterFilter","name":"SizeAfterFilter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Performance/Base","kind":"class","full_name":"Ameba::Rule::Performance::Base","name":"Base"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/performance/size_after_filter.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/size_after_filter.cr#L35"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Use `count {...}` instead of `%s {...}.size`.\""},{"id":"SIZE_NAME","name":"SIZE_NAME","value":"\"size\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Performance","kind":"module","full_name":"Ameba::Rule::Performance","name":"Performance"},"doc":"This rule is used to identify usage of `size` calls that follow filter.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].select { |e| e > 2 }.size\n[1, 2, 3].reject { |e| e < 2 }.size\n[1, 2, 3].select(&.< 2).size\n[0, 1, 2].select(&.zero?).size\n[0, 1, 2].reject(&.zero?).size\n```\n\nAnd it should be written as this:\n\n```\n[1, 2, 3].count { |e| e > 2 }\n[1, 2, 3].count { |e| e >= 2 }\n[1, 2, 3].count(&.< 2)\n[0, 1, 2].count(&.zero?)\n[0, 1, 2].count(&.!= 0)\n```\n\nYAML configuration example:\n\n```\nPerformance/SizeAfterFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n```","summary":"<p>This rule is used to identify usage of <code>size</code> calls that follow filter.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"This rule is used to identify usage of `size` calls that follow filter.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].select { |e| e > 2 }.size\n[1, 2, 3].reject { |e| e < 2 }.size\n[1, 2, 3].select(&.< 2).size\n[0, 1, 2].select(&.zero?).size\n[0, 1, 2].reject(&.zero?).size\n```\n\nAnd it should be written as this:\n\n```\n[1, 2, 3].count { |e| e > 2 }\n[1, 2, 3].count { |e| e >= 2 }\n[1, 2, 3].count(&.< 2)\n[0, 1, 2].count(&.zero?)\n[0, 1, 2].count(&.!= 0)\n```\n\nYAML configuration example:\n\n```\nPerformance/SizeAfterFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n```","summary":"<p>This rule is used to identify usage of <code>size</code> calls that follow filter.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `size` calls that follow filter.\n\nFor example, this is considered invalid:\n\n```\n[1, 2, 3].select { |e| e > 2 }.size\n[1, 2, 3].reject { |e| e < 2 }.size\n[1, 2, 3].select(&.< 2).size\n[0, 1, 2].select(&.zero?).size\n[0, 1, 2].reject(&.zero?).size\n```\n\nAnd it should be written as this:\n\n```\n[1, 2, 3].count { |e| e > 2 }\n[1, 2, 3].count { |e| e >= 2 }\n[1, 2, 3].count(&.< 2)\n[0, 1, 2].count(&.zero?)\n[0, 1, 2].count(&.!= 0)\n```\n\nYAML configuration example:\n\n```\nPerformance/SizeAfterFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n```","summary":"<p>This rule is used to identify usage of <code>size</code> calls that follow filter.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/performance/size_after_filter.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/size_after_filter.cr#L35"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"filter_names:Array(String)-instance-method","name":"filter_names","abstract":false,"def":{"name":"filter_names","return_type":"Array(String)","visibility":"Public","body":"@filter_names"}},{"html_id":"filter_names=(filter_names:Array(String))-instance-method","name":"filter_names=","abstract":false,"args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"args_string":"(filter_names : Array(String))","args_html":"(filter_names : Array(String))","def":{"name":"filter_names=","args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"visibility":"Public","body":"@filter_names = filter_names"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/performance/size_after_filter.cr","line_number":53,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/size_after_filter.cr#L53"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (node.name == SIZE_NAME) && (obj = node.obj)\nelse\n  return\nend\nif obj.is_a?(Crystal::Call) && obj.block\nelse\n  return\nend\nif obj.name.in?(filter_names)\nelse\n  return\nend\nissue_for(obj.name_location, node.name_end_location, MSG % obj.name)\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/performance/size_after_filter.cr","line_number":44,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/performance/size_after_filter.cr#L44"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]}]},{"html_id":"ameba/Ameba/Rule/Style","path":"Ameba/Rule/Style.html","kind":"module","full_name":"Ameba::Rule::Style","name":"Style","abstract":false,"locations":[{"filename":"src/ameba/rule/style/constant_names.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/constant_names.cr#L1"},{"filename":"src/ameba/rule/style/guard_clause.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/guard_clause.cr#L1"},{"filename":"src/ameba/rule/style/is_a_filter.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_filter.cr#L1"},{"filename":"src/ameba/rule/style/is_a_nil.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_nil.cr#L1"},{"filename":"src/ameba/rule/style/large_numbers.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/large_numbers.cr#L1"},{"filename":"src/ameba/rule/style/method_names.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/method_names.cr#L1"},{"filename":"src/ameba/rule/style/negated_conditions_in_unless.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/negated_conditions_in_unless.cr#L1"},{"filename":"src/ameba/rule/style/predicate_name.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/predicate_name.cr#L1"},{"filename":"src/ameba/rule/style/redundant_begin.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_begin.cr#L1"},{"filename":"src/ameba/rule/style/redundant_next.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_next.cr#L1"},{"filename":"src/ameba/rule/style/redundant_return.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_return.cr#L1"},{"filename":"src/ameba/rule/style/type_names.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L1"},{"filename":"src/ameba/rule/style/unless_else.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/unless_else.cr#L1"},{"filename":"src/ameba/rule/style/variable_names.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/variable_names.cr#L1"},{"filename":"src/ameba/rule/style/verbose_block.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/verbose_block.cr#L1"},{"filename":"src/ameba/rule/style/while_true.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/while_true.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Rule","kind":"module","full_name":"Ameba::Rule","name":"Rule"},"types":[{"html_id":"ameba/Ameba/Rule/Style/ConstantNames","path":"Ameba/Rule/Style/ConstantNames.html","kind":"class","full_name":"Ameba::Rule::Style::ConstantNames","name":"ConstantNames","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/constant_names.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/constant_names.cr#L24"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Constant name should be screaming-cased: %s, not %s\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that enforces constant names to be in screaming case.\n\nFor example, these constant names are considered valid:\n\n```\nLUCKY_NUMBERS     = [3, 7, 11]\nDOCUMENTATION_URL = \"http://crystal-lang.org/docs\"\n```\n\nAnd these are invalid names:\n\n```\nmyBadConstant = 1\nWrong_NAME = 2\n```\n\nYAML configuration example:\n\n```\nStyle/ConstantNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces constant names to be in screaming case.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that enforces constant names to be in screaming case.\n\nFor example, these constant names are considered valid:\n\n```\nLUCKY_NUMBERS     = [3, 7, 11]\nDOCUMENTATION_URL = \"http://crystal-lang.org/docs\"\n```\n\nAnd these are invalid names:\n\n```\nmyBadConstant = 1\nWrong_NAME = 2\n```\n\nYAML configuration example:\n\n```\nStyle/ConstantNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces constant names to be in screaming case.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/constant_names.cr","line_number":24,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/constant_names.cr#L24"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Assign)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Assign"}],"args_string":"(source, node : Crystal::Assign)","args_html":"(source, node : Crystal::Assign)","location":{"filename":"src/ameba/rule/style/constant_names.cr","line_number":31,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/constant_names.cr#L31"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Assign"}],"visibility":"Public","body":"if (target = node.target).is_a?(Crystal::Path)\nelse\n  return\nend\nname = target.names.first\nexpected = name.upcase\nif name.in?(expected, name.camelcase)\n  return\nend\nissue_for(target, MSG % {expected, name})\n"}}]},{"html_id":"ameba/Ameba/Rule/Style/GuardClause","path":"Ameba/Rule/Style/GuardClause.html","kind":"class","full_name":"Ameba::Rule::Style::GuardClause","name":"GuardClause","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/guard_clause.cr","line_number":54,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/guard_clause.cr#L54"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Use a guard clause (`%s`) instead of wrapping the code inside a conditional expression.\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"Use a guard clause instead of wrapping the code inside a conditional\nexpression\n\n```\n# bad\ndef test\n  if something\n    work\n  end\nend\n\n# good\ndef test\n  return unless something\n\n  work\nend\n\n# also good\ndef test\n  work if something\nend\n\n# bad\nif something\n  raise \"exception\"\nelse\n  ok\nend\n\n# good\nraise \"exception\" if something\nok\n\n# bad\nif something\n  foo || raise(\"exception\")\nelse\n  ok\nend\n\n# good\nfoo || raise(\"exception\") if something\nok\n```\n\nYAML configuration example:\n\n```\nStyle/GuardClause:\n  Enabled: true\n```","summary":"<p>Use a guard clause instead of wrapping the code inside a conditional expression</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"Use a guard clause instead of wrapping the code inside a conditional\nexpression\n\n```\n# bad\ndef test\n  if something\n    work\n  end\nend\n\n# good\ndef test\n  return unless something\n\n  work\nend\n\n# also good\ndef test\n  work if something\nend\n\n# bad\nif something\n  raise \"exception\"\nelse\n  ok\nend\n\n# good\nraise \"exception\" if something\nok\n\n# bad\nif something\n  foo || raise(\"exception\")\nelse\n  ok\nend\n\n# good\nfoo || raise(\"exception\") if something\nok\n```\n\nYAML configuration example:\n\n```\nStyle/GuardClause:\n  Enabled: true\n```","summary":"<p>Use a guard clause instead of wrapping the code inside a conditional expression</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/guard_clause.cr","line_number":54,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/guard_clause.cr#L54"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","return_type":"Bool","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"guard_clause_source(source,guard_clause,parent)-instance-method","name":"guard_clause_source","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"guard_clause","external_name":"guard_clause","restriction":""},{"name":"parent","external_name":"parent","restriction":""}],"args_string":"(source, guard_clause, parent)","args_html":"(source, guard_clause, parent)","location":{"filename":"src/ameba/rule/style/guard_clause.cr","line_number":177,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/guard_clause.cr#L177"},"def":{"name":"guard_clause_source","args":[{"name":"source","external_name":"source","restriction":""},{"name":"guard_clause","external_name":"guard_clause","restriction":""},{"name":"parent","external_name":"parent","restriction":""}],"visibility":"Public","body":"if parent.is_a?(Crystal::And) || parent.is_a?(Crystal::Or)\n  node_source(parent, source.lines)\nelse\n  node_source(guard_clause, source.lines)\nend"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Def)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"args_string":"(source, node : Crystal::Def)","args_html":"(source, node : Crystal::Def)","location":{"filename":"src/ameba/rule/style/guard_clause.cr","line_number":69,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/guard_clause.cr#L69"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"visibility":"Public","body":"final_expression = if (body = node.body).is_a?(Crystal::Expressions)\n  body.last\nelse\n  body\nend\ncase final_expression\nwhen Crystal::If, Crystal::Unless\n  check_ending_if(source, final_expression)\nend\n"}},{"html_id":"test(source,node:Crystal::If|Crystal::Unless)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::If | Crystal::Unless"}],"args_string":"(source, node : Crystal::If | Crystal::Unless)","args_html":"(source, node : Crystal::If | Crystal::Unless)","location":{"filename":"src/ameba/rule/style/guard_clause.cr","line_number":83,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/guard_clause.cr#L83"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::If | Crystal::Unless"}],"visibility":"Public","body":"if accepted_form?(source, node, ending: false)\n  return\nend\ncase\nwhen guard_clause = guard_clause(node.then)\n  parent, conditional_keyword = node.then, keyword(node)\nwhen guard_clause = guard_clause(node.else)\n  parent, conditional_keyword = node.else, opposite_keyword(node)\nend\nif (guard_clause && parent) && conditional_keyword\nelse\n  return\nend\nguard_clause_source = guard_clause_source(source, guard_clause, parent)\nreport_issue(source, node, guard_clause_source, conditional_keyword)\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/style/guard_clause.cr","line_number":65,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/guard_clause.cr#L65"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Assign])"}}]},{"html_id":"ameba/Ameba/Rule/Style/IsAFilter","path":"Ameba/Rule/Style/IsAFilter.html","kind":"class","full_name":"Ameba::Rule::Style::IsAFilter","name":"IsAFilter","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/is_a_filter.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_filter.cr#L41"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Use `%s` instead of `%s`\""},{"id":"NEW","name":"NEW","value":"\"%s(%s)\""},{"id":"OLD","name":"OLD","value":"\"%s {...}\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"This rule is used to identify usage of `is_a?/nil?` calls within filters.\n\nFor example, this is considered invalid:\n\n```\nmatches = %w[Alice Bob].map(&.match(/^A./))\n\nmatches.any?(&.is_a?(Regex::MatchData)) # => true\nmatches.one?(&.nil?)                    # => true\n\ntypeof(matches.reject(&.nil?))                    # => Array(Regex::MatchData | Nil)\ntypeof(matches.select(&.is_a?(Regex::MatchData))) # => Array(Regex::MatchData | Nil)\n```\n\nAnd it should be written as this:\n\n```\nmatches = %w[Alice Bob].map(&.match(/^A./))\n\nmatches.any?(Regex::MatchData) # => true\nmatches.one?(Nil)              # => true\n\ntypeof(matches.reject(Nil))              # => Array(Regex::MatchData)\ntypeof(matches.select(Regex::MatchData)) # => Array(Regex::MatchData)\n```\n\nYAML configuration example:\n\n```\nStyle/IsAFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n    - any?\n    - all?\n    - none?\n    - one?\n```","summary":"<p>This rule is used to identify usage of <code>is_a?/nil?</code> calls within filters.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of `is_a?/nil?` calls within filters.\n\nFor example, this is considered invalid:\n\n```\nmatches = %w[Alice Bob].map(&.match(/^A./))\n\nmatches.any?(&.is_a?(Regex::MatchData)) # => true\nmatches.one?(&.nil?)                    # => true\n\ntypeof(matches.reject(&.nil?))                    # => Array(Regex::MatchData | Nil)\ntypeof(matches.select(&.is_a?(Regex::MatchData))) # => Array(Regex::MatchData | Nil)\n```\n\nAnd it should be written as this:\n\n```\nmatches = %w[Alice Bob].map(&.match(/^A./))\n\nmatches.any?(Regex::MatchData) # => true\nmatches.one?(Nil)              # => true\n\ntypeof(matches.reject(Nil))              # => Array(Regex::MatchData)\ntypeof(matches.select(Regex::MatchData)) # => Array(Regex::MatchData)\n```\n\nYAML configuration example:\n\n```\nStyle/IsAFilter:\n  Enabled: true\n  FilterNames:\n    - select\n    - reject\n    - any?\n    - all?\n    - none?\n    - one?\n```","summary":"<p>This rule is used to identify usage of <code>is_a?/nil?</code> calls within filters.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/is_a_filter.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_filter.cr#L41"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"filter_names:Array(String)-instance-method","name":"filter_names","abstract":false,"def":{"name":"filter_names","return_type":"Array(String)","visibility":"Public","body":"@filter_names"}},{"html_id":"filter_names=(filter_names:Array(String))-instance-method","name":"filter_names=","abstract":false,"args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"args_string":"(filter_names : Array(String))","args_html":"(filter_names : Array(String))","def":{"name":"filter_names=","args":[{"name":"filter_names","external_name":"filter_names","restriction":"Array(String)"}],"visibility":"Public","body":"@filter_names = filter_names"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/style/is_a_filter.cr","line_number":60,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_filter.cr#L60"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if node.name.in?(filter_names)\nelse\n  return\nend\nif filter_location = node.name_location\nelse\n  return\nend\nif block = node.block\nelse\n  return\nend\nif (body = block.body).is_a?(Crystal::IsA)\nelse\n  return\nend\nif (path = body.const).is_a?(Crystal::Path)\nelse\n  return\nend\nif body.obj.is_a?(Crystal::Var)\nelse\n  return\nend\nif block.args.size > 1\n  return\nend\nname = path.names.join(\"::\")\nif path.global? && (!body.nil_check?)\n  name = \"::#{name}\"\nend\nend_location = node.end_location\nif (!end_location) || end_location.try do |__arg0|\n  __arg0.column_number.zero?\nend\n  if end_location = path.end_location\n    end_location = end_location.adjust(column_number: 1)\n  end\nend\nold = OLD % node.name\nnew = NEW % {node.name, name}\nmsg = MSG % {new, old}\nif end_location\n  issue_for(filter_location, end_location, msg) do |corrector|\n    corrector.replace(filter_location, end_location, new)\n  end\nelse\n  issue_for(filter_location, nil, msg)\nend\n"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/style/is_a_filter.cr","line_number":51,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_filter.cr#L51"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"AST::NodeVisitor.new(self, source, skip: [Crystal::Macro, Crystal::MacroExpression, Crystal::MacroIf, Crystal::MacroFor])"}}]},{"html_id":"ameba/Ameba/Rule/Style/IsANil","path":"Ameba/Rule/Style/IsANil.html","kind":"class","full_name":"Ameba::Rule::Style::IsANil","name":"IsANil","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/is_a_nil.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_nil.cr#L22"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Use `nil?` instead of `is_a?(Nil)`\""},{"id":"PATH_NIL_NAMES","name":"PATH_NIL_NAMES","value":"[\"Nil\"] of ::String"}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows calls to `is_a?(Nil)` in favor of `nil?`.\n\nThis is considered bad:\n\n```\nvar.is_a?(Nil)\n```\n\nAnd needs to be written as:\n\n```\nvar.nil?\n```\n\nYAML configuration example:\n\n```\nStyle/IsANil:\n  Enabled: true\n```","summary":"<p>A rule that disallows calls to <code>is_a?(Nil)</code> in favor of <code>nil?</code>.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows calls to `is_a?(Nil)` in favor of `nil?`.\n\nThis is considered bad:\n\n```\nvar.is_a?(Nil)\n```\n\nAnd needs to be written as:\n\n```\nvar.nil?\n```\n\nYAML configuration example:\n\n```\nStyle/IsANil:\n  Enabled: true\n```","summary":"<p>A rule that disallows calls to <code>is_a?(Nil)</code> in favor of <code>nil?</code>.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/is_a_nil.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_nil.cr#L22"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::IsA)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::IsA"}],"args_string":"(source, node : Crystal::IsA)","args_html":"(source, node : Crystal::IsA)","location":{"filename":"src/ameba/rule/style/is_a_nil.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/is_a_nil.cr#L30"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::IsA"}],"visibility":"Public","body":"if node.nil_check?\n  return\nend\nconst = node.const\nif const.is_a?(Crystal::Path)\nelse\n  return\nend\nif const.names == PATH_NIL_NAMES\nelse\n  return\nend\nissue_for(const, MSG)\n"}}]},{"html_id":"ameba/Ameba/Rule/Style/LargeNumbers","path":"Ameba/Rule/Style/LargeNumbers.html","kind":"class","full_name":"Ameba::Rule::Style::LargeNumbers","name":"LargeNumbers","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/large_numbers.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/large_numbers.cr#L29"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Large numbers should be written with underscores: %s\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows usage of large numbers without underscore.\nThese do not affect the value of the number, but can help read\nlarge numbers more easily.\n\nFor example, these are considered invalid:\n\n```\n100000\n141592654\n5.123456\n```\n\nAnd has to be rewritten as the following:\n\n```\n100_000\n141_592_654\n5.123_456\n```\n\nYAML configuration example:\n\n```\nStyle/LargeNumbers:\n  Enabled: true\n  IntMinDigits: 6 # i.e. integers higher than 99999\n```","summary":"<p>A rule that disallows usage of large numbers without underscore.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows usage of large numbers without underscore.\nThese do not affect the value of the number, but can help read\nlarge numbers more easily.\n\nFor example, these are considered invalid:\n\n```\n100000\n141592654\n5.123456\n```\n\nAnd has to be rewritten as the following:\n\n```\n100_000\n141_592_654\n5.123_456\n```\n\nYAML configuration example:\n\n```\nStyle/LargeNumbers:\n  Enabled: true\n  IntMinDigits: 6 # i.e. integers higher than 99999\n```","summary":"<p>A rule that disallows usage of large numbers without underscore.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/large_numbers.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/large_numbers.cr#L29"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","return_type":"Bool","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"int_min_digits:Int32-instance-method","name":"int_min_digits","abstract":false,"def":{"name":"int_min_digits","return_type":"Int32","visibility":"Public","body":"@int_min_digits"}},{"html_id":"int_min_digits=(int_min_digits:Int32)-instance-method","name":"int_min_digits=","abstract":false,"args":[{"name":"int_min_digits","external_name":"int_min_digits","restriction":"Int32"}],"args_string":"(int_min_digits : Int32)","args_html":"(int_min_digits : Int32)","def":{"name":"int_min_digits=","args":[{"name":"int_min_digits","external_name":"int_min_digits","restriction":"Int32"}],"visibility":"Public","body":"@int_min_digits = int_min_digits"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/rule/style/large_numbers.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/large_numbers.cr#L38"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"(Tokenizer.new(source)).run do |token|\n  if token.type.number? && (decimal?(token.raw))\n  else\n    next\n  end\n  parsed = parse_number(token.raw)\n  if (allowed?(*parsed)) && ((expected = underscored(*parsed)) != token.raw)\n    location = token.location\n    end_location = location.adjust(column_number: token.raw.size - 1)\n    issue_for(location, end_location, MSG % expected) do |corrector|\n      corrector.replace(location, end_location, expected)\n    end\n  end\nend"}}]},{"html_id":"ameba/Ameba/Rule/Style/MethodNames","path":"Ameba/Rule/Style/MethodNames.html","kind":"class","full_name":"Ameba::Rule::Style::MethodNames","name":"MethodNames","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/method_names.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/method_names.cr#L40"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Method name should be underscore-cased: %s, not %s\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that enforces method names to be in underscored case.\n\nFor example, these are considered valid:\n\n```\nclass Person\n  def first_name\n  end\n\n  def date_of_birth\n  end\n\n  def homepage_url\n  end\nend\n```\n\nAnd these are invalid method names:\n\n```\nclass Person\n  def firstName\n  end\n\n  def date_of_Birth\n  end\n\n  def homepageURL\n  end\nend\n```\n\nYAML configuration example:\n\n```\nStyle/MethodNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces method names to be in underscored case.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that enforces method names to be in underscored case.\n\nFor example, these are considered valid:\n\n```\nclass Person\n  def first_name\n  end\n\n  def date_of_birth\n  end\n\n  def homepage_url\n  end\nend\n```\n\nAnd these are invalid method names:\n\n```\nclass Person\n  def firstName\n  end\n\n  def date_of_Birth\n  end\n\n  def homepageURL\n  end\nend\n```\n\nYAML configuration example:\n\n```\nStyle/MethodNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces method names to be in underscored case.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/method_names.cr","line_number":40,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/method_names.cr#L40"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Def)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"args_string":"(source, node : Crystal::Def)","args_html":"(source, node : Crystal::Def)","location":{"filename":"src/ameba/rule/style/method_names.cr","line_number":49,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/method_names.cr#L49"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"visibility":"Public","body":"if (expected = node.name.underscore) == node.name\n  return\nend\nif location = name_location(node)\nelse\n  return\nend\nif end_location = name_end_location(node)\nelse\n  return\nend\nissue_for(location, end_location, MSG % {expected, node.name})\n"}}]},{"html_id":"ameba/Ameba/Rule/Style/NegatedConditionsInUnless","path":"Ameba/Rule/Style/NegatedConditionsInUnless.html","kind":"class","full_name":"Ameba::Rule::Style::NegatedConditionsInUnless","name":"NegatedConditionsInUnless","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/negated_conditions_in_unless.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/negated_conditions_in_unless.cr#L29"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Avoid negated conditions in unless blocks\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows negated conditions in unless.\n\nFor example, this is considered invalid:\n\n```\nunless !s.empty?\n  :ok\nend\n```\n\nAnd should be rewritten to the following:\n\n```\nif s.emtpy?\n  :ok\nend\n```\n\nIt is pretty difficult to wrap your head around a block of code\nthat is executed if a negated condition is NOT met.\n\nYAML configuration example:\n\n```\nStyle/NegatedConditionsInUnless:\n  Enabled: true\n```","summary":"<p>A rule that disallows negated conditions in unless.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows negated conditions in unless.\n\nFor example, this is considered invalid:\n\n```\nunless !s.empty?\n  :ok\nend\n```\n\nAnd should be rewritten to the following:\n\n```\nif s.emtpy?\n  :ok\nend\n```\n\nIt is pretty difficult to wrap your head around a block of code\nthat is executed if a negated condition is NOT met.\n\nYAML configuration example:\n\n```\nStyle/NegatedConditionsInUnless:\n  Enabled: true\n```","summary":"<p>A rule that disallows negated conditions in unless.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/negated_conditions_in_unless.cr","line_number":29,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/negated_conditions_in_unless.cr#L29"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Unless)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"args_string":"(source, node : Crystal::Unless)","args_html":"(source, node : Crystal::Unless)","location":{"filename":"src/ameba/rule/style/negated_conditions_in_unless.cr","line_number":36,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/negated_conditions_in_unless.cr#L36"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"visibility":"Public","body":"if negated_condition?(node.cond)\n  issue_for(node, MSG)\nend"}}]},{"html_id":"ameba/Ameba/Rule/Style/PredicateName","path":"Ameba/Rule/Style/PredicateName.html","kind":"class","full_name":"Ameba::Rule::Style::PredicateName","name":"PredicateName","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/predicate_name.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/predicate_name.cr#L26"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Favour method name '%s?' over '%s'\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows tautological predicate names -\nmeaning those that start with the prefix `is_`, except for\nthe ones that are not valid Crystal code (e.g. `is_404?`).\n\nFavour this:\n\n```\ndef valid?(x)\nend\n```\n\nOver this:\n\n```\ndef is_valid?(x)\nend\n```\n\nYAML configuration example:\n\n```\nStyle/PredicateName:\n  Enabled: true\n```","summary":"<p>A rule that disallows tautological predicate names - meaning those that start with the prefix <code>is_</code>, except for the ones that are not valid Crystal code (e.g.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows tautological predicate names -\nmeaning those that start with the prefix `is_`, except for\nthe ones that are not valid Crystal code (e.g. `is_404?`).\n\nFavour this:\n\n```\ndef valid?(x)\nend\n```\n\nOver this:\n\n```\ndef is_valid?(x)\nend\n```\n\nYAML configuration example:\n\n```\nStyle/PredicateName:\n  Enabled: true\n```","summary":"<p>A rule that disallows tautological predicate names - meaning those that start with the prefix <code>is_</code>, except for the ones that are not valid Crystal code (e.g.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/predicate_name.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/predicate_name.cr#L26"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Def)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"args_string":"(source, node : Crystal::Def)","args_html":"(source, node : Crystal::Def)","location":{"filename":"src/ameba/rule/style/predicate_name.cr","line_number":33,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/predicate_name.cr#L33"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"visibility":"Public","body":"if node.name =~ (/^is_([a-z]\\w*)\\?$/)\nelse\n  return\nend\nalternative = $~[1]\nissue_for(node, MSG % {alternative, node.name})\n"}}]},{"html_id":"ameba/Ameba/Rule/Style/RedundantBegin","path":"Ameba/Rule/Style/RedundantBegin.html","kind":"class","full_name":"Ameba::Rule::Style::RedundantBegin","name":"RedundantBegin","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/redundant_begin.cr","line_number":58,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_begin.cr#L58"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Redundant `begin` block detected\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows redundant begin blocks.\n\nCurrently it is able to detect:\n\n1. Exception handler block that can be used as a part of the method.\n\nFor example, this:\n\n```\ndef method\n  begin\n    read_content\n  rescue\n    close_file\n  end\nend\n```\n\nshould be rewritten as:\n\n```\ndef method\n  read_content\nrescue\n  close_file\nend\n```\n\n2. begin..end block as a top level block in a method.\n\nFor example this is considered invalid:\n\n```\ndef method\n  begin\n    a = 1\n    b = 2\n  end\nend\n```\n\nand has to be written as the following:\n\n```\ndef method\n  a = 1\n  b = 2\nend\n```\n\nYAML configuration example:\n\n```\nStyle/RedundantBegin:\n  Enabled: true\n```","summary":"<p>A rule that disallows redundant begin blocks.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows redundant begin blocks.\n\nCurrently it is able to detect:\n\n1. Exception handler block that can be used as a part of the method.\n\nFor example, this:\n\n```\ndef method\n  begin\n    read_content\n  rescue\n    close_file\n  end\nend\n```\n\nshould be rewritten as:\n\n```\ndef method\n  read_content\nrescue\n  close_file\nend\n```\n\n2. begin..end block as a top level block in a method.\n\nFor example this is considered invalid:\n\n```\ndef method\n  begin\n    a = 1\n    b = 2\n  end\nend\n```\n\nand has to be written as the following:\n\n```\ndef method\n  a = 1\n  b = 2\nend\n```\n\nYAML configuration example:\n\n```\nStyle/RedundantBegin:\n  Enabled: true\n```","summary":"<p>A rule that disallows redundant begin blocks.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/redundant_begin.cr","line_number":58,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_begin.cr#L58"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Def)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"args_string":"(source, node : Crystal::Def)","args_html":"(source, node : Crystal::Def)","location":{"filename":"src/ameba/rule/style/redundant_begin.cr","line_number":67,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_begin.cr#L67"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"visibility":"Public","body":"if def_loc = node.location\nelse\n  return\nend\ncase body = node.body\nwhen Crystal::ExceptionHandler\n  if (begin_exprs_in_handler?(body)) || (inner_handler?(body))\n    return\n  end\nwhen Crystal::Expressions\n  if redundant_begin_in_expressions?(body)\n  else\n    return\n  end\nelse\n  return\nend\nif begin_range = def_redundant_begin_range(source, node)\nelse\n  return\nend\nbegin_loc, end_loc = begin_range\nbegin_loc, end_loc = def_loc.seek(begin_loc), def_loc.seek(end_loc)\nbegin_end_loc = begin_loc.adjust(column_number: {{ \"begin\".size - 1 }})\nend_end_loc = end_loc.adjust(column_number: {{ \"end\".size - 1 }})\nissue_for(begin_loc, begin_end_loc, MSG) do |corrector|\n  corrector.remove(begin_loc, begin_end_loc)\n  corrector.remove(end_loc, end_end_loc)\nend\n"}}]},{"html_id":"ameba/Ameba/Rule/Style/RedundantNext","path":"Ameba/Rule/Style/RedundantNext.html","kind":"class","full_name":"Ameba::Rule::Style::RedundantNext","name":"RedundantNext","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/redundant_next.cr","line_number":99,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_next.cr#L99"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Redundant `next` detected\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows redundant next expressions. A `next` keyword allows\na block to skip to the next iteration early, however, it is considered\nredundant in cases where it is the last expression in a block or combines\ninto the node which is the last in a block.\n\nFor example, this is considered invalid:\n\n```\nblock do |v|\n  next v + 1\nend\n```\n\n```\nblock do |v|\n  case v\n  when .nil?\n    next \"nil\"\n  when .blank?\n    next \"blank\"\n  else\n    next \"empty\"\n  end\nend\n```\n\nAnd has to be written as the following:\n\n```\nblock do |v|\n  v + 1\nend\n```\n\n```\nblock do |v|\n  case arg\n  when .nil?\n    \"nil\"\n  when .blank?\n    \"blank\"\n  else\n    \"empty\"\n  end\nend\n```\n\n### Configuration params\n\n1. *allow_multi_next*, default: true\n\nAllows end-user to configure whether to report or not the next statements\nwhich yield tuple literals i.e.\n\n```\nblock do\n  next a, b\nend\n```\n\nIf this param equals to `false`, the block above will be forced to be written as:\n\n```\nblock do\n  {a, b}\nend\n```\n\n2. *allow_empty_next*, default: true\n\nAllows end-user to configure whether to report or not the next statements\nwithout arguments. Sometimes such statements are used to yild the `nil` value explicitly.\n\n```\nblock do\n  @foo = :empty\n  next\nend\n```\n\nIf this param equals to `false`, the block above will be forced to be written as:\n\n```\nblock do\n  @foo = :empty\n  nil\nend\n```\n\n### YAML config example\n\n```\nStyle/RedundantNext:\n  Enabled: true\n  AllowMultiNext: true\n  AllowEmptyNext: true\n```","summary":"<p>A rule that disallows redundant next expressions.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows redundant next expressions. A `next` keyword allows\na block to skip to the next iteration early, however, it is considered\nredundant in cases where it is the last expression in a block or combines\ninto the node which is the last in a block.\n\nFor example, this is considered invalid:\n\n```\nblock do |v|\n  next v + 1\nend\n```\n\n```\nblock do |v|\n  case v\n  when .nil?\n    next \"nil\"\n  when .blank?\n    next \"blank\"\n  else\n    next \"empty\"\n  end\nend\n```\n\nAnd has to be written as the following:\n\n```\nblock do |v|\n  v + 1\nend\n```\n\n```\nblock do |v|\n  case arg\n  when .nil?\n    \"nil\"\n  when .blank?\n    \"blank\"\n  else\n    \"empty\"\n  end\nend\n```\n\n### Configuration params\n\n1. *allow_multi_next*, default: true\n\nAllows end-user to configure whether to report or not the next statements\nwhich yield tuple literals i.e.\n\n```\nblock do\n  next a, b\nend\n```\n\nIf this param equals to `false`, the block above will be forced to be written as:\n\n```\nblock do\n  {a, b}\nend\n```\n\n2. *allow_empty_next*, default: true\n\nAllows end-user to configure whether to report or not the next statements\nwithout arguments. Sometimes such statements are used to yild the `nil` value explicitly.\n\n```\nblock do\n  @foo = :empty\n  next\nend\n```\n\nIf this param equals to `false`, the block above will be forced to be written as:\n\n```\nblock do\n  @foo = :empty\n  nil\nend\n```\n\n### YAML config example\n\n```\nStyle/RedundantNext:\n  Enabled: true\n  AllowMultiNext: true\n  AllowEmptyNext: true\n```","summary":"<p>A rule that disallows redundant next expressions.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/redundant_next.cr","line_number":99,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_next.cr#L99"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"allow_empty_next:Bool-instance-method","name":"allow_empty_next","abstract":false,"def":{"name":"allow_empty_next","return_type":"Bool","visibility":"Public","body":"@allow_empty_next"}},{"html_id":"allow_empty_next=(allow_empty_next:Bool)-instance-method","name":"allow_empty_next=","abstract":false,"args":[{"name":"allow_empty_next","external_name":"allow_empty_next","restriction":"Bool"}],"args_string":"(allow_empty_next : Bool)","args_html":"(allow_empty_next : Bool)","def":{"name":"allow_empty_next=","args":[{"name":"allow_empty_next","external_name":"allow_empty_next","restriction":"Bool"}],"visibility":"Public","body":"@allow_empty_next = allow_empty_next"}},{"html_id":"allow_multi_next:Bool-instance-method","name":"allow_multi_next","abstract":false,"def":{"name":"allow_multi_next","return_type":"Bool","visibility":"Public","body":"@allow_multi_next"}},{"html_id":"allow_multi_next=(allow_multi_next:Bool)-instance-method","name":"allow_multi_next=","abstract":false,"args":[{"name":"allow_multi_next","external_name":"allow_multi_next","restriction":"Bool"}],"args_string":"(allow_multi_next : Bool)","args_html":"(allow_multi_next : Bool)","def":{"name":"allow_multi_next=","args":[{"name":"allow_multi_next","external_name":"allow_multi_next","restriction":"Bool"}],"visibility":"Public","body":"@allow_multi_next = allow_multi_next"}},{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Next,visitor:AST::RedundantControlExpressionVisitor)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Next"},{"name":"visitor","external_name":"visitor","restriction":"AST::RedundantControlExpressionVisitor"}],"args_string":"(source, node : Crystal::Next, visitor : AST::RedundantControlExpressionVisitor)","args_html":"(source, node : Crystal::Next, visitor : <a href=\"../../../Ameba/AST/RedundantControlExpressionVisitor.html\">AST::RedundantControlExpressionVisitor</a>)","location":{"filename":"src/ameba/rule/style/redundant_next.cr","line_number":115,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_next.cr#L115"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Next"},{"name":"visitor","external_name":"visitor","restriction":"AST::RedundantControlExpressionVisitor"}],"visibility":"Public","body":"if allow_multi_next && node.exp.is_a?(Crystal::TupleLiteral)\n  return\nend\nif allow_empty_next && (node.exp.nil? || node.exp.try(&.nop?))\n  return\nend\nif exp_code = control_exp_code(node, source.lines)\n  issue_for(node, MSG) do |corrector|\n    corrector.replace(node, exp_code)\n  end\nelse\n  issue_for(node, MSG)\nend\n"}},{"html_id":"test(source,node:Crystal::Block)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Block"}],"args_string":"(source, node : Crystal::Block)","args_html":"(source, node : Crystal::Block)","location":{"filename":"src/ameba/rule/style/redundant_next.cr","line_number":111,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_next.cr#L111"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Block"}],"visibility":"Public","body":"AST::RedundantControlExpressionVisitor.new(self, source, node.body)"}}]},{"html_id":"ameba/Ameba/Rule/Style/RedundantReturn","path":"Ameba/Rule/Style/RedundantReturn.html","kind":"class","full_name":"Ameba::Rule::Style::RedundantReturn","name":"RedundantReturn","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/redundant_return.cr","line_number":96,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_return.cr#L96"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Redundant `return` detected\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows redundant return expressions.\n\nFor example, this is considered invalid:\n\n```\ndef foo\n  return :bar\nend\n```\n\n```\ndef bar(arg)\n  case arg\n  when .nil?\n    return \"nil\"\n  when .blank?\n    return \"blank\"\n  else\n    return \"empty\"\n  end\nend\n```\n\nAnd has to be written as the following:\n\n```\ndef foo\n  :bar\nend\n```\n\n```\ndef bar(arg)\n  case arg\n  when .nil?\n    \"nil\"\n  when .blank?\n    \"blank\"\n  else\n    \"empty\"\n  end\nend\n```\n\n### Configuration params\n\n1. *allow_multi_return*, default: true\n\nAllows end-user to configure whether to report or not the return statements\nwhich return tuple literals i.e.\n\n```\ndef method(a, b)\n  return a, b\nend\n```\n\nIf this param equals to `false`, the method above has to be written as:\n\n```\ndef method(a, b)\n  {a, b}\nend\n```\n\n2. *allow_empty_return*, default: true\n\nAllows end-user to configure whether to report or not the return statements\nwithout arguments. Sometimes such returns are used to return the `nil` value explicitly.\n\n```\ndef method\n  @foo = :empty\n  return\nend\n```\n\nIf this param equals to `false`, the method above has to be written as:\n\n```\ndef method\n  @foo = :empty\n  nil\nend\n```\n\n### YAML config example\n\n```\nStyle/RedundantReturn:\n  Enabled: true\n  AllowMutliReturn: true\n  AllowEmptyReturn: true\n```","summary":"<p>A rule that disallows redundant return expressions.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows redundant return expressions.\n\nFor example, this is considered invalid:\n\n```\ndef foo\n  return :bar\nend\n```\n\n```\ndef bar(arg)\n  case arg\n  when .nil?\n    return \"nil\"\n  when .blank?\n    return \"blank\"\n  else\n    return \"empty\"\n  end\nend\n```\n\nAnd has to be written as the following:\n\n```\ndef foo\n  :bar\nend\n```\n\n```\ndef bar(arg)\n  case arg\n  when .nil?\n    \"nil\"\n  when .blank?\n    \"blank\"\n  else\n    \"empty\"\n  end\nend\n```\n\n### Configuration params\n\n1. *allow_multi_return*, default: true\n\nAllows end-user to configure whether to report or not the return statements\nwhich return tuple literals i.e.\n\n```\ndef method(a, b)\n  return a, b\nend\n```\n\nIf this param equals to `false`, the method above has to be written as:\n\n```\ndef method(a, b)\n  {a, b}\nend\n```\n\n2. *allow_empty_return*, default: true\n\nAllows end-user to configure whether to report or not the return statements\nwithout arguments. Sometimes such returns are used to return the `nil` value explicitly.\n\n```\ndef method\n  @foo = :empty\n  return\nend\n```\n\nIf this param equals to `false`, the method above has to be written as:\n\n```\ndef method\n  @foo = :empty\n  nil\nend\n```\n\n### YAML config example\n\n```\nStyle/RedundantReturn:\n  Enabled: true\n  AllowMutliReturn: true\n  AllowEmptyReturn: true\n```","summary":"<p>A rule that disallows redundant return expressions.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/redundant_return.cr","line_number":96,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_return.cr#L96"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"allow_empty_return:Bool-instance-method","name":"allow_empty_return","abstract":false,"def":{"name":"allow_empty_return","return_type":"Bool","visibility":"Public","body":"@allow_empty_return"}},{"html_id":"allow_empty_return=(allow_empty_return:Bool)-instance-method","name":"allow_empty_return=","abstract":false,"args":[{"name":"allow_empty_return","external_name":"allow_empty_return","restriction":"Bool"}],"args_string":"(allow_empty_return : Bool)","args_html":"(allow_empty_return : Bool)","def":{"name":"allow_empty_return=","args":[{"name":"allow_empty_return","external_name":"allow_empty_return","restriction":"Bool"}],"visibility":"Public","body":"@allow_empty_return = allow_empty_return"}},{"html_id":"allow_multi_return:Bool-instance-method","name":"allow_multi_return","abstract":false,"def":{"name":"allow_multi_return","return_type":"Bool","visibility":"Public","body":"@allow_multi_return"}},{"html_id":"allow_multi_return=(allow_multi_return:Bool)-instance-method","name":"allow_multi_return=","abstract":false,"args":[{"name":"allow_multi_return","external_name":"allow_multi_return","restriction":"Bool"}],"args_string":"(allow_multi_return : Bool)","args_html":"(allow_multi_return : Bool)","def":{"name":"allow_multi_return=","args":[{"name":"allow_multi_return","external_name":"allow_multi_return","restriction":"Bool"}],"visibility":"Public","body":"@allow_multi_return = allow_multi_return"}},{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Return,visitor:AST::RedundantControlExpressionVisitor)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Return"},{"name":"visitor","external_name":"visitor","restriction":"AST::RedundantControlExpressionVisitor"}],"args_string":"(source, node : Crystal::Return, visitor : AST::RedundantControlExpressionVisitor)","args_html":"(source, node : Crystal::Return, visitor : <a href=\"../../../Ameba/AST/RedundantControlExpressionVisitor.html\">AST::RedundantControlExpressionVisitor</a>)","location":{"filename":"src/ameba/rule/style/redundant_return.cr","line_number":112,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_return.cr#L112"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Return"},{"name":"visitor","external_name":"visitor","restriction":"AST::RedundantControlExpressionVisitor"}],"visibility":"Public","body":"if allow_multi_return && node.exp.is_a?(Crystal::TupleLiteral)\n  return\nend\nif allow_empty_return && (node.exp.nil? || node.exp.try(&.nop?))\n  return\nend\nif exp_code = control_exp_code(node, source.lines)\n  issue_for(node, MSG) do |corrector|\n    corrector.replace(node, exp_code)\n  end\nelse\n  issue_for(node, MSG)\nend\n"}},{"html_id":"test(source,node:Crystal::Def)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"args_string":"(source, node : Crystal::Def)","args_html":"(source, node : Crystal::Def)","location":{"filename":"src/ameba/rule/style/redundant_return.cr","line_number":108,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/redundant_return.cr#L108"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Def"}],"visibility":"Public","body":"AST::RedundantControlExpressionVisitor.new(self, source, node.body)"}}]},{"html_id":"ameba/Ameba/Rule/Style/TypeNames","path":"Ameba/Rule/Style/TypeNames.html","kind":"class","full_name":"Ameba::Rule::Style::TypeNames","name":"TypeNames","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/type_names.cr","line_number":54,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L54"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Type name should be camelcased: %s, but it was %s\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that enforces type names in camelcase manner.\n\nFor example, these are considered valid:\n\n```\nclass ParseError < Exception\nend\n\nmodule HTTP\n  class RequestHandler\n  end\nend\n\nalias NumericValue = Float32 | Float64 | Int32 | Int64\n\nlib LibYAML\nend\n\nstruct TagDirective\nend\n\nenum Time::DayOfWeek\nend\n```\n\nAnd these are invalid type names\n\n```\nclass My_class\nend\n\nmodule HTT_p\nend\n\nalias Numeric_value = Int32\n\nlib Lib_YAML\nend\n\nstruct Tag_directive\nend\n\nenum Time_enum::Day_of_week\nend\n```\n\nYAML configuration example:\n\n```\nStyle/TypeNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces type names in camelcase manner.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that enforces type names in camelcase manner.\n\nFor example, these are considered valid:\n\n```\nclass ParseError < Exception\nend\n\nmodule HTTP\n  class RequestHandler\n  end\nend\n\nalias NumericValue = Float32 | Float64 | Int32 | Int64\n\nlib LibYAML\nend\n\nstruct TagDirective\nend\n\nenum Time::DayOfWeek\nend\n```\n\nAnd these are invalid type names\n\n```\nclass My_class\nend\n\nmodule HTT_p\nend\n\nalias Numeric_value = Int32\n\nlib Lib_YAML\nend\n\nstruct Tag_directive\nend\n\nenum Time_enum::Day_of_week\nend\n```\n\nYAML configuration example:\n\n```\nStyle/TypeNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces type names in camelcase manner.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/type_names.cr","line_number":54,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L54"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::ClassDef)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ClassDef"}],"args_string":"(source, node : Crystal::ClassDef)","args_html":"(source, node : Crystal::ClassDef)","location":{"filename":"src/ameba/rule/style/type_names.cr","line_number":69,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L69"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ClassDef"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::Alias)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Alias"}],"args_string":"(source, node : Crystal::Alias)","args_html":"(source, node : Crystal::Alias)","location":{"filename":"src/ameba/rule/style/type_names.cr","line_number":73,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L73"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Alias"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::LibDef)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::LibDef"}],"args_string":"(source, node : Crystal::LibDef)","args_html":"(source, node : Crystal::LibDef)","location":{"filename":"src/ameba/rule/style/type_names.cr","line_number":77,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L77"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::LibDef"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::EnumDef)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::EnumDef"}],"args_string":"(source, node : Crystal::EnumDef)","args_html":"(source, node : Crystal::EnumDef)","location":{"filename":"src/ameba/rule/style/type_names.cr","line_number":81,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L81"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::EnumDef"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::ModuleDef)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ModuleDef"}],"args_string":"(source, node : Crystal::ModuleDef)","args_html":"(source, node : Crystal::ModuleDef)","location":{"filename":"src/ameba/rule/style/type_names.cr","line_number":85,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/type_names.cr#L85"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ModuleDef"}],"visibility":"Public","body":"check_node(source, node)"}}]},{"html_id":"ameba/Ameba/Rule/Style/UnlessElse","path":"Ameba/Rule/Style/UnlessElse.html","kind":"class","full_name":"Ameba::Rule::Style::UnlessElse","name":"UnlessElse","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/unless_else.cr","line_number":45,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/unless_else.cr#L45"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Favour if over unless with else\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows the use of an `else` block with the `unless`.\n\nFor example, the rule considers these valid:\n\n```\nunless something\n  :ok\nend\n\nif something\n  :one\nelse\n  :two\nend\n```\n\nBut it considers this one invalid as it is an `unless` with an `else`:\n\n```\nunless something\n  :one\nelse\n  :two\nend\n```\n\nThe solution is to swap the order of the blocks, and change the `unless` to\nan `if`, so the previous invalid example would become this:\n\n```\nif something\n  :two\nelse\n  :one\nend\n```\n\nYAML configuration example:\n\n```\nStyle/UnlessElse:\n  Enabled: true\n```","summary":"<p>A rule that disallows the use of an <code>else</code> block with the <code>unless</code>.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows the use of an `else` block with the `unless`.\n\nFor example, the rule considers these valid:\n\n```\nunless something\n  :ok\nend\n\nif something\n  :one\nelse\n  :two\nend\n```\n\nBut it considers this one invalid as it is an `unless` with an `else`:\n\n```\nunless something\n  :one\nelse\n  :two\nend\n```\n\nThe solution is to swap the order of the blocks, and change the `unless` to\nan `if`, so the previous invalid example would become this:\n\n```\nif something\n  :two\nelse\n  :one\nend\n```\n\nYAML configuration example:\n\n```\nStyle/UnlessElse:\n  Enabled: true\n```","summary":"<p>A rule that disallows the use of an <code>else</code> block with the <code>unless</code>.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/unless_else.cr","line_number":45,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/unless_else.cr#L45"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Unless)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"args_string":"(source, node : Crystal::Unless)","args_html":"(source, node : Crystal::Unless)","location":{"filename":"src/ameba/rule/style/unless_else.cr","line_number":52,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/unless_else.cr#L52"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Unless"}],"visibility":"Public","body":"if node.else.nop?\nelse\n  issue_for(node, MSG)\nend"}}]},{"html_id":"ameba/Ameba/Rule/Style/VariableNames","path":"Ameba/Rule/Style/VariableNames.html","kind":"class","full_name":"Ameba::Rule::Style::VariableNames","name":"VariableNames","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/variable_names.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/variable_names.cr#L25"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"Var name should be underscore-cased: %s, not %s\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that enforces variable names to be in underscored case.\n\nFor example, these variable names are considered valid:\n\n```\nvar_name = 1\nname = 2\n_another_good_name = 3\n```\n\nAnd these are invalid variable names:\n\n```\nmyBadNamedVar = 1\nwrong_Name = 2\n```\n\nYAML configuration example:\n\n```\nStyle/VariableNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces variable names to be in underscored case.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that enforces variable names to be in underscored case.\n\nFor example, these variable names are considered valid:\n\n```\nvar_name = 1\nname = 2\n_another_good_name = 3\n```\n\nAnd these are invalid variable names:\n\n```\nmyBadNamedVar = 1\nwrong_Name = 2\n```\n\nYAML configuration example:\n\n```\nStyle/VariableNames:\n  Enabled: true\n```","summary":"<p>A rule that enforces variable names to be in underscored case.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/variable_names.cr","line_number":25,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/variable_names.cr#L25"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Var)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Var"}],"args_string":"(source, node : Crystal::Var)","args_html":"(source, node : Crystal::Var)","location":{"filename":"src/ameba/rule/style/variable_names.cr","line_number":42,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/variable_names.cr#L42"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Var"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::InstanceVar)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::InstanceVar"}],"args_string":"(source, node : Crystal::InstanceVar)","args_html":"(source, node : Crystal::InstanceVar)","location":{"filename":"src/ameba/rule/style/variable_names.cr","line_number":46,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/variable_names.cr#L46"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::InstanceVar"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source,node:Crystal::ClassVar)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ClassVar"}],"args_string":"(source, node : Crystal::ClassVar)","args_html":"(source, node : Crystal::ClassVar)","location":{"filename":"src/ameba/rule/style/variable_names.cr","line_number":50,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/variable_names.cr#L50"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::ClassVar"}],"visibility":"Public","body":"check_node(source, node)"}},{"html_id":"test(source:Source)-instance-method","name":"test","doc":"This method is designed to test the source passed in. If source has issues\nthat are tested by this rule, it should add an issue.\n\nBe default it uses a node visitor to traverse all the nodes in the source.\nNOTE: Must be overridden for other type of rules.","summary":"<p>This method is designed to test the source passed in.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Source"}],"args_string":"(source : Source)","args_html":"(source : <a href=\"../../../Ameba/Source.html\">Source</a>)","location":{"filename":"src/ameba/rule/style/variable_names.cr","line_number":38,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/variable_names.cr#L38"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":"Source"}],"visibility":"Public","body":"VarVisitor.new(self, source)"}}]},{"html_id":"ameba/Ameba/Rule/Style/VerboseBlock","path":"Ameba/Rule/Style/VerboseBlock.html","kind":"class","full_name":"Ameba::Rule::Style::VerboseBlock","name":"VerboseBlock","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/verbose_block.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/verbose_block.cr#L30"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CALL_PATTERN","name":"CALL_PATTERN","value":"\"%s(%s&.%s)\""},{"id":"MSG","name":"MSG","value":"\"Use short block notation instead: `%s`\""}],"included_modules":[{"html_id":"ameba/Ameba/AST/Util","kind":"module","full_name":"Ameba::AST::Util","name":"Util"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"This rule is used to identify usage of single expression blocks with\nargument as a receiver, that can be collapsed into a short form.\n\nFor example, this is considered invalid:\n\n```\n(1..3).any? { |i| i.odd? }\n```\n\nAnd it should be written as this:\n\n```\n(1..3).any?(&.odd?)\n```\n\nYAML configuration example:\n\n```\nStyle/VerboseBlock:\n  Enabled: true\n  ExcludeMultipleLineBlocks: true\n  ExcludeCallsWithBlock: true\n  ExcludePrefixOperators: true\n  ExcludeOperators: true\n  ExcludeSetters: false\n  MaxLineLength: ~\n  MaxLength: 50 # use ~ to disable\n```","summary":"<p>This rule is used to identify usage of single expression blocks with argument as a receiver, that can be collapsed into a short form.</p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"This rule is used to identify usage of single expression blocks with\nargument as a receiver, that can be collapsed into a short form.\n\nFor example, this is considered invalid:\n\n```\n(1..3).any? { |i| i.odd? }\n```\n\nAnd it should be written as this:\n\n```\n(1..3).any?(&.odd?)\n```\n\nYAML configuration example:\n\n```\nStyle/VerboseBlock:\n  Enabled: true\n  ExcludeMultipleLineBlocks: true\n  ExcludeCallsWithBlock: true\n  ExcludePrefixOperators: true\n  ExcludeOperators: true\n  ExcludeSetters: false\n  MaxLineLength: ~\n  MaxLength: 50 # use ~ to disable\n```","summary":"<p>This rule is used to identify usage of single expression blocks with argument as a receiver, that can be collapsed into a short form.</p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/verbose_block.cr","line_number":30,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/verbose_block.cr#L30"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"exclude_calls_with_block:Bool-instance-method","name":"exclude_calls_with_block","abstract":false,"def":{"name":"exclude_calls_with_block","return_type":"Bool","visibility":"Public","body":"@exclude_calls_with_block"}},{"html_id":"exclude_calls_with_block=(exclude_calls_with_block:Bool)-instance-method","name":"exclude_calls_with_block=","abstract":false,"args":[{"name":"exclude_calls_with_block","external_name":"exclude_calls_with_block","restriction":"Bool"}],"args_string":"(exclude_calls_with_block : Bool)","args_html":"(exclude_calls_with_block : Bool)","def":{"name":"exclude_calls_with_block=","args":[{"name":"exclude_calls_with_block","external_name":"exclude_calls_with_block","restriction":"Bool"}],"visibility":"Public","body":"@exclude_calls_with_block = exclude_calls_with_block"}},{"html_id":"exclude_multiple_line_blocks:Bool-instance-method","name":"exclude_multiple_line_blocks","abstract":false,"def":{"name":"exclude_multiple_line_blocks","return_type":"Bool","visibility":"Public","body":"@exclude_multiple_line_blocks"}},{"html_id":"exclude_multiple_line_blocks=(exclude_multiple_line_blocks:Bool)-instance-method","name":"exclude_multiple_line_blocks=","abstract":false,"args":[{"name":"exclude_multiple_line_blocks","external_name":"exclude_multiple_line_blocks","restriction":"Bool"}],"args_string":"(exclude_multiple_line_blocks : Bool)","args_html":"(exclude_multiple_line_blocks : Bool)","def":{"name":"exclude_multiple_line_blocks=","args":[{"name":"exclude_multiple_line_blocks","external_name":"exclude_multiple_line_blocks","restriction":"Bool"}],"visibility":"Public","body":"@exclude_multiple_line_blocks = exclude_multiple_line_blocks"}},{"html_id":"exclude_operators:Bool-instance-method","name":"exclude_operators","abstract":false,"def":{"name":"exclude_operators","return_type":"Bool","visibility":"Public","body":"@exclude_operators"}},{"html_id":"exclude_operators=(exclude_operators:Bool)-instance-method","name":"exclude_operators=","abstract":false,"args":[{"name":"exclude_operators","external_name":"exclude_operators","restriction":"Bool"}],"args_string":"(exclude_operators : Bool)","args_html":"(exclude_operators : Bool)","def":{"name":"exclude_operators=","args":[{"name":"exclude_operators","external_name":"exclude_operators","restriction":"Bool"}],"visibility":"Public","body":"@exclude_operators = exclude_operators"}},{"html_id":"exclude_prefix_operators:Bool-instance-method","name":"exclude_prefix_operators","abstract":false,"def":{"name":"exclude_prefix_operators","return_type":"Bool","visibility":"Public","body":"@exclude_prefix_operators"}},{"html_id":"exclude_prefix_operators=(exclude_prefix_operators:Bool)-instance-method","name":"exclude_prefix_operators=","abstract":false,"args":[{"name":"exclude_prefix_operators","external_name":"exclude_prefix_operators","restriction":"Bool"}],"args_string":"(exclude_prefix_operators : Bool)","args_html":"(exclude_prefix_operators : Bool)","def":{"name":"exclude_prefix_operators=","args":[{"name":"exclude_prefix_operators","external_name":"exclude_prefix_operators","restriction":"Bool"}],"visibility":"Public","body":"@exclude_prefix_operators = exclude_prefix_operators"}},{"html_id":"exclude_setters:Bool-instance-method","name":"exclude_setters","abstract":false,"def":{"name":"exclude_setters","return_type":"Bool","visibility":"Public","body":"@exclude_setters"}},{"html_id":"exclude_setters=(exclude_setters:Bool)-instance-method","name":"exclude_setters=","abstract":false,"args":[{"name":"exclude_setters","external_name":"exclude_setters","restriction":"Bool"}],"args_string":"(exclude_setters : Bool)","args_html":"(exclude_setters : Bool)","def":{"name":"exclude_setters=","args":[{"name":"exclude_setters","external_name":"exclude_setters","restriction":"Bool"}],"visibility":"Public","body":"@exclude_setters = exclude_setters"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"max_length:Int32?-instance-method","name":"max_length","abstract":false,"def":{"name":"max_length","return_type":"Int32 | ::Nil","visibility":"Public","body":"@max_length"}},{"html_id":"max_length=(max_length:Int32?)-instance-method","name":"max_length=","abstract":false,"args":[{"name":"max_length","external_name":"max_length","restriction":"Int32 | ::Nil"}],"args_string":"(max_length : Int32?)","args_html":"(max_length : Int32?)","def":{"name":"max_length=","args":[{"name":"max_length","external_name":"max_length","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@max_length = max_length"}},{"html_id":"max_line_length:Int32?-instance-method","name":"max_line_length","abstract":false,"def":{"name":"max_line_length","return_type":"Int32 | ::Nil","visibility":"Public","body":"@max_line_length"}},{"html_id":"max_line_length=(max_line_length:Int32?)-instance-method","name":"max_line_length=","abstract":false,"args":[{"name":"max_line_length","external_name":"max_line_length","restriction":"Int32 | ::Nil"}],"args_string":"(max_line_length : Int32?)","args_html":"(max_line_length : Int32?)","def":{"name":"max_line_length=","args":[{"name":"max_line_length","external_name":"max_line_length","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@max_line_length = max_line_length"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::Call)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"args_string":"(source, node : Crystal::Call)","args_html":"(source, node : Crystal::Call)","location":{"filename":"src/ameba/rule/style/verbose_block.cr","line_number":217,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/verbose_block.cr#L217"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::Call"}],"visibility":"Public","body":"if (block = node.block) && (block.args.size == 1)\nelse\n  return\nend\narg = block.args.first\nif arg.name.starts_with?(\"__arg\")\n  return\nend\nif (body = block.body).is_a?(Crystal::Call)\nelse\n  return\nend\nobj = body.obj\nwhile obj.is_a?(Crystal::Call)\n  obj = obj.obj\nend\nif obj == arg\nelse\n  return\nend\nif (reference_count(body, arg)) > 1\n  return\nend\nissue_for_valid(source, node, block, body)\n"}}]},{"html_id":"ameba/Ameba/Rule/Style/WhileTrue","path":"Ameba/Rule/Style/WhileTrue.html","kind":"class","full_name":"Ameba::Rule::Style::WhileTrue","name":"WhileTrue","abstract":false,"superclass":{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},"ancestors":[{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"},{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/Ameba/Rule/Base","kind":"class","full_name":"Ameba::Rule::Base","name":"Base"},{"html_id":"ameba/Ameba/Config/RuleConfig","kind":"module","full_name":"Ameba::Config::RuleConfig","name":"RuleConfig"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/rule/style/while_true.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/while_true.cr#L28"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MSG","name":"MSG","value":"\"While statement using true literal as condition\""}],"included_modules":[{"html_id":"ameba/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ameba/YAML/Serializable/Strict","kind":"module","full_name":"YAML::Serializable::Strict","name":"Strict"}],"namespace":{"html_id":"ameba/Ameba/Rule/Style","kind":"module","full_name":"Ameba::Rule::Style","name":"Style"},"doc":"A rule that disallows the use of `while true` instead of using the idiomatic `loop`\n\nFor example, this is considered invalid:\n\n```\nwhile true\n  do_something\n  break if some_condition\nend\n```\n\nAnd should be replaced by the following:\n\n```\nloop do\n  do_something\n  break if some_condition\nend\n```\n\nYAML configuration example:\n\n```\nStyle/WhileTrue:\n  Enabled: true\n```","summary":"<p>A rule that disallows the use of <code>while true</code> instead of using the idiomatic <code>loop</code></p>","class_methods":[{"html_id":"parsed_doc:String?-class-method","name":"parsed_doc","doc":"Returns documentation for this rule, if there is any.\n\n```\nmodule Ameba\n  # This is a test rule.\n  # Does nothing.\n  class MyRule < Ameba::Rule::Base\n    def test(source)\n    end\n  end\nend\n\nMyRule.parsed_doc # => \"This is a test rule.\\nDoes nothing.\"\n```","summary":"<p>Returns documentation for this rule, if there is any.</p>","abstract":false,"def":{"name":"parsed_doc","return_type":"String | ::Nil","visibility":"Public","body":"@@parsed_doc"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(config=nil)-class-method","name":"new","doc":"A rule that disallows the use of `while true` instead of using the idiomatic `loop`\n\nFor example, this is considered invalid:\n\n```\nwhile true\n  do_something\n  break if some_condition\nend\n```\n\nAnd should be replaced by the following:\n\n```\nloop do\n  do_something\n  break if some_condition\nend\n```\n\nYAML configuration example:\n\n```\nStyle/WhileTrue:\n  Enabled: true\n```","summary":"<p>A rule that disallows the use of <code>while true</code> instead of using the idiomatic <code>loop</code></p>","abstract":false,"args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"args_string":"(config = nil)","args_html":"(config = <span class=\"n\">nil</span>)","location":{"filename":"src/ameba/rule/style/while_true.cr","line_number":28,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/while_true.cr#L28"},"def":{"name":"new","args":[{"name":"config","default_value":"nil","external_name":"config","restriction":""}],"visibility":"Public","body":"if (raw = config.try(&.raw)).is_a?(Hash)\n  yaml = raw[rule_name]?.try(&.to_yaml)\nend\nfrom_yaml(yaml || \"{}\")\n"}}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"}},{"html_id":"enabled:Bool-instance-method","name":"enabled","abstract":false,"def":{"name":"enabled","visibility":"Public","body":"@enabled"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"::Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"excluded:Array(String)?-instance-method","name":"excluded","abstract":false,"def":{"name":"excluded","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@excluded"}},{"html_id":"excluded=(excluded:Array(String)?)-instance-method","name":"excluded=","abstract":false,"args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"args_string":"(excluded : Array(String)?)","args_html":"(excluded : Array(String)?)","def":{"name":"excluded=","args":[{"name":"excluded","external_name":"excluded","restriction":"Array(String) | ::Nil"}],"visibility":"Public","body":"@excluded = excluded"}},{"html_id":"severity:Ameba::Severity-instance-method","name":"severity","abstract":false,"def":{"name":"severity","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Ameba::Severity)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"args_string":"(severity : Ameba::Severity)","args_html":"(severity : <a href=\"../../../Ameba/Severity.html\">Ameba::Severity</a>)","def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"::Ameba::Severity"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"test(source,node:Crystal::While)-instance-method","name":"test","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::While"}],"args_string":"(source, node : Crystal::While)","args_html":"(source, node : Crystal::While)","location":{"filename":"src/ameba/rule/style/while_true.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/rule/style/while_true.cr#L35"},"def":{"name":"test","args":[{"name":"source","external_name":"source","restriction":""},{"name":"node","external_name":"node","restriction":"Crystal::While"}],"visibility":"Public","body":"if node.cond.true_literal?\nelse\n  return\nend\nif location = node.location\nelse\n  return\nend\nif end_location = node.cond.end_location\nelse\n  return\nend\nissue_for(node, MSG) do |corrector|\n  corrector.replace(location, end_location, \"loop do\")\nend\n"}}]}]}]},{"html_id":"ameba/Ameba/Runner","path":"Ameba/Runner.html","kind":"class","full_name":"Ameba::Runner","name":"Runner","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/runner.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L13"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"Represents a runner for inspecting sources files.\nHolds a list of rules to do inspection based on,\nlist of sources to run inspection on and a formatter\nto prepare a report.\n\n```\nconfig = Ameba::Config.load\nrunner = Ameba::Runner.new config\nrunner.run.success? # => true or false\n```\n","summary":"<p>Represents a runner for inspecting sources files.</p>","constructors":[{"html_id":"new(config:Config)-class-method","name":"new","doc":"Instantiates a runner using a `config`.\n\n```\nconfig = Ameba::Config.load\nconfig.files = files\nconfig.formatter = formatter\n\nAmeba::Runner.new config\n```","summary":"<p>Instantiates a runner using a <code>config</code>.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config)","args_html":"(config : <a href=\"../Ameba/Config.html\">Config</a>)","location":{"filename":"src/ameba/runner.cr","line_number":62,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L62"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"explain(location,output=STDOUT)-instance-method","name":"explain","doc":"Explains an issue at a specified *location*.\n\nRunner should perform inspection before doing the explain.\nThis is necessary to be able to find the issue at a specified location.\n\n```\nrunner = Ameba::Runner.new config\nrunner.run\nrunner.explain({file: file, line: l, column: c})\n```","summary":"<p>Explains an issue at a specified <em>location</em>.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"output","default_value":"STDOUT","external_name":"output","restriction":""}],"args_string":"(location, output = STDOUT)","args_html":"(location, output = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/ameba/runner.cr","line_number":162,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L162"},"def":{"name":"explain","args":[{"name":"location","external_name":"location","restriction":""},{"name":"output","default_value":"STDOUT","external_name":"output","restriction":""}],"visibility":"Public","body":"(Formatter::ExplainFormatter.new(output, location)).finished(@sources)"}},{"html_id":"run-instance-method","name":"run","doc":"Performs the inspection. Iterates through all sources and test it using\nlist of rules. If a specific rule fails on a specific source, it adds\nan issue to that source.\n\nThis action also notifies formatter when inspection is started/finished,\nand when a specific source started/finished to be inspected.\n\n```\nrunner = Ameba::Runner.new config\nrunner.run # => returns runner again\n```","summary":"<p>Performs the inspection.</p>","abstract":false,"location":{"filename":"src/ameba/runner.cr","line_number":88,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L88"},"def":{"name":"run","visibility":"Public","body":"begin\n  @formatter.started(@sources)\n  channels = @sources.map do\n    Channel(Exception | ::Nil).new\n  end\n  @sources.each_with_index do |source, idx|\n    channel = channels[idx]\n    spawn do\n      begin\n        run_source(source)\n      rescue e\n        channel.send(e)\n      else\n        channel.send(nil)\n      end\n    end\n  end\n  channels.each do |chan|\n    chan.receive.try do |e|\n      raise(e)\n    end\n  end\n  self\nensure\n  @formatter.finished(@sources)\nend"}},{"html_id":"sources:Array(Source)-instance-method","name":"sources","doc":"A list of sources to run inspection on.","summary":"<p>A list of sources to run inspection on.</p>","abstract":false,"location":{"filename":"src/ameba/runner.cr","line_number":36,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L36"},"def":{"name":"sources","return_type":"Array(Source)","visibility":"Public","body":"@sources"}},{"html_id":"success?-instance-method","name":"success?","doc":"Indicates whether the last inspection successful or not.\nIt returns true if no issues matching severity in sources found, false otherwise.\n\n```\nrunner = Ameba::Runner.new config\nrunner.run\nrunner.success? # => true or false\n```","summary":"<p>Indicates whether the last inspection successful or not.</p>","abstract":false,"location":{"filename":"src/ameba/runner.cr","line_number":174,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L174"},"def":{"name":"success?","visibility":"Public","body":"@sources.all? do |source|\n  source.issues.reject(&.disabled?).none? do |__arg7|\n    __arg7.rule.severity <= @severity\n  end\nend"}}],"types":[{"html_id":"ameba/Ameba/Runner/InfiniteCorrectionLoopError","path":"Ameba/Runner/InfiniteCorrectionLoopError.html","kind":"class","full_name":"Ameba::Runner::InfiniteCorrectionLoopError","name":"InfiniteCorrectionLoopError","abstract":false,"superclass":{"html_id":"ameba/RuntimeError","kind":"class","full_name":"RuntimeError","name":"RuntimeError"},"ancestors":[{"html_id":"ameba/RuntimeError","kind":"class","full_name":"RuntimeError","name":"RuntimeError"},{"html_id":"ameba/SystemError","kind":"module","full_name":"SystemError","name":"SystemError"},{"html_id":"ameba/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/runner.cr","line_number":16,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L16"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Runner","kind":"class","full_name":"Ameba::Runner","name":"Runner"},"doc":"An error indicating that the inspection loop got stuck correcting\nissues back and forth.","summary":"<p>An error indicating that the inspection loop got stuck correcting issues back and forth.</p>","constructors":[{"html_id":"new(path,issues_by_iteration,loop_start=-1)-class-method","name":"new","abstract":false,"args":[{"name":"path","external_name":"path","restriction":""},{"name":"issues_by_iteration","external_name":"issues_by_iteration","restriction":""},{"name":"loop_start","default_value":"-1","external_name":"loop_start","restriction":""}],"args_string":"(path, issues_by_iteration, loop_start = -1)","args_html":"(path, issues_by_iteration, loop_start = <span class=\"n\">-1</span>)","location":{"filename":"src/ameba/runner.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/runner.cr#L17"},"def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":""},{"name":"issues_by_iteration","external_name":"issues_by_iteration","restriction":""},{"name":"loop_start","default_value":"-1","external_name":"loop_start","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(path, issues_by_iteration, loop_start)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]},{"html_id":"ameba/Ameba/Severity","path":"Ameba/Severity.html","kind":"enum","full_name":"Ameba::Severity","name":"Severity","abstract":false,"ancestors":[{"html_id":"ameba/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"ameba/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ameba/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/severity.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L2"}],"repository_name":"ameba","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Error","name":"Error","value":"0"},{"id":"Warning","name":"Warning","value":"1"},{"id":"Convention","name":"Convention","value":"2"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"class_methods":[{"html_id":"parse(name:String)-class-method","name":"parse","doc":"Creates Severity by the name.\n\n```\nSeverity.parse(\"convention\") # => Severity::Convention\nSeverity.parse(\"foo-bar\")    # => Exception: Incorrect severity name\n```","summary":"<p>Creates Severity by the name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/ameba/severity.cr","line_number":26,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L26"},"def":{"name":"parse","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"begin\n  super(name)\nrescue ArgumentError\n  raise(\"Incorrect severity name #{name}. Try one of #{values}\")\nend"}}],"instance_methods":[{"html_id":"convention?-instance-method","name":"convention?","abstract":false,"location":{"filename":"src/ameba/severity.cr","line_number":5,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L5"},"def":{"name":"convention?","visibility":"Public","body":"self == Convention"}},{"html_id":"error?-instance-method","name":"error?","abstract":false,"location":{"filename":"src/ameba/severity.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L3"},"def":{"name":"error?","visibility":"Public","body":"self == Error"}},{"html_id":"symbol:Char-instance-method","name":"symbol","doc":"Returns a symbol uniquely indicating severity.\n\n```\nSeverity::Warning.symbol # => 'W'\n```","summary":"<p>Returns a symbol uniquely indicating severity.</p>","abstract":false,"location":{"filename":"src/ameba/severity.cr","line_number":12,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L12"},"def":{"name":"symbol","return_type":"Char","visibility":"Public","body":"case self\nin Error\n  'E'\nin Warning\n  'W'\nin Convention\n  'C'\nend"}},{"html_id":"warning?-instance-method","name":"warning?","abstract":false,"location":{"filename":"src/ameba/severity.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L4"},"def":{"name":"warning?","visibility":"Public","body":"self == Warning"}}]},{"html_id":"ameba/Ameba/SeverityYamlConverter","path":"Ameba/SeverityYamlConverter.html","kind":"class","full_name":"Ameba::SeverityYamlConverter","name":"SeverityYamlConverter","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/severity.cr","line_number":34,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L34"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"Converter for `YAML.mapping` which converts severity enum to and from YAML.","summary":"<p>Converter for <code>YAML.mapping</code> which converts severity enum to and from YAML.</p>","class_methods":[{"html_id":"from_yaml(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"from_yaml","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/ameba/severity.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L35"},"def":{"name":"from_yaml","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"if node.is_a?(YAML::Nodes::Scalar)\nelse\n  raise(\"Severity must be a scalar, not #{node.class}\")\nend\ncase value = node.value\nwhen String\n  Severity.parse(value)\nwhen Nil\n  nil\nelse\n  raise(\"Incorrect severity: #{value}\")\nend\n"}},{"html_id":"to_yaml(value:Severity,yaml:YAML::Nodes::Builder)-class-method","name":"to_yaml","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Severity"},{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"args_string":"(value : Severity, yaml : YAML::Nodes::Builder)","args_html":"(value : <a href=\"../Ameba/Severity.html\">Severity</a>, yaml : YAML::Nodes::Builder)","location":{"filename":"src/ameba/severity.cr","line_number":48,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/severity.cr#L48"},"def":{"name":"to_yaml","args":[{"name":"value","external_name":"value","restriction":"Severity"},{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"visibility":"Public","body":"yaml.scalar(value)"}}]},{"html_id":"ameba/Ameba/Source","path":"Ameba/Source.html","kind":"class","full_name":"Ameba::Source","name":"Source","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Ameba/Spec/Util","kind":"module","full_name":"Ameba::Spec::Util","name":"Util"},{"html_id":"ameba/Ameba/Reportable","kind":"module","full_name":"Ameba::Reportable","name":"Reportable"},{"html_id":"ameba/Ameba/InlineComments","kind":"module","full_name":"Ameba::InlineComments","name":"InlineComments"},{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/source.cr","line_number":4,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L4"},{"filename":"src/ameba/source/corrector.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L3"},{"filename":"src/ameba/source/rewriter.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L1"},{"filename":"src/ameba/spec/support.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/support.cr#L8"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/InlineComments","kind":"module","full_name":"Ameba::InlineComments","name":"InlineComments"},{"html_id":"ameba/Ameba/Reportable","kind":"module","full_name":"Ameba::Reportable","name":"Reportable"},{"html_id":"ameba/Ameba/Spec/Util","kind":"module","full_name":"Ameba::Spec::Util","name":"Util"}],"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"An entity that represents a Crystal source file.\nHas path, lines of code and issues reported by rules.","summary":"<p>An entity that represents a Crystal source file.</p>","constructors":[{"html_id":"new(code:String,path:String=\"\",normalize=true)-class-method","name":"new","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"::String"},{"name":"normalize","default_value":"true","external_name":"normalize","restriction":""}],"args_string":"(code : String, path : String = \"\", normalize = true)","args_html":"(code : String, path : String = <span class=\"s\">&quot;&quot;</span>, normalize = <span class=\"n\">true</span>)","location":{"filename":"src/ameba/spec/support.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/support.cr#L11"},"def":{"name":"new","args":[{"name":"code","external_name":"code","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"::String"},{"name":"normalize","default_value":"true","external_name":"normalize","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(code, path, normalize)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(code:String,path:String=\"\")-class-method","name":"new","doc":"Creates a new source by `code` and `path`.\n\nFor example:\n\n```\npath = \"./src/source.cr\"\nAmeba::Source.new File.read(path), path\n```","summary":"<p>Creates a new source by <code><a href=\"../Ameba/Source.html#code%3AString-instance-method\">#code</a></code> and <code><a href=\"../Ameba/Source.html#path%3AString-instance-method\">#path</a></code>.</p>","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"::String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"::String"}],"args_string":"(code : String, path : String = \"\")","args_html":"(code : String, path : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/ameba/source.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L22"},"def":{"name":"new","args":[{"name":"code","external_name":"code","restriction":"::String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(code, path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ast:Crystal::ASTNode-instance-method","name":"ast","doc":"Returns AST nodes constructed by `Crystal::Parser`.\n\n```\nsource = Ameba::Source.new code, path\nsource.ast\n```\n","summary":"<p>Returns AST nodes constructed by <code>Crystal::Parser</code>.</p>","abstract":false,"location":{"filename":"src/ameba/source.cr","line_number":59,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L59"},"def":{"name":"ast","return_type":"Crystal::ASTNode","visibility":"Public","body":"if (value = @ast).nil?\n  @ast = ((Crystal::Parser.new(code)).tap(&.wants_doc = true).tap(&.filename = path).parse)\nelse\n  value\nend"}},{"html_id":"code:String-instance-method","name":"code","doc":"Crystal code (content of a source file).","summary":"<p>Crystal code (content of a source file).</p>","abstract":false,"location":{"filename":"src/ameba/source.cr","line_number":12,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L12"},"def":{"name":"code","return_type":"String","visibility":"Public","body":"@code"}},{"html_id":"correct-instance-method","name":"correct","doc":"Corrects any correctable issues and updates `code`.\nReturns `false` if no issues were corrected.","summary":"<p>Corrects any correctable issues and updates <code><a href=\"../Ameba/Source.html#code%3AString-instance-method\">#code</a></code>.</p>","abstract":false,"location":{"filename":"src/ameba/source.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L27"},"def":{"name":"correct","visibility":"Public","body":"corrector = Corrector.new(code)\nissues.each(&.correct(corrector))\ncorrected_code = corrector.process\nif code == corrected_code\n  return false\nend\n@code = corrected_code\n@lines = nil\n@ast = nil\ntrue\n"}},{"html_id":"fullpath:String-instance-method","name":"fullpath","abstract":false,"location":{"filename":"src/ameba/source.cr","line_number":66,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L66"},"def":{"name":"fullpath","return_type":"String","visibility":"Public","body":"if (value = @fullpath).nil?\n  @fullpath = (File.expand_path(path))\nelse\n  value\nend"}},{"html_id":"lines:Array(String)-instance-method","name":"lines","doc":"Returns lines of code split by new line character.\nSince `code` is immutable and can't be changed, this\nmethod caches lines in an instance variable, so calling\nit second time will not perform a split, but will return\nlines instantly.\n\n```\nsource = Ameba::Source.new \"a = 1\\nb = 2\", path\nsource.lines # => [\"a = 1\", \"b = 2\"]\n```\n","summary":"<p>Returns lines of code split by new line character.</p>","abstract":false,"location":{"filename":"src/ameba/source.cr","line_number":50,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L50"},"def":{"name":"lines","return_type":"Array(String)","visibility":"Public","body":"if (value = @lines).nil?\n  @lines = (code.split('\\n'))\nelse\n  value\nend"}},{"html_id":"matches_path?(filepath)-instance-method","name":"matches_path?","doc":"Returns `true` if *filepath* matches the source's path, `false` if it does not.","summary":"<p>Returns <code>true</code> if <em>filepath</em> matches the source's path, <code>false</code> if it does not.</p>","abstract":false,"args":[{"name":"filepath","external_name":"filepath","restriction":""}],"args_string":"(filepath)","args_html":"(filepath)","location":{"filename":"src/ameba/source.cr","line_number":76,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L76"},"def":{"name":"matches_path?","args":[{"name":"filepath","external_name":"filepath","restriction":""}],"visibility":"Public","body":"(path == filepath) || (path == (File.expand_path(filepath)))"}},{"html_id":"path:String-instance-method","name":"path","doc":"Path to the source file.","summary":"<p>Path to the source file.</p>","abstract":false,"location":{"filename":"src/ameba/source.cr","line_number":9,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L9"},"def":{"name":"path","return_type":"String","visibility":"Public","body":"@path"}},{"html_id":"spec?-instance-method","name":"spec?","doc":"Returns `true` if the source is a spec file, `false` otherwise.","summary":"<p>Returns <code>true</code> if the source is a spec file, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/ameba/source.cr","line_number":71,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source.cr#L71"},"def":{"name":"spec?","visibility":"Public","body":"path.ends_with?(\"_spec.cr\")"}}],"types":[{"html_id":"ameba/Ameba/Source/Corrector","path":"Ameba/Source/Corrector.html","kind":"class","full_name":"Ameba::Source::Corrector","name":"Corrector","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/source/corrector.cr","line_number":6,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L6"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Source","kind":"class","full_name":"Ameba::Source","name":"Source"},"doc":"This class takes source code and rewrites it based\non the different correction actions supplied.","summary":"<p>This class takes source code and rewrites it based on the different correction actions supplied.</p>","constructors":[{"html_id":"new(code:String)-class-method","name":"new","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"String"}],"args_string":"(code : String)","args_html":"(code : String)","location":{"filename":"src/ameba/source/corrector.cr","line_number":9,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L9"},"def":{"name":"new","args":[{"name":"code","external_name":"code","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(code)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"insert_after(location,end_location,content)-instance-method","name":"insert_after","doc":"Shortcut for `wrap(location, end_location, nil, content)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#wrap%28location%2Cend_location%2Cinsert_before%2Cinsert_after%29-instance-method\">#wrap(location, end_location, nil, content)</a></code></p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(location, end_location, content)","args_html":"(location, end_location, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":37,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L37"},"def":{"name":"insert_after","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"@rewriter.insert_after(loc_to_pos(location), (loc_to_pos(end_location)) + 1, content)"}},{"html_id":"insert_after(node:Crystal::ASTNode,content)-instance-method","name":"insert_after","doc":"Shortcut for `wrap(node, nil, content)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#wrap%28node%3ACrystal%3A%3AASTNode%2Cinsert_before%2Cinsert_after%29-instance-method\">#wrap(node, nil, content)</a></code></p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"content","external_name":"content","restriction":""}],"args_string":"(node : Crystal::ASTNode, content)","args_html":"(node : Crystal::ASTNode, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":100,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L100"},"def":{"name":"insert_after","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"insert_after(end_location(node), content)"}},{"html_id":"insert_after(location,content)-instance-method","name":"insert_after","doc":"Shortcut for `insert_after(location, location, content)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#insert_after%28location%2Cend_location%2Ccontent%29-instance-method\">#insert_after(location, location, content)</a></code></p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(location, content)","args_html":"(location, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":47,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L47"},"def":{"name":"insert_after","args":[{"name":"location","external_name":"location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"@rewriter.insert_after((loc_to_pos(location)) + 1, content)"}},{"html_id":"insert_before(location,end_location,content)-instance-method","name":"insert_before","doc":"Shortcut for `wrap(location, end_location, content, nil)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#wrap%28location%2Cend_location%2Cinsert_before%2Cinsert_after%29-instance-method\">#wrap(location, end_location, content, nil)</a></code></p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(location, end_location, content)","args_html":"(location, end_location, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":32,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L32"},"def":{"name":"insert_before","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"@rewriter.insert_before(loc_to_pos(location), (loc_to_pos(end_location)) + 1, content)"}},{"html_id":"insert_before(node:Crystal::ASTNode,content)-instance-method","name":"insert_before","doc":"Shortcut for `wrap(node, content, nil)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#wrap%28node%3ACrystal%3A%3AASTNode%2Cinsert_before%2Cinsert_after%29-instance-method\">#wrap(node, content, nil)</a></code></p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"content","external_name":"content","restriction":""}],"args_string":"(node : Crystal::ASTNode, content)","args_html":"(node : Crystal::ASTNode, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":95,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L95"},"def":{"name":"insert_before","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"insert_before(location(node), content)"}},{"html_id":"insert_before(location,content)-instance-method","name":"insert_before","doc":"Shortcut for `insert_before(location, location, content)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#insert_before%28location%2Cend_location%2Ccontent%29-instance-method\">#insert_before(location, location, content)</a></code></p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(location, content)","args_html":"(location, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":42,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L42"},"def":{"name":"insert_before","args":[{"name":"location","external_name":"location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"@rewriter.insert_before(loc_to_pos(location), content)"}},{"html_id":"process-instance-method","name":"process","doc":"Applies all scheduled changes and returns modified source as a new string.","summary":"<p>Applies all scheduled changes and returns modified source as a new string.</p>","abstract":false,"location":{"filename":"src/ameba/source/corrector.cr","line_number":132,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L132"},"def":{"name":"process","visibility":"Public","body":"@rewriter.process"}},{"html_id":"remove(location,end_location)-instance-method","name":"remove","doc":"Shortcut for `replace(location, end_location, \"\")`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#replace%28location%2Cend_location%2Ccontent%29-instance-method\">#replace(location, end_location, &quot;&quot;)</a></code></p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""}],"args_string":"(location, end_location)","args_html":"(location, end_location)","location":{"filename":"src/ameba/source/corrector.cr","line_number":27,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L27"},"def":{"name":"remove","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""}],"visibility":"Public","body":"@rewriter.remove(loc_to_pos(location), (loc_to_pos(end_location)) + 1)"}},{"html_id":"remove(node:Crystal::ASTNode)-instance-method","name":"remove","doc":"Shortcut for `replace(node, \"\")`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Corrector.html#replace%28node%3ACrystal%3A%3AASTNode%2Ccontent%29-instance-method\">#replace(node, &quot;&quot;)</a></code></p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"}],"args_string":"(node : Crystal::ASTNode)","args_html":"(node : Crystal::ASTNode)","location":{"filename":"src/ameba/source/corrector.cr","line_number":90,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L90"},"def":{"name":"remove","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"}],"visibility":"Public","body":"remove(location(node), end_location(node))"}},{"html_id":"remove_leading(location,end_location,size)-instance-method","name":"remove_leading","doc":"Removes *size* characters from the beginning of the given range.\nIf *size* is greater than the size of the range, the removed region can\noverrun the end of the range.","summary":"<p>Removes <em>size</em> characters from the beginning of the given range.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"size","external_name":"size","restriction":""}],"args_string":"(location, end_location, size)","args_html":"(location, end_location, size)","location":{"filename":"src/ameba/source/corrector.cr","line_number":59,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L59"},"def":{"name":"remove_leading","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"size","external_name":"size","restriction":""}],"visibility":"Public","body":"@rewriter.remove(loc_to_pos(location), (loc_to_pos(location)) + size)"}},{"html_id":"remove_leading(node:Crystal::ASTNode,size)-instance-method","name":"remove_leading","doc":"Removes *size* characters from the beginning of the given node.\nIf *size* is greater than the size of the node, the removed region can\noverrun the end of the node.","summary":"<p>Removes <em>size</em> characters from the beginning of the given node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"size","external_name":"size","restriction":""}],"args_string":"(node : Crystal::ASTNode, size)","args_html":"(node : Crystal::ASTNode, size)","location":{"filename":"src/ameba/source/corrector.cr","line_number":112,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L112"},"def":{"name":"remove_leading","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"size","external_name":"size","restriction":""}],"visibility":"Public","body":"remove_leading(location(node), end_location(node), size)"}},{"html_id":"remove_preceding(location,end_location,size)-instance-method","name":"remove_preceding","doc":"Removes *size* characters prior to the source range.","summary":"<p>Removes <em>size</em> characters prior to the source range.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"size","external_name":"size","restriction":""}],"args_string":"(location, end_location, size)","args_html":"(location, end_location, size)","location":{"filename":"src/ameba/source/corrector.cr","line_number":52,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L52"},"def":{"name":"remove_preceding","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"size","external_name":"size","restriction":""}],"visibility":"Public","body":"@rewriter.remove((loc_to_pos(location)) - size, loc_to_pos(location))"}},{"html_id":"remove_preceding(node:Crystal::ASTNode,size)-instance-method","name":"remove_preceding","doc":"Removes *size* characters prior to the given node.","summary":"<p>Removes <em>size</em> characters prior to the given node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"size","external_name":"size","restriction":""}],"args_string":"(node : Crystal::ASTNode, size)","args_html":"(node : Crystal::ASTNode, size)","location":{"filename":"src/ameba/source/corrector.cr","line_number":105,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L105"},"def":{"name":"remove_preceding","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"size","external_name":"size","restriction":""}],"visibility":"Public","body":"remove_preceding(location(node), end_location(node), size)"}},{"html_id":"remove_trailing(location,end_location,size)-instance-method","name":"remove_trailing","doc":"Removes *size* characters from the end of the given range.\nIf *size* is greater than the size of the range, the removed region can\noverrun the beginning of the range.","summary":"<p>Removes <em>size</em> characters from the end of the given range.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"size","external_name":"size","restriction":""}],"args_string":"(location, end_location, size)","args_html":"(location, end_location, size)","location":{"filename":"src/ameba/source/corrector.cr","line_number":66,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L66"},"def":{"name":"remove_trailing","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"size","external_name":"size","restriction":""}],"visibility":"Public","body":"@rewriter.remove(((loc_to_pos(end_location)) + 1) - size, (loc_to_pos(end_location)) + 1)"}},{"html_id":"remove_trailing(node:Crystal::ASTNode,size)-instance-method","name":"remove_trailing","doc":"Removes *size* characters from the end of the given node.\nIf *size* is greater than the size of the node, the removed region can\noverrun the beginning of the node.","summary":"<p>Removes <em>size</em> characters from the end of the given node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"size","external_name":"size","restriction":""}],"args_string":"(node : Crystal::ASTNode, size)","args_html":"(node : Crystal::ASTNode, size)","location":{"filename":"src/ameba/source/corrector.cr","line_number":119,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L119"},"def":{"name":"remove_trailing","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"size","external_name":"size","restriction":""}],"visibility":"Public","body":"remove_trailing(location(node), end_location(node), size)"}},{"html_id":"replace(location,end_location,content)-instance-method","name":"replace","doc":"Replaces the code of the given range with *content*.","summary":"<p>Replaces the code of the given range with <em>content</em>.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(location, end_location, content)","args_html":"(location, end_location, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":17,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L17"},"def":{"name":"replace","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"@rewriter.replace(loc_to_pos(location), (loc_to_pos(end_location)) + 1, content)"}},{"html_id":"replace(node:Crystal::ASTNode,content)-instance-method","name":"replace","doc":"Replaces the code of the given node with *content*.","summary":"<p>Replaces the code of the given node with <em>content</em>.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"content","external_name":"content","restriction":""}],"args_string":"(node : Crystal::ASTNode, content)","args_html":"(node : Crystal::ASTNode, content)","location":{"filename":"src/ameba/source/corrector.cr","line_number":80,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L80"},"def":{"name":"replace","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"replace(location(node), end_location(node), content)"}},{"html_id":"wrap(location,end_location,insert_before,insert_after)-instance-method","name":"wrap","doc":"Inserts the given strings before and after the given range.","summary":"<p>Inserts the given strings before and after the given range.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"insert_before","external_name":"insert_before","restriction":""},{"name":"insert_after","external_name":"insert_after","restriction":""}],"args_string":"(location, end_location, insert_before, insert_after)","args_html":"(location, end_location, insert_before, insert_after)","location":{"filename":"src/ameba/source/corrector.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L22"},"def":{"name":"wrap","args":[{"name":"location","external_name":"location","restriction":""},{"name":"end_location","external_name":"end_location","restriction":""},{"name":"insert_before","external_name":"insert_before","restriction":""},{"name":"insert_after","external_name":"insert_after","restriction":""}],"visibility":"Public","body":"@rewriter.wrap(loc_to_pos(location), (loc_to_pos(end_location)) + 1, insert_before, insert_after)"}},{"html_id":"wrap(node:Crystal::ASTNode,insert_before,insert_after)-instance-method","name":"wrap","doc":"Inserts the given strings before and after the given node.","summary":"<p>Inserts the given strings before and after the given node.</p>","abstract":false,"args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"insert_before","external_name":"insert_before","restriction":""},{"name":"insert_after","external_name":"insert_after","restriction":""}],"args_string":"(node : Crystal::ASTNode, insert_before, insert_after)","args_html":"(node : Crystal::ASTNode, insert_before, insert_after)","location":{"filename":"src/ameba/source/corrector.cr","line_number":85,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/corrector.cr#L85"},"def":{"name":"wrap","args":[{"name":"node","external_name":"node","restriction":"Crystal::ASTNode"},{"name":"insert_before","external_name":"insert_before","restriction":""},{"name":"insert_after","external_name":"insert_after","restriction":""}],"visibility":"Public","body":"wrap(location(node), end_location(node), insert_before, insert_after)"}}]},{"html_id":"ameba/Ameba/Source/Rewriter","path":"Ameba/Source/Rewriter.html","kind":"class","full_name":"Ameba::Source::Rewriter","name":"Rewriter","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/source/rewriter.cr","line_number":61,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L61"},{"filename":"src/ameba/source/rewriter/action.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter/action.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Source","kind":"class","full_name":"Ameba::Source","name":"Source"},"doc":"This class performs the heavy lifting in the source rewriting process.\nIt schedules code updates to be performed in the correct order.\n\nFor simple cases, the resulting source will be obvious.\n\nExamples for more complex cases follow. Assume these examples are acting on\nthe source `puts(:hello, :world)`. The methods `#wrap`, `#remove`, etc.\nreceive a range as the first two arguments; for clarity, examples below use\nEnglish sentences and a string of raw code instead.\n\n## Overlapping deletions:\n\n* remove `:hello, `\n* remove `, :world`\n\nThe overlapping ranges are merged and `:hello, :world` will be removed.\n\n## Multiple actions at the same end points:\n\nResults will always be independent of the order they were given.\nException: rewriting actions done on exactly the same range (covered next).\n\nExample:\n\n* replace `, ` by ` => `\n* wrap `:hello, :world` with `{` and `}`\n* replace `:world` with `:everybody`\n* wrap `:world` with `[`, `]`\n\nThe resulting string will be `puts({:hello => [:everybody]})`\nand this result is independent of the order the instructions were given in.\n\n## Multiple wraps on same range:\n\n* wrap `:hello` with `(` and `)`\n* wrap `:hello` with `[` and `]`\n\nThe wraps are combined in order given and results would be `puts([(:hello)], :world)`.\n\n## Multiple replacements on same range:\n\n* replace `:hello` by `:hi`, then\n* replace `:hello` by `:hey`\n\nThe replacements are made in the order given, so the latter replacement\nsupersedes the former and `:hello` will be replaced by `:hey`.\n\n## Swallowed insertions:\n\n* wrap `world` by `__`, `__`\n* replace `:hello, :world` with `:hi`\n\nA containing replacement will swallow the contained rewriting actions\nand `:hello, :world` will be replaced by `:hi`.\n\n## Implementation\n\nThe updates are organized in a tree, according to the ranges they act on\n(where children are strictly contained by their parent).","summary":"<p>This class performs the heavy lifting in the source rewriting process.</p>","constructors":[{"html_id":"new(code:String)-class-method","name":"new","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"::String"}],"args_string":"(code : String)","args_html":"(code : String)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":64,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L64"},"def":{"name":"new","args":[{"name":"code","external_name":"code","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(code)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"code:String-instance-method","name":"code","abstract":false,"location":{"filename":"src/ameba/source/rewriter.cr","line_number":62,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L62"},"def":{"name":"code","return_type":"String","visibility":"Public","body":"@code"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns true if no (non trivial) update has been recorded","summary":"<p>Returns true if no (non trivial) update has been recorded</p>","abstract":false,"location":{"filename":"src/ameba/source/rewriter.cr","line_number":69,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L69"},"def":{"name":"empty?","visibility":"Public","body":"@action_root.empty?"}},{"html_id":"insert_after(begin_pos,end_pos,content)-instance-method","name":"insert_after","doc":"Shortcut for `wrap(begin_pos, end_pos, nil, content)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Rewriter.html#wrap%28begin_pos%2Cend_pos%2Cinsert_before%2Cinsert_after%29-instance-method\">#wrap(begin_pos, end_pos, nil, content)</a></code></p>","abstract":false,"args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(begin_pos, end_pos, content)","args_html":"(begin_pos, end_pos, content)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":94,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L94"},"def":{"name":"insert_after","args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"wrap(begin_pos, end_pos, nil, content)"}},{"html_id":"insert_after(pos,content)-instance-method","name":"insert_after","doc":"Shortcut for `insert_after(pos, pos, content)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Rewriter.html#insert_after%28begin_pos%2Cend_pos%2Ccontent%29-instance-method\">#insert_after(pos, pos, content)</a></code></p>","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(pos, content)","args_html":"(pos, content)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":104,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L104"},"def":{"name":"insert_after","args":[{"name":"pos","external_name":"pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"insert_after(pos, pos, content)"}},{"html_id":"insert_before(begin_pos,end_pos,content)-instance-method","name":"insert_before","doc":"Shortcut for `wrap(begin_pos, end_pos, content, nil)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Rewriter.html#wrap%28begin_pos%2Cend_pos%2Cinsert_before%2Cinsert_after%29-instance-method\">#wrap(begin_pos, end_pos, content, nil)</a></code></p>","abstract":false,"args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(begin_pos, end_pos, content)","args_html":"(begin_pos, end_pos, content)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":89,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L89"},"def":{"name":"insert_before","args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"wrap(begin_pos, end_pos, content, nil)"}},{"html_id":"insert_before(pos,content)-instance-method","name":"insert_before","doc":"Shortcut for `insert_before(pos, pos, content)`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Rewriter.html#insert_before%28begin_pos%2Cend_pos%2Ccontent%29-instance-method\">#insert_before(pos, pos, content)</a></code></p>","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(pos, content)","args_html":"(pos, content)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":99,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L99"},"def":{"name":"insert_before","args":[{"name":"pos","external_name":"pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"insert_before(pos, pos, content)"}},{"html_id":"process-instance-method","name":"process","doc":"Applies all scheduled changes and returns modified source as a new string.","summary":"<p>Applies all scheduled changes and returns modified source as a new string.</p>","abstract":false,"location":{"filename":"src/ameba/source/rewriter.cr","line_number":109,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L109"},"def":{"name":"process","visibility":"Public","body":"String.build do |io|\n  last_end = 0\n  @action_root.ordered_replacements.each do |begin_pos, end_pos, replacement|\n    (io << code[last_end...begin_pos]) << replacement\n    last_end = end_pos\n  end\n  io << code[last_end...code.size]\nend"}},{"html_id":"remove(begin_pos,end_pos)-instance-method","name":"remove","doc":"Shortcut for `replace(begin_pos, end_pos, \"\")`","summary":"<p>Shortcut for <code><a href=\"../../Ameba/Source/Rewriter.html#replace%28begin_pos%2Cend_pos%2Ccontent%29-instance-method\">#replace(begin_pos, end_pos, &quot;&quot;)</a></code></p>","abstract":false,"args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""}],"args_string":"(begin_pos, end_pos)","args_html":"(begin_pos, end_pos)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":84,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L84"},"def":{"name":"remove","args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""}],"visibility":"Public","body":"replace(begin_pos, end_pos, \"\")"}},{"html_id":"replace(begin_pos,end_pos,content)-instance-method","name":"replace","doc":"Replaces the code of the given range with *content*.","summary":"<p>Replaces the code of the given range with <em>content</em>.</p>","abstract":false,"args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"args_string":"(begin_pos, end_pos, content)","args_html":"(begin_pos, end_pos, content)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":74,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L74"},"def":{"name":"replace","args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"content","external_name":"content","restriction":""}],"visibility":"Public","body":"combine(begin_pos, end_pos, replacement: content.to_s)"}},{"html_id":"wrap(begin_pos,end_pos,insert_before,insert_after)-instance-method","name":"wrap","doc":"Inserts the given strings before and after the given range.","summary":"<p>Inserts the given strings before and after the given range.</p>","abstract":false,"args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"insert_before","external_name":"insert_before","restriction":""},{"name":"insert_after","external_name":"insert_after","restriction":""}],"args_string":"(begin_pos, end_pos, insert_before, insert_after)","args_html":"(begin_pos, end_pos, insert_before, insert_after)","location":{"filename":"src/ameba/source/rewriter.cr","line_number":79,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/source/rewriter.cr#L79"},"def":{"name":"wrap","args":[{"name":"begin_pos","external_name":"begin_pos","restriction":""},{"name":"end_pos","external_name":"end_pos","restriction":""},{"name":"insert_before","external_name":"insert_before","restriction":""},{"name":"insert_after","external_name":"insert_after","restriction":""}],"visibility":"Public","body":"combine(begin_pos, end_pos, insert_before: insert_before.to_s, insert_after: insert_after.to_s)"}}]}]},{"html_id":"ameba/Ameba/Spec","path":"Ameba/Spec.html","kind":"module","full_name":"Ameba::Spec","name":"Spec","abstract":false,"locations":[{"filename":"src/ameba/spec/annotated_source.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L2"},{"filename":"src/ameba/spec/be_valid.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"types":[{"html_id":"ameba/Ameba/Spec/AnnotatedSource","path":"Ameba/Spec/AnnotatedSource.html","kind":"class","full_name":"Ameba::Spec::AnnotatedSource","name":"AnnotatedSource","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/spec/annotated_source.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ABBREV","name":"ABBREV","value":"\"[...]\""},{"id":"ANNOTATION_PATTERN_1","name":"ANNOTATION_PATTERN_1","value":"/\\A\\s*(# )?(\\^+|\\^{})( error:)? /"},{"id":"ANNOTATION_PATTERN_2","name":"ANNOTATION_PATTERN_2","value":"\" # error: \""}],"namespace":{"html_id":"ameba/Ameba/Spec","kind":"module","full_name":"Ameba::Spec","name":"Spec"},"doc":"Parsed representation of code annotated with the `# ^^^ error: Message` style","summary":"<p>Parsed representation of code annotated with the <code># ^^^ error: Message</code> style</p>","class_methods":[{"html_id":"parse(annotated_code)-class-method","name":"parse","doc":"Separates annotation lines from code lines. Tracks the real\ncode line number that each annotation corresponds to.","summary":"<p>Separates annotation lines from code lines.</p>","abstract":false,"args":[{"name":"annotated_code","external_name":"annotated_code","restriction":""}],"args_string":"(annotated_code)","args_html":"(annotated_code)","location":{"filename":"src/ameba/spec/annotated_source.cr","line_number":15,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L15"},"def":{"name":"parse","args":[{"name":"annotated_code","external_name":"annotated_code","restriction":""}],"visibility":"Public","body":"lines = [] of String\nannotations = [] of ::Tuple(Int32, String, String)\ncode_lines = annotated_code.split('\\n')\ncode_lines.each do |code_line|\n  case\n  when annotation_match = ANNOTATION_PATTERN_1.match(code_line)\n    message_index = annotation_match.end\n    prefix = code_line[0...message_index]\n    message = code_line[message_index...]\n    annotations << {lines.size, prefix, message}\n  when annotation_index = code_line.index(ANNOTATION_PATTERN_2)\n    lines << code_line[...annotation_index]\n    message_index = annotation_index + ANNOTATION_PATTERN_2.size\n    message = code_line[message_index...]\n    annotations << {lines.size, \"\", message}\n  else\n    lines << code_line\n  end\nend\nif lines.empty?\n  annotations.map! do |_, prefix, message|\n    {1, prefix, message}\n  end\nend\nnew(lines, annotations)\n"}}],"constructors":[{"html_id":"new(lines:Array(String),annotations:Enumerable(Tuple(Int32,String,String)))-class-method","name":"new","doc":"NOTE: Annotations are sorted so that reconstructing the annotation\n      text via `#to_s` is deterministic.","summary":"<p><span class=\"flag purple\">NOTE</span>  Annotations are sorted so that reconstructing the annotation       text via <code><a href=\"../../Ameba/Spec/AnnotatedSource.html#to_s%28io%29-instance-method\">#to_s</a></code> is deterministic.</p>","abstract":false,"args":[{"name":"lines","external_name":"lines","restriction":"::Array(::String)"},{"name":"annotations","external_name":"annotations","restriction":"Enumerable(::Tuple(Int32, String, String))"}],"args_string":"(lines : Array(String), annotations : Enumerable(Tuple(Int32, String, String)))","args_html":"(lines : Array(String), annotations : Enumerable(Tuple(Int32, String, String)))","location":{"filename":"src/ameba/spec/annotated_source.cr","line_number":41,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L41"},"def":{"name":"new","args":[{"name":"lines","external_name":"lines","restriction":"::Array(::String)"},{"name":"annotations","external_name":"annotations","restriction":"Enumerable(::Tuple(Int32, String, String))"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lines, annotations)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(lines:Array(String),issues:Enumerable(Issue))-class-method","name":"new","doc":"Annotates the source code with the Ameba issues provided.\n\nNOTE: Annotations are sorted so that reconstructing the annotation\n      text via `#to_s` is deterministic.","summary":"<p>Annotates the source code with the Ameba issues provided.</p>","abstract":false,"args":[{"name":"lines","external_name":"lines","restriction":"::Array(::String)"},{"name":"issues","external_name":"issues","restriction":"Enumerable(Issue)"}],"args_string":"(lines : Array(String), issues : Enumerable(Issue))","args_html":"(lines : Array(String), issues : Enumerable(<a href=\"../../Ameba/Issue.html\">Issue</a>))","location":{"filename":"src/ameba/spec/annotated_source.cr","line_number":49,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L49"},"def":{"name":"new","args":[{"name":"lines","external_name":"lines","restriction":"::Array(::String)"},{"name":"issues","external_name":"issues","restriction":"Enumerable(Issue)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lines, issues)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other)-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/ameba/spec/annotated_source.cr","line_number":53,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L53"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(other.is_a?(AnnotatedSource) && (other.lines == lines)) && (match_annotations?(other))"}},{"html_id":"annotations:Array(Tuple(Int32,String,String))-instance-method","name":"annotations","doc":"Each entry is the line number, annotation prefix, and message.\nThe prefix is empty if the annotation is at the end of a code line.","summary":"<p>Each entry is the line number, annotation prefix, and message.</p>","abstract":false,"location":{"filename":"src/ameba/spec/annotated_source.cr","line_number":11,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L11"},"def":{"name":"annotations","return_type":"Array(::Tuple(Int32, String, String))","visibility":"Public","body":"@annotations"}},{"html_id":"lines:Array(String)-instance-method","name":"lines","abstract":false,"location":{"filename":"src/ameba/spec/annotated_source.cr","line_number":7,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L7"},"def":{"name":"lines","return_type":"Array(String)","visibility":"Public","body":"@lines"}},{"html_id":"to_s(io)-instance-method","name":"to_s","doc":"Constructs an annotated source string (like what we parse).\n\nReconstructs a deterministic annotated source string. This is\nuseful for eliminating semantically irrelevant annotation\nordering differences.\n\n    source1 = AnnotatedSource.parse(<<-CRYSTAL)\n    line1\n    ^ Annotation 1\n     ^^ Annotation 2\n    CRYSTAL\n\n    source2 = AnnotatedSource.parse(<<-CRYSTAL)\n    line1\n     ^^ Annotation 2\n    ^ Annotation 1\n    CRYSTAL\n\n    source1.to_s == source2.to_s # => true","summary":"<p>Constructs an annotated source string (like what we parse).</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/ameba/spec/annotated_source.cr","line_number":104,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/annotated_source.cr#L104"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"reconstructed = lines.dup\nannotations.reverse_each do |line_number, prefix, message|\n  if prefix.empty?\n    __temp_52 = line_number - 1\n    reconstructed[__temp_52] = reconstructed[__temp_52] + \"#{ANNOTATION_PATTERN_2}#{message}\"\n  else\n    if lines.empty?\n      line_number = 0\n    end\n    reconstructed.insert(line_number, \"#{prefix}#{message}\")\n  end\nend\nio << (reconstructed.join('\\n'))\n"}}]},{"html_id":"ameba/Ameba/Spec/BeValid","path":"Ameba/Spec/BeValid.html","kind":"module","full_name":"Ameba::Spec::BeValid","name":"BeValid","abstract":false,"locations":[{"filename":"src/ameba/spec/be_valid.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L2"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Spec","kind":"module","full_name":"Ameba::Spec","name":"Spec"},"instance_methods":[{"html_id":"be_valid-instance-method","name":"be_valid","abstract":false,"location":{"filename":"src/ameba/spec/be_valid.cr","line_number":3,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L3"},"def":{"name":"be_valid","visibility":"Public","body":"BeValidExpectation.new"}}]},{"html_id":"ameba/Ameba/Spec/BeValidExpectation","path":"Ameba/Spec/BeValidExpectation.html","kind":"struct","full_name":"Ameba::Spec::BeValidExpectation","name":"BeValidExpectation","abstract":false,"superclass":{"html_id":"ameba/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"ameba/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ameba/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/spec/be_valid.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L8"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba/Spec","kind":"module","full_name":"Ameba::Spec","name":"Spec"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/ameba/spec/be_valid.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L8"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"failure_message(source)-instance-method","name":"failure_message","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/spec/be_valid.cr","line_number":13,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L13"},"def":{"name":"failure_message","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"String.build do |str|\n  str << \"Source expected to be valid, but there are issues: \\n\\n\"\n  source.issues.reject(&.disabled?).each do |e|\n    str << \"  * #{e.rule.name}: #{e.message}\\n\"\n  end\nend"}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/ameba/spec/be_valid.cr","line_number":8,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L8"},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"match(source)-instance-method","name":"match","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/spec/be_valid.cr","line_number":9,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L9"},"def":{"name":"match","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"source.valid?"}},{"html_id":"negative_failure_message(source)-instance-method","name":"negative_failure_message","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/spec/be_valid.cr","line_number":22,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/be_valid.cr#L22"},"def":{"name":"negative_failure_message","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"\"Source expected to be invalid, but it is valid.\""}}]},{"html_id":"ameba/Ameba/Spec/ExpectIssue","path":"Ameba/Spec/ExpectIssue.html","kind":"module","full_name":"Ameba::Spec::ExpectIssue","name":"ExpectIssue","abstract":false,"ancestors":[{"html_id":"ameba/Ameba/Spec/Util","kind":"module","full_name":"Ameba::Spec::Util","name":"Util"}],"locations":[{"filename":"src/ameba/spec/expect_issue.cr","line_number":96,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/expect_issue.cr#L96"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ameba/Ameba/Spec/Util","kind":"module","full_name":"Ameba::Spec::Util","name":"Util"}],"namespace":{"html_id":"ameba/Ameba/Spec","kind":"module","full_name":"Ameba::Spec","name":"Spec"},"doc":"Mixin for `expect_issue` and `expect_no_issues`\n\nThis mixin makes it easier to specify strict issue expectations\nin a declarative and visual fashion. Just type out the code that\nshould generate an issue, annotate code by writing '^'s\nunderneath each character that should be highlighted, and follow\nthe carets with a string (separated by a space) that is the\nmessage of the issue. You can include multiple issues in\none code snippet.\n\nUsage:\n\n    expect_issue subject, <<-CRYSTAL\n      a do\n        b\n      end.c\n      # ^^^ error: Avoid chaining a method call on a do...end block.\n      CRYSTAL\n\nEquivalent assertion without `expect_issue`:\n\n    source = Source.new <<-CRYSTAL, \"source.cr\"\n      a do\n        b\n      end.c\n      CRYSTAL\n    subject.catch(source).should_not be_valid\n    source.issues.size.should be(1)\n\n    issue = source.issues.first\n    issue.location.to_s.should eq \"source.cr:3:1\"\n    issue.end_location.to_s.should eq \"source.cr:3:5\"\n    issue.message.should eq(\n      \"Avoid chaining a method call on a do...end block.\"\n    )\n\nAutocorrection can be tested using `expect_correction` after\n`expect_issue`.\n\n    source = expect_issue subject, <<-CRYSTAL\n      x % 2 == 0\n      # ^^^^^^^^ error: Replace with `Int#even?`.\n      CRYSTAL\n\n    expect_correction source, <<-CRYSTAL\n      x.even?\n      CRYSTAL\n\nIf you do not want to specify an issue then use the\ncompanion method `expect_no_issues`. This method is a much\nsimpler assertion since it just inspects the code and checks\nthat there were no issues. The `expect_issue` method has\nto do more work by parsing out lines that contain carets.\n\nIf the code produces an issue that could not be auto-corrected, you can\nuse `expect_no_corrections` after `expect_issue`.\n\n    source = expect_issue subject, <<-CRYSTAL\n      a do\n        b\n      end.c\n      # ^^^ error: Avoid chaining a method call on a do...end block.\n      CRYSTAL\n\n    expect_no_corrections source\n\nIf your code has variables of different lengths, you can use `%{foo}`,\n`^{foo}`, and `_{foo}` to format your template; you can also abbreviate\nissue messages with `[...]`:\n\n    %w[raise fail].each do |keyword|\n      expect_issue subject, <<-CRYSTAL, keyword: keyword\n        %{keyword} Exception.new(msg)\n        # ^{keyword}^^^^^^^^^^^^^^^^^ error: Redundant `Exception.new` [...]\n        CRYSTAL\n\n    %w[has_one has_many].each do |type|\n      expect_issue subject, <<-CRYSTAL, type: type\n        class Book\n          %{type} :chapter, foreign_key: \"book_id\"\n          _{type}         # ^^^^^^^^^^^^^^^^^^^^^^ error: Specifying the default [...]\n        end\n        CRYSTAL\n    end\n\nIf you need to specify an issue on a blank line, use the empty `^{}` marker:\n\n    expect_issue subject, <<-CRYSTAL\n\n      # ^{} error: Missing frozen string literal comment.\n      puts 1\n      CRYSTAL","summary":"<p>Mixin for <code><a href=\"../../Ameba/Spec/ExpectIssue.html#expect_issue%28rules%3ARule%3A%3ABase%7CEnumerable%28Rule%3A%3ABase%29%2Cannotated_code%3AString%2Cpath%3D%22%22%2C%2A%2Cfile%3D__FILE__%2Cline%3D__LINE__%2C%2A%2Areplacements%29-instance-method\">#expect_issue</a></code> and <code><a href=\"../../Ameba/Spec/ExpectIssue.html#expect_no_issues%28rules%3ARule%3A%3ABase%7CEnumerable%28Rule%3A%3ABase%29%2Ccode%3AString%2Cpath%3D%22%22%2C%2A%2Cfile%3D__FILE__%2Cline%3D__LINE__%29-instance-method\">#expect_no_issues</a></code></p>","instance_methods":[{"html_id":"expect_correction(source,correction,*,file=__FILE__,line=__LINE__)-instance-method","name":"expect_correction","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"correction","external_name":"correction","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"args_string":"(source, correction, *, file = __FILE__, line = __LINE__)","args_html":"(source, correction, *, file = __FILE__, line = __LINE__)","location":{"filename":"src/ameba/spec/expect_issue.cr","line_number":131,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/expect_issue.cr#L131"},"def":{"name":"expect_correction","args":[{"name":"source","external_name":"source","restriction":""},{"name":"correction","external_name":"correction","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"splat_index":2,"visibility":"Public","body":"if source.correct\nelse\n  raise(\"Use `expect_no_corrections` if the code will not change\")\nend\nif correction == source.code\n  return\nend\nfail(\"Expected correction:\\n\\n#{correction}\\n\\nGot:\\n\\n#{source.code}\", file, line)\n"}},{"html_id":"expect_issue(rules:Rule::Base|Enumerable(Rule::Base),annotated_code:String,path=\"\",*,file=__FILE__,line=__LINE__,**replacements)-instance-method","name":"expect_issue","abstract":false,"args":[{"name":"rules","external_name":"rules","restriction":"Rule::Base | Enumerable(Rule::Base)"},{"name":"annotated_code","external_name":"annotated_code","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"args_string":"(rules : Rule::Base | Enumerable(Rule::Base), annotated_code : String, path = \"\", *, file = __FILE__, line = __LINE__, **replacements)","args_html":"(rules : <a href=\"../../Ameba/Rule/Base.html\">Rule::Base</a> | Enumerable(<a href=\"../../Ameba/Rule/Base.html\">Rule::Base</a>), annotated_code : String, path = <span class=\"s\">&quot;&quot;</span>, *, file = __FILE__, line = __LINE__, **replacements)","location":{"filename":"src/ameba/spec/expect_issue.cr","line_number":99,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/expect_issue.cr#L99"},"def":{"name":"expect_issue","args":[{"name":"rules","external_name":"rules","restriction":"Rule::Base | Enumerable(Rule::Base)"},{"name":"annotated_code","external_name":"annotated_code","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"double_splat":{"name":"replacements","external_name":"replacements","restriction":""},"splat_index":3,"visibility":"Public","body":"annotated_code = format_issue(annotated_code, **replacements)\nexpected_annotations = AnnotatedSource.parse(annotated_code)\nlines = expected_annotations.lines\ncode = lines.join('\\n')\nif code == annotated_code\n  raise(\"Use `report_no_issues` to assert that no issues are found\")\nend\nsource, actual_annotations = actual_annotations(rules, code, path, lines)\nif actual_annotations == expected_annotations\nelse\n  fail(\"Expected:\\n\\n#{expected_annotations}\\n\\nGot:\\n\\n#{actual_annotations}\", file, line)\nend\nsource\n"}},{"html_id":"expect_no_corrections(source,*,file=__FILE__,line=__LINE__)-instance-method","name":"expect_no_corrections","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"args_string":"(source, *, file = __FILE__, line = __LINE__)","args_html":"(source, *, file = __FILE__, line = __LINE__)","location":{"filename":"src/ameba/spec/expect_issue.cr","line_number":146,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/expect_issue.cr#L146"},"def":{"name":"expect_no_corrections","args":[{"name":"source","external_name":"source","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"splat_index":1,"visibility":"Public","body":"if source.correct\nelse\n  return\nend\nfail(\"Expected no corrections, but got:\\n\\n#{source.code}\", file, line)\n"}},{"html_id":"expect_no_issues(rules:Rule::Base|Enumerable(Rule::Base),code:String,path=\"\",*,file=__FILE__,line=__LINE__)-instance-method","name":"expect_no_issues","abstract":false,"args":[{"name":"rules","external_name":"rules","restriction":"Rule::Base | Enumerable(Rule::Base)"},{"name":"code","external_name":"code","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"args_string":"(rules : Rule::Base | Enumerable(Rule::Base), code : String, path = \"\", *, file = __FILE__, line = __LINE__)","args_html":"(rules : <a href=\"../../Ameba/Rule/Base.html\">Rule::Base</a> | Enumerable(<a href=\"../../Ameba/Rule/Base.html\">Rule::Base</a>), code : String, path = <span class=\"s\">&quot;&quot;</span>, *, file = __FILE__, line = __LINE__)","location":{"filename":"src/ameba/spec/expect_issue.cr","line_number":156,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/expect_issue.cr#L156"},"def":{"name":"expect_no_issues","args":[{"name":"rules","external_name":"rules","restriction":"Rule::Base | Enumerable(Rule::Base)"},{"name":"code","external_name":"code","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"file","default_value":"__FILE__","external_name":"file","restriction":""},{"name":"line","default_value":"__LINE__","external_name":"line","restriction":""}],"splat_index":3,"visibility":"Public","body":"lines = code.split('\\n')\n_, actual_annotations = actual_annotations(rules, code, path, lines)\nif actual_annotations.to_s == code\n  return\nend\nfail(\"Expected no issues, but got:\\n\\n#{actual_annotations}\", file, line)\n"}}]},{"html_id":"ameba/Ameba/Spec/Util","path":"Ameba/Spec/Util.html","kind":"module","full_name":"Ameba::Spec::Util","name":"Util","abstract":false,"locations":[{"filename":"src/ameba/spec/util.cr","line_number":1,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/util.cr#L1"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"ameba/Ameba/Source","kind":"class","full_name":"Ameba::Source","name":"Source"},{"html_id":"ameba/Ameba/Spec/ExpectIssue","kind":"module","full_name":"Ameba::Spec::ExpectIssue","name":"ExpectIssue"}],"namespace":{"html_id":"ameba/Ameba/Spec","kind":"module","full_name":"Ameba::Spec","name":"Spec"},"instance_methods":[{"html_id":"normalize_code(code,separator='\\n')-instance-method","name":"normalize_code","abstract":false,"args":[{"name":"code","external_name":"code","restriction":""},{"name":"separator","default_value":"'\\n'","external_name":"separator","restriction":""}],"args_string":"(code, separator = '\\n')","args_html":"(code, separator = <span class=\"s\">&#39;\\n&#39;</span>)","location":{"filename":"src/ameba/spec/util.cr","line_number":2,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/spec/util.cr#L2"},"def":{"name":"normalize_code","args":[{"name":"code","external_name":"code","restriction":""},{"name":"separator","default_value":"'\\n'","external_name":"separator","restriction":""}],"visibility":"Public","body":"lines = code.split(separator)\nif lines[0].blank? && lines.size > 1\n  lines.shift\nend\nmin_indent = lines.min_of do |line|\n  line.blank? ? code.size : line.size - line.lstrip.size\nend\nlines.join(separator) do |line|\n  line.blank? ? line : line[min_indent..]\nend\n"}}]}]},{"html_id":"ameba/Ameba/Tokenizer","path":"Ameba/Tokenizer.html","kind":"class","full_name":"Ameba::Tokenizer","name":"Tokenizer","abstract":false,"superclass":{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ameba/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ameba/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ameba/tokenizer.cr","line_number":14,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/tokenizer.cr#L14"}],"repository_name":"ameba","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ameba/Ameba","kind":"module","full_name":"Ameba","name":"Ameba"},"doc":"Represents Crystal syntax tokenizer based on `Crystal::Lexer`.\n\n```\nsource = Ameba::Source.new code, path\ntokenizer = Ameba::Tokenizer.new(source)\ntokenizer.run do |token|\n  puts token\nend\n```\n","summary":"<p>Represents Crystal syntax tokenizer based on <code>Crystal::Lexer</code>.</p>","constructors":[{"html_id":"new(lexer:Crystal::Lexer)-class-method","name":"new","doc":"Instantiates Tokenizer using a `lexer`.\n\n```\nlexer = Crystal::Lexer.new(code)\nAmeba::Tokenizer.new(lexer)\n```","summary":"<p>Instantiates Tokenizer using a <code>lexer</code>.</p>","abstract":false,"args":[{"name":"lexer","external_name":"lexer","restriction":"Crystal::Lexer"}],"args_string":"(lexer : Crystal::Lexer)","args_html":"(lexer : Crystal::Lexer)","location":{"filename":"src/ameba/tokenizer.cr","line_number":35,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/tokenizer.cr#L35"},"def":{"name":"new","args":[{"name":"lexer","external_name":"lexer","restriction":"Crystal::Lexer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lexer)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(source)-class-method","name":"new","doc":"Instantiates Tokenizer using a `source`.\n\n```\nsource = Ameba::Source.new code, path\nAmeba::Tokenizer.new(source)\n```","summary":"<p>Instantiates Tokenizer using a <code>source</code>.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""}],"args_string":"(source)","args_html":"(source)","location":{"filename":"src/ameba/tokenizer.cr","line_number":21,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/tokenizer.cr#L21"},"def":{"name":"new","args":[{"name":"source","external_name":"source","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"run(&block:Crystal::Token->_)-instance-method","name":"run","doc":"Runs the tokenizer and yields each token as a block argument.\n\n```\nAmeba::Tokenizer.new(source).run do |token|\n  puts token\nend\n```","summary":"<p>Runs the tokenizer and yields each token as a block argument.</p>","abstract":false,"location":{"filename":"src/ameba/tokenizer.cr","line_number":45,"url":"https://github.com/crystal-ameba/ameba/blob/04b19a60/src/ameba/tokenizer.cr#L45"},"def":{"name":"run","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Crystal::Token -> _)"},"visibility":"Public","body":"begin\n  run_normal_state(@lexer, &block)\n  true\nrescue e : Crystal::SyntaxException\n  false\nend"}}]}]}]}})